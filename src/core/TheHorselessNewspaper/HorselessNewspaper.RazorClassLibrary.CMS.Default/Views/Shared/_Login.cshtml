@using Microsoft.AspNetCore.Authentication
@using HorselessNewspaper.Web.Core.Extensions;
@using HorselessNewspaper.Web.Core.ScopedServices.AuthenticationSchemes;
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Http.Extensions; 
@inject IAuthenticationSchemesCache authenticationSchemes;
@inject IConfiguration configuration;

@* @ @model AuthenticationScheme[] *@

@{
    AuthenticationScheme[] registeredSchemes = await authenticationSchemes.GetExternalProvidersAsync();
    var authority = configuration["Keycloak:Authority"];
}
@if (registeredSchemes != null && (User.Claims == null || User.Claims.Count() == 0))
{
    // enforce https redirect 
    // in case of adverse reverse proxy
    // http scheme forwarding conditions
    var currentUrl = Context.Request.GetDisplayUrl();
    var redirectUri = new UriBuilder(currentUrl)
                {
                    Scheme = Uri.UriSchemeHttps
                    @*,
                    Port = Context.Connection.LocalPort*@
                };

    <div>

        <p class="lead text-right">available authorities</p>
        <small>Auth Authority:</small>
        <br/>
        <small> @authority</small>
        <div>
            @foreach (var scheme in registeredSchemes.OrderBy(p => p.DisplayName))
            {
                <form action="/signin" method="post">
                    <input type="hidden" name="provider" value="@scheme.Name" />
                    <input type="hidden" name="returnUrl" value="@redirectUri.ToString()" />

                    <button class="btn btn-success m-1" type="submit">Connect using @scheme.DisplayName</button>
                </form>
            }
        </div>
    </div>
}
else if (registeredSchemes != null)
{
    <div>
        <div>Welcome, @User.Identity.Name</div>
        <small>Auth Authority:</small>
        <br/>
        <small> @authority</small>
        <form action="/signout" method="post">
            <button class="btn btn-success m-1" type="submit">Sign Out</button>
        </form>
    </div>
}