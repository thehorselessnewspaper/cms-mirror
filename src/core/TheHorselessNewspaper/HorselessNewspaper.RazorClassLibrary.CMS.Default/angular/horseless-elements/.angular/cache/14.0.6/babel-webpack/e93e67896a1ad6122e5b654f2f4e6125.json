{"ast":null,"code":"var isFunction = function (fn) {\n  return typeof fn === \"function\";\n};\n\nvar doUnsubscribe = function (subscription) {\n  subscription && isFunction(subscription.unsubscribe) && subscription.unsubscribe();\n};\n\nvar doUnsubscribeIfArray = function (subscriptionsArray) {\n  Array.isArray(subscriptionsArray) && subscriptionsArray.forEach(doUnsubscribe);\n};\n\nexport function AutoUnsubscribe(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.blackList,\n      blackList = _c === void 0 ? [] : _c,\n      _d = _b.arrayName,\n      arrayName = _d === void 0 ? \"\" : _d,\n      _e = _b.event,\n      event = _e === void 0 ? \"ngOnDestroy\" : _e;\n\n  return function (constructor) {\n    var original = constructor.prototype[event];\n\n    if (!isFunction(original)) {\n      throw new Error(constructor.name + \" is using @AutoUnsubscribe but does not implement OnDestroy\");\n    }\n\n    constructor.prototype[event] = function () {\n      isFunction(original) && original.apply(this, arguments);\n\n      if (arrayName) {\n        doUnsubscribeIfArray(this[arrayName]);\n        return;\n      }\n\n      for (var propName in this) {\n        if (blackList.includes(propName)) continue;\n        var property = this[propName];\n        doUnsubscribe(property);\n      }\n    };\n  };\n} //# sourceMappingURL=auto-unsubscribe.js.map","map":null,"metadata":{},"sourceType":"module"}