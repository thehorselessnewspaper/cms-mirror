{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, InjectionToken, Optional, Inject, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\nlet HorselessContentapiLibService = /*#__PURE__*/(() => {\n  class HorselessContentapiLibService {\n    constructor() {}\n\n  }\n\n  HorselessContentapiLibService.ɵfac = function HorselessContentapiLibService_Factory(t) {\n    return new (t || HorselessContentapiLibService)();\n  };\n\n  HorselessContentapiLibService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessContentapiLibService,\n    factory: HorselessContentapiLibService.ɵfac,\n    providedIn: 'root'\n  });\n  return HorselessContentapiLibService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HorselessContentapiLibComponent = /*#__PURE__*/(() => {\n  class HorselessContentapiLibComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  HorselessContentapiLibComponent.ɵfac = function HorselessContentapiLibComponent_Factory(t) {\n    return new (t || HorselessContentapiLibComponent)();\n  };\n\n  HorselessContentapiLibComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HorselessContentapiLibComponent,\n    selectors: [[\"lib-horseless-contentapi-lib\"]],\n    decls: 2,\n    vars: 0,\n    template: function HorselessContentapiLibComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" horseless-contentapi-lib works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return HorselessContentapiLibComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HorselessContentapiLibModule = /*#__PURE__*/(() => {\n  class HorselessContentapiLibModule {}\n\n  HorselessContentapiLibModule.ɵfac = function HorselessContentapiLibModule_Factory(t) {\n    return new (t || HorselessContentapiLibModule)();\n  };\n\n  HorselessContentapiLibModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HorselessContentapiLibModule\n  });\n  HorselessContentapiLibModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return HorselessContentapiLibModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\n\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass HorselessConfiguration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link HorselessConfiguration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link HorselessConfiguration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet ClientConfigurationService = /*#__PURE__*/(() => {\n  class ClientConfigurationService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    clientConfigurationClientConfigurationGetClientConfiguration(observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/api/ClientConfiguration/GetClientConfiguration`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  ClientConfigurationService.ɵfac = function ClientConfigurationService_Factory(t) {\n    return new (t || ClientConfigurationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  ClientConfigurationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ClientConfigurationService,\n    factory: ClientConfigurationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClientConfigurationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet ContentCollectionRESTService = /*#__PURE__*/(() => {\n  class ContentCollectionRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesContentCollectionRESTCreate(__tenant__, ContentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesContentCollectionRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/ContentCollection/Create`, ContentEntitiesContentCollection, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesContentCollectionRESTGetByObjectId(__tenant__, objectId, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesContentCollectionRESTGetByObjectId.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (objectId !== undefined && objectId !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/ContentCollection/GetByObjectId`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesContentCollectionRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesContentCollectionRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/ContentCollection/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesContentCollectionRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesContentCollectionRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesContentCollectionRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/ContentCollection/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesContentCollection, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  ContentCollectionRESTService.ɵfac = function ContentCollectionRESTService_Factory(t) {\n    return new (t || ContentCollectionRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  ContentCollectionRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContentCollectionRESTService,\n    factory: ContentCollectionRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContentCollectionRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet FilesystemAssetRESTService = /*#__PURE__*/(() => {\n  class FilesystemAssetRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesFilesystemAssetRESTCreate(__tenant__, ContentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesFilesystemAssetRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/FilesystemAsset/Create`, ContentEntitiesFilesystemAsset, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesFilesystemAssetRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesFilesystemAssetRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesFilesystemAssetRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/FilesystemAsset/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesFilesystemAssetRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesFilesystemAssetRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/FilesystemAsset/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesFilesystemAssetRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesFilesystemAssetRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesFilesystemAssetRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/FilesystemAsset/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesFilesystemAsset, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  FilesystemAssetRESTService.ɵfac = function FilesystemAssetRESTService_Factory(t) {\n    return new (t || FilesystemAssetRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  FilesystemAssetRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FilesystemAssetRESTService,\n    factory: FilesystemAssetRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return FilesystemAssetRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet HolonymRESTService = /*#__PURE__*/(() => {\n  class HolonymRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesHolonymRESTCreate(__tenant__, ContentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHolonymRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Holonym/Create`, ContentEntitiesHolonym, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHolonymRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesHolonymRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHolonymRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Holonym/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHolonymRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHolonymRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Holonym/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHolonymRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesHolonymRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHolonymRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Holonym/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesHolonym, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  HolonymRESTService.ɵfac = function HolonymRESTService_Factory(t) {\n    return new (t || HolonymRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  HolonymRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HolonymRESTService,\n    factory: HolonymRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return HolonymRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet HorselessContentRESTService = /*#__PURE__*/(() => {\n  class HorselessContentRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesHorselessContentRESTCreate(__tenant__, ContentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessContentRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessContent/Create`, ContentEntitiesHorselessContent, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHorselessContentRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesHorselessContentRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessContentRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessContent/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHorselessContentRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessContentRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessContent/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHorselessContentRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesHorselessContentRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessContentRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessContent/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesHorselessContent, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  HorselessContentRESTService.ɵfac = function HorselessContentRESTService_Factory(t) {\n    return new (t || HorselessContentRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  HorselessContentRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessContentRESTService,\n    factory: HorselessContentRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return HorselessContentRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet HorselessSessionRESTService = /*#__PURE__*/(() => {\n  class HorselessSessionRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesHorselessSessionRESTCreate(__tenant__, ContentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessSessionRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessSession/Create`, ContentEntitiesHorselessSession, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHorselessSessionRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesHorselessSessionRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessSessionRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessSession/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHorselessSessionRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessSessionRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessSession/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesHorselessSessionRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesHorselessSessionRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesHorselessSessionRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/HorselessSession/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesHorselessSession, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  HorselessSessionRESTService.ɵfac = function HorselessSessionRESTService_Factory(t) {\n    return new (t || HorselessSessionRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  HorselessSessionRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessSessionRESTService,\n    factory: HorselessSessionRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return HorselessSessionRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet JSONAssetRESTService = /*#__PURE__*/(() => {\n  class JSONAssetRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesJSONAssetRESTCreate(__tenant__, ContentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesJSONAssetRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/JSONAsset/Create`, ContentEntitiesJSONAsset, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesJSONAssetRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesJSONAssetRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesJSONAssetRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/JSONAsset/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesJSONAssetRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesJSONAssetRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/JSONAsset/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesJSONAssetRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesJSONAssetRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesJSONAssetRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/JSONAsset/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesJSONAsset, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  JSONAssetRESTService.ɵfac = function JSONAssetRESTService_Factory(t) {\n    return new (t || JSONAssetRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  JSONAssetRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: JSONAssetRESTService,\n    factory: JSONAssetRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return JSONAssetRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet KeycloakAuthenticationService = /*#__PURE__*/(() => {\n  class KeycloakAuthenticationService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n\n\n    canConsumeForm(consumes) {\n      const form = 'multipart/form-data';\n\n      for (const consume of consumes) {\n        if (form === consume) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    keycloakSignInGet(observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = [];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/Keycloak/SignIn`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    keycloakSignInPost(provider, observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = [];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['multipart/form-data'];\n      const canConsumeForm = this.canConsumeForm(consumes);\n      let localVarFormParams;\n      let localVarUseForm = false;\n      let localVarConvertFormParamsToString = false;\n\n      if (localVarUseForm) {\n        localVarFormParams = new FormData();\n      } else {\n        localVarFormParams = new HttpParams({\n          encoder: this.encoder\n        });\n      }\n\n      if (provider !== undefined) {\n        localVarFormParams = localVarFormParams.append('provider', provider) || localVarFormParams;\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/Keycloak/SignIn`, localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    keycloakSignoutPost(observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = [];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/Keycloak/Signout`, null, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  KeycloakAuthenticationService.ɵfac = function KeycloakAuthenticationService_Factory(t) {\n    return new (t || KeycloakAuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  KeycloakAuthenticationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: KeycloakAuthenticationService,\n    factory: KeycloakAuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return KeycloakAuthenticationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet MeronymRESTService = /*#__PURE__*/(() => {\n  class MeronymRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesMeronymRESTCreate(__tenant__, ContentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMeronymRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Meronym/Create`, ContentEntitiesMeronym, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesMeronymRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesMeronymRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMeronymRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Meronym/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesMeronymRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMeronymRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Meronym/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesMeronymRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesMeronymRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMeronymRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Meronym/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesMeronym, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  MeronymRESTService.ɵfac = function MeronymRESTService_Factory(t) {\n    return new (t || MeronymRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  MeronymRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MeronymRESTService,\n    factory: MeronymRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return MeronymRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet MimeTypeRESTService = /*#__PURE__*/(() => {\n  class MimeTypeRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesMimeTypeRESTCreate(__tenant__, ContentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMimeTypeRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/MIMEType/Create`, ContentEntitiesMIMEType, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesMimeTypeRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesMimeTypeRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMimeTypeRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/MIMEType/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesMimeTypeRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMimeTypeRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/MIMEType/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesMimeTypeRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesMimeTypeRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesMimeTypeRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/MIMEType/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesMIMEType, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  MimeTypeRESTService.ɵfac = function MimeTypeRESTService_Factory(t) {\n    return new (t || MimeTypeRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  MimeTypeRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MimeTypeRESTService,\n    factory: MimeTypeRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return MimeTypeRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet NavigationMenuItemRESTService = /*#__PURE__*/(() => {\n  class NavigationMenuItemRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesNavigationMenuItemRESTCreate(__tenant__, ContentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuItemRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/NavigationMenuItem/Create`, ContentEntitiesNavigationMenuItem, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesNavigationMenuItemRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesNavigationMenuItemRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuItemRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/NavigationMenuItem/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesNavigationMenuItemRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuItemRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/NavigationMenuItem/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesNavigationMenuItemRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesNavigationMenuItemRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuItemRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/NavigationMenuItem/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesNavigationMenuItem, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  NavigationMenuItemRESTService.ɵfac = function NavigationMenuItemRESTService_Factory(t) {\n    return new (t || NavigationMenuItemRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  NavigationMenuItemRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NavigationMenuItemRESTService,\n    factory: NavigationMenuItemRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return NavigationMenuItemRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet NavigationMenuRESTService = /*#__PURE__*/(() => {\n  class NavigationMenuRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesNavigationMenuRESTCreate(__tenant__, ContentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuRESTCreate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModelModel/NavigationMenu/Create`, ContentEntitiesNavigationMenu, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesNavigationMenuRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesNavigationMenuRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModelModel/NavigationMenu/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesNavigationMenuRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModelModel/NavigationMenu/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesNavigationMenuRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesNavigationMenuRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesNavigationMenuRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModelModel/NavigationMenu/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesNavigationMenu, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  NavigationMenuRESTService.ɵfac = function NavigationMenuRESTService_Factory(t) {\n    return new (t || NavigationMenuRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  NavigationMenuRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NavigationMenuRESTService,\n    factory: NavigationMenuRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return NavigationMenuRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet TenantInfoRESTService = /*#__PURE__*/(() => {\n  class TenantInfoRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesTenantInfoRESTGetByPageNumber(pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoGetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantInfoRESTCreate(HostingEntitiesTenantInfo, observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoCreate`, HostingEntitiesTenantInfo, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantInfoRESTGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling hostingEntitiesTenantInfoRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoGetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantInfoRESTUpdate(entityCollectionId, HostingEntitiesTenantInfo, observe = 'body', reportProgress = false, options) {\n      if (entityCollectionId === null || entityCollectionId === undefined) {\n        throw new Error('Required parameter entityCollectionId was null or undefined when calling hostingEntitiesTenantInfoRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoUpdate/${encodeURIComponent(String(entityCollectionId))}`, HostingEntitiesTenantInfo, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  TenantInfoRESTService.ɵfac = function TenantInfoRESTService_Factory(t) {\n    return new (t || TenantInfoRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  TenantInfoRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantInfoRESTService,\n    factory: TenantInfoRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return TenantInfoRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet TenantRESTService = /*#__PURE__*/(() => {\n  class TenantRESTService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    contentEntitiesTenantRESTGetByObjectId(objectId, __tenant__, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling contentEntitiesTenantRESTGetByObjectId.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesTenantRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Tenant/GetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesTenantRESTGetByPageNumber(__tenant__, pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesTenantRESTGetByPageNumber.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Tenant/GetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesTenantRESTUpdate(contentCollectionId, __tenant__, ContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesTenantRESTUpdate.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesTenantRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Tenant/Update/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesTenant, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    contentEntitiesTenantRESTUpdateProperties(contentCollectionId, __tenant__, updatedProperties, ContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\n      if (contentCollectionId === null || contentCollectionId === undefined) {\n        throw new Error('Required parameter contentCollectionId was null or undefined when calling contentEntitiesTenantRESTUpdateProperties.');\n      }\n\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling contentEntitiesTenantRESTUpdateProperties.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n\n      if (updatedProperties) {\n        localVarHeaders = localVarHeaders.set('updatedProperties', updatedProperties.join(COLLECTION_FORMATS['csv']));\n      }\n\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Tenant/UpdateProperties/${encodeURIComponent(String(contentCollectionId))}`, ContentEntitiesTenant, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantRESTCreate(HostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantCreate`, HostingEntitiesTenant, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantRESTGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\n      if (objectId === null || objectId === undefined) {\n        throw new Error('Required parameter objectId was null or undefined when calling hostingEntitiesTenantRESTGetByObjectId.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantGetByObjectId`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantRESTGetByPageNumber(pageSize, pageNumber, pageCount, observe = 'body', reportProgress = false, options) {\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (pageSize !== undefined && pageSize !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageSize, 'pageSize');\n      }\n\n      if (pageNumber !== undefined && pageNumber !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageNumber, 'pageNumber');\n      }\n\n      if (pageCount !== undefined && pageCount !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, pageCount, 'pageCount');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantGetByPageNumber`, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    hostingEntitiesTenantRESTUpdate(entityCollectionId, HostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\n      if (entityCollectionId === null || entityCollectionId === undefined) {\n        throw new Error('Required parameter entityCollectionId was null or undefined when calling hostingEntitiesTenantRESTUpdate.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantUpdate/${encodeURIComponent(String(entityCollectionId))}`, HostingEntitiesTenant, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    tenantApiHorselessContentModelTenantCreatePost(__tenant__, ContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\n      if (__tenant__ === null || __tenant__ === undefined) {\n        throw new Error('Required parameter __tenant__ was null or undefined when calling tenantApiHorselessContentModelTenantCreatePost.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json'];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      } // to determine the Content-Type header\n\n\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/${encodeURIComponent(String(__tenant__))}/api/HorselessContentModel/Tenant/Create`, ContentEntitiesTenant, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  TenantRESTService.ɵfac = function TenantRESTService_Factory(t) {\n    return new (t || TenantRESTService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  TenantRESTService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantRESTService,\n    factory: TenantRESTService.ɵfac,\n    providedIn: 'root'\n  });\n  return TenantRESTService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nlet TenantRegistrationService = /*#__PURE__*/(() => {\n  class TenantRegistrationService {\n    constructor(httpClient, basePath, configuration) {\n      this.httpClient = httpClient;\n      this.basePath = 'http://localhost';\n      this.defaultHeaders = new HttpHeaders();\n      this.configuration = new HorselessConfiguration();\n\n      if (configuration) {\n        this.configuration = configuration;\n      }\n\n      if (typeof this.configuration.basePath !== 'string') {\n        if (typeof basePath !== 'string') {\n          basePath = this.basePath;\n        }\n\n        this.configuration.basePath = basePath;\n      }\n\n      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    addToHttpParams(httpParams, value, key) {\n      if (typeof value === \"object\" && value instanceof Date === false) {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value);\n      } else {\n        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n      }\n\n      return httpParams;\n    }\n\n    addToHttpParamsRecursive(httpParams, value, key) {\n      if (value == null) {\n        return httpParams;\n      }\n\n      if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n        } else if (value instanceof Date) {\n          if (key != null) {\n            httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n          } else {\n            throw Error(\"key may not be null if value is Date\");\n          }\n        } else {\n          Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n        }\n      } else if (key != null) {\n        httpParams = httpParams.append(key, value);\n      } else {\n        throw Error(\"key may not be null if value is not object or array\");\n      }\n\n      return httpParams;\n    }\n\n    approveTenantIdGet(tenantId, observe = 'body', reportProgress = false, options) {\n      if (tenantId === null || tenantId === undefined) {\n        throw new Error('Required parameter tenantId was null or undefined when calling approveTenantIdGet.');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = [];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.get(`${this.configuration.basePath}/Approve/${encodeURIComponent(String(tenantId))}`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n    approveTenantIdPost(tenantId, displayName, tenantIdentifier, Id, observe = 'body', reportProgress = false, options) {\n      if (tenantId === null || tenantId === undefined) {\n        throw new Error('Required parameter tenantId was null or undefined when calling approveTenantIdPost.');\n      }\n\n      if (displayName === null || displayName === undefined) {\n        throw new Error('Required parameter displayName was null or undefined when calling approveTenantIdPost.');\n      }\n\n      if (tenantIdentifier === null || tenantIdentifier === undefined) {\n        throw new Error('Required parameter tenantIdentifier was null or undefined when calling approveTenantIdPost.');\n      }\n\n      let localVarQueryParameters = new HttpParams({\n        encoder: this.encoder\n      });\n\n      if (Id !== undefined && Id !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, Id, 'Id');\n      }\n\n      if (displayName !== undefined && displayName !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, displayName, 'displayName');\n      }\n\n      if (tenantIdentifier !== undefined && tenantIdentifier !== null) {\n        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, tenantIdentifier, 'tenantIdentifier');\n      }\n\n      let localVarHeaders = this.defaultHeaders;\n      let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n      if (localVarHttpHeaderAcceptSelected === undefined) {\n        // to determine the Accept header\n        const httpHeaderAccepts = [];\n        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n      }\n\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n\n      let localVarHttpContext = options && options.context;\n\n      if (localVarHttpContext === undefined) {\n        localVarHttpContext = new HttpContext();\n      }\n\n      let responseType_ = 'json';\n\n      if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      }\n\n      return this.httpClient.post(`${this.configuration.basePath}/Approve/${encodeURIComponent(String(tenantId))}`, null, {\n        context: localVarHttpContext,\n        params: localVarQueryParameters,\n        responseType: responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n\n  }\n\n  TenantRegistrationService.ɵfac = function TenantRegistrationService_Factory(t) {\n    return new (t || TenantRegistrationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(HorselessConfiguration, 8));\n  };\n\n  TenantRegistrationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantRegistrationService,\n    factory: TenantRegistrationService.ɵfac,\n    providedIn: 'root'\n  });\n  return TenantRegistrationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst APIS = [ClientConfigurationService, ContentCollectionRESTService, FilesystemAssetRESTService, HolonymRESTService, HorselessContentRESTService, HorselessSessionRESTService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymRESTService, MimeTypeRESTService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantInfoRESTService, TenantRESTService, TenantRegistrationService];\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar ContentEntitiesACEPermission = /*#__PURE__*/(() => {\n  (function (ContentEntitiesACEPermission) {\n    ContentEntitiesACEPermission[\"READ\"] = \"READ\";\n    ContentEntitiesACEPermission[\"CREATE\"] = \"CREATE\";\n    ContentEntitiesACEPermission[\"UPDATE\"] = \"UPDATE\";\n    ContentEntitiesACEPermission[\"DELETE\"] = \"DELETE\";\n    ContentEntitiesACEPermission[\"SHARE\"] = \"SHARE\";\n    ContentEntitiesACEPermission[\"EXECUTE\"] = \"EXECUTE\";\n    ContentEntitiesACEPermission[\"SEARCH\"] = \"SEARCH\";\n    ContentEntitiesACEPermission[\"PUBLISH\"] = \"PUBLISH\";\n    ContentEntitiesACEPermission[\"UNPUBLISH\"] = \"UNPUBLISH\";\n    ContentEntitiesACEPermission[\"APPROVE\"] = \"APPROVE\";\n  })(ContentEntitiesACEPermission || (ContentEntitiesACEPermission = {}));\n\n  return ContentEntitiesACEPermission;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar ContentEntitiesACEPermissionScope = /*#__PURE__*/(() => {\n  (function (ContentEntitiesACEPermissionScope) {\n    ContentEntitiesACEPermissionScope[\"SITE\"] = \"SITE\";\n    ContentEntitiesACEPermissionScope[\"TENANT\"] = \"TENANT\";\n    ContentEntitiesACEPermissionScope[\"OWNER\"] = \"OWNER\";\n    ContentEntitiesACEPermissionScope[\"ROLE\"] = \"ROLE\";\n    ContentEntitiesACEPermissionScope[\"GROUP\"] = \"GROUP\";\n    ContentEntitiesACEPermissionScope[\"WORKFLOW\"] = \"WORKFLOW\";\n    ContentEntitiesACEPermissionScope[\"ANONYMOUS\"] = \"ANONYMOUS\";\n    ContentEntitiesACEPermissionScope[\"EVERYONE\"] = \"EVERYONE\";\n  })(ContentEntitiesACEPermissionScope || (ContentEntitiesACEPermissionScope = {}));\n\n  return ContentEntitiesACEPermissionScope;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar ContentEntitiesACEPermissionType = /*#__PURE__*/(() => {\n  (function (ContentEntitiesACEPermissionType) {\n    ContentEntitiesACEPermissionType[\"PERMIT\"] = \"PERMIT\";\n    ContentEntitiesACEPermissionType[\"DENY\"] = \"DENY\";\n  })(ContentEntitiesACEPermissionType || (ContentEntitiesACEPermissionType = {}));\n\n  return ContentEntitiesACEPermissionType;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar ContentEntitiesTenantIdentifierStrategyName = /*#__PURE__*/(() => {\n  (function (ContentEntitiesTenantIdentifierStrategyName) {\n    ContentEntitiesTenantIdentifierStrategyName[\"STATIC\"] = \"STATIC\";\n    ContentEntitiesTenantIdentifierStrategyName[\"BASE_PATH\"] = \"BASE_PATH\";\n    ContentEntitiesTenantIdentifierStrategyName[\"ASPNETCORE_ROUTE\"] = \"ASPNETCORE_ROUTE\";\n    ContentEntitiesTenantIdentifierStrategyName[\"DNS_HOSTNAME\"] = \"DNS_HOSTNAME\";\n    ContentEntitiesTenantIdentifierStrategyName[\"DNS_FQDN\"] = \"DNS_FQDN\";\n  })(ContentEntitiesTenantIdentifierStrategyName || (ContentEntitiesTenantIdentifierStrategyName = {}));\n\n  return ContentEntitiesTenantIdentifierStrategyName;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar HostingEntitiesACEPermission = /*#__PURE__*/(() => {\n  (function (HostingEntitiesACEPermission) {\n    HostingEntitiesACEPermission[\"READ\"] = \"READ\";\n    HostingEntitiesACEPermission[\"CREATE\"] = \"CREATE\";\n    HostingEntitiesACEPermission[\"UPDATE\"] = \"UPDATE\";\n    HostingEntitiesACEPermission[\"DELETE\"] = \"DELETE\";\n    HostingEntitiesACEPermission[\"SHARE\"] = \"SHARE\";\n    HostingEntitiesACEPermission[\"EXECUTE\"] = \"EXECUTE\";\n    HostingEntitiesACEPermission[\"SEARCH\"] = \"SEARCH\";\n    HostingEntitiesACEPermission[\"PUBLISH\"] = \"PUBLISH\";\n    HostingEntitiesACEPermission[\"UNPUBLISH\"] = \"UNPUBLISH\";\n    HostingEntitiesACEPermission[\"APPROVE\"] = \"APPROVE\";\n  })(HostingEntitiesACEPermission || (HostingEntitiesACEPermission = {}));\n\n  return HostingEntitiesACEPermission;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar HostingEntitiesACEPermissionScope = /*#__PURE__*/(() => {\n  (function (HostingEntitiesACEPermissionScope) {\n    HostingEntitiesACEPermissionScope[\"SITE\"] = \"SITE\";\n    HostingEntitiesACEPermissionScope[\"TENANT\"] = \"TENANT\";\n    HostingEntitiesACEPermissionScope[\"OWNER\"] = \"OWNER\";\n    HostingEntitiesACEPermissionScope[\"ROLE\"] = \"ROLE\";\n    HostingEntitiesACEPermissionScope[\"GROUP\"] = \"GROUP\";\n    HostingEntitiesACEPermissionScope[\"WORKFLOW\"] = \"WORKFLOW\";\n    HostingEntitiesACEPermissionScope[\"ANONYMOUS\"] = \"ANONYMOUS\";\n    HostingEntitiesACEPermissionScope[\"EVERYONE\"] = \"EVERYONE\";\n  })(HostingEntitiesACEPermissionScope || (HostingEntitiesACEPermissionScope = {}));\n\n  return HostingEntitiesACEPermissionScope;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar HostingEntitiesACEPermissionType = /*#__PURE__*/(() => {\n  (function (HostingEntitiesACEPermissionType) {\n    HostingEntitiesACEPermissionType[\"PERMIT\"] = \"PERMIT\";\n    HostingEntitiesACEPermissionType[\"DENY\"] = \"DENY\";\n  })(HostingEntitiesACEPermissionType || (HostingEntitiesACEPermissionType = {}));\n\n  return HostingEntitiesACEPermissionType;\n})();\n;\n/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar HostingEntitiesTenantIdentifierStrategyName = /*#__PURE__*/(() => {\n  (function (HostingEntitiesTenantIdentifierStrategyName) {\n    HostingEntitiesTenantIdentifierStrategyName[\"STATIC\"] = \"STATIC\";\n    HostingEntitiesTenantIdentifierStrategyName[\"BASE_PATH\"] = \"BASE_PATH\";\n    HostingEntitiesTenantIdentifierStrategyName[\"ASPNETCORE_ROUTE\"] = \"ASPNETCORE_ROUTE\";\n    HostingEntitiesTenantIdentifierStrategyName[\"DNS_HOSTNAME\"] = \"DNS_HOSTNAME\";\n    HostingEntitiesTenantIdentifierStrategyName[\"DNS_FQDN\"] = \"DNS_FQDN\";\n  })(HostingEntitiesTenantIdentifierStrategyName || (HostingEntitiesTenantIdentifierStrategyName = {}));\n\n  return HostingEntitiesTenantIdentifierStrategyName;\n})();\n;\nlet HorselessApiModule = /*#__PURE__*/(() => {\n  class HorselessApiModule {\n    constructor(parentModule, http) {\n      if (parentModule) {\n        throw new Error('HorselessApiModule is already loaded. Import in your base AppModule only.');\n      }\n\n      if (!http) {\n        throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n      }\n    }\n\n    static forRoot(configurationFactory) {\n      return {\n        ngModule: HorselessApiModule,\n        providers: [{\n          provide: HorselessConfiguration,\n          useFactory: configurationFactory\n        }]\n      };\n    }\n\n  }\n\n  HorselessApiModule.ɵfac = function HorselessApiModule_Factory(t) {\n    return new (t || HorselessApiModule)(i0.ɵɵinject(HorselessApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8));\n  };\n\n  HorselessApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HorselessApiModule\n  });\n  HorselessApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return HorselessApiModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of horseless-contentapi-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { APIS, BASE_PATH, COLLECTION_FORMATS, ClientConfigurationService, ContentCollectionRESTService, ContentEntitiesACEPermission, ContentEntitiesACEPermissionScope, ContentEntitiesACEPermissionType, ContentEntitiesTenantIdentifierStrategyName, FilesystemAssetRESTService, HolonymRESTService, HorselessApiModule, HorselessConfiguration, HorselessContentRESTService, HorselessContentapiLibComponent, HorselessContentapiLibModule, HorselessContentapiLibService, HorselessSessionRESTService, HostingEntitiesACEPermission, HostingEntitiesACEPermissionScope, HostingEntitiesACEPermissionType, HostingEntitiesTenantIdentifierStrategyName, JSONAssetRESTService, KeycloakAuthenticationService, MeronymRESTService, MimeTypeRESTService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantInfoRESTService, TenantRESTService, TenantRegistrationService }; //# sourceMappingURL=wizardcontrollerprerelease-horseless-contentapi-lib.mjs.map","map":null,"metadata":{},"sourceType":"module"}