{"ast":null,"code":"import { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { createCustomElement } from '@angular/elements';\nimport { TenantEditorModule } from '@wizardcontroller/horseless-tags-library';\nimport { TenantChooserModule } from '@wizardcontroller/horseless-tags-library';\nimport { AuthModule, OidcSecurityService, LogLevel } from 'angular-auth-oidc-client';\nimport { EventTypes } from 'angular-auth-oidc-client';\nimport { AuthConfigModule } from './auth/auth-config.module';\nimport { UnauthorizedComponent } from './modules/HorselessClientAuth/components/Unauthorized/Unauthorized.component';\nimport { filter } from 'rxjs';\nimport { LandingPageComponent } from './modules/HorselessClientAuth/components/LandingPage/LandingPage.component';\nimport { HorselessClientAuthModule } from './modules/HorselessClientAuth/HorselessClientAuth.module';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { BASE_PATH } from '@wizardcontrollerprerelease/horseless-contentapi-lib';\nimport { environment } from '../environments/environment'; // configuring providers with an authentication service that manages your access tokens\n\nimport { HorselessApiModule } from '@wizardcontrollerprerelease/horseless-contentapi-lib';\nimport { HorselessConfiguration } from '@wizardcontrollerprerelease/horseless-contentapi-lib';\nimport { ToolbarModule } from 'primeng/toolbar';\nimport { ButtonModule } from 'primeng/button';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { TenantChooserComponent } from 'projects/wizardcontroller/horseless-tags-library/src/lib/modules/tenant-chooser/tenant-chooser.component';\nimport { TenantEditorComponent } from 'projects/wizardcontroller/horseless-tags-library/src/lib/modules/tenant-editor/tenant-editor.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-auth-oidc-client\";\nimport * as i2 from \"@wizardcontrollerprerelease/horseless-contentapi-lib\";\nimport * as i3 from \"@angular/router\";\nexport function apiConfigFactory() {\n  const params = {// set configuration parameters here.\n  };\n  return new HorselessConfiguration(params);\n}\nconst routes = [{\n  path: 'default',\n  component: LandingPageComponent\n}, {\n  path: 'forbidden',\n  component: UnauthorizedComponent\n}, {\n  path: 'unauthorized',\n  component: UnauthorizedComponent\n}, {\n  path: '',\n  redirectTo: 'default',\n  pathMatch: 'full'\n}];\n/*\r\n  oidc client integration as per\r\n  https://github.com/damienbod/angular-auth-oidc-client/blob/main/projects/sample-code-flow-refresh-tokens/src/app/app.module.ts\r\n*/\n\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    constructor(injector, oidcSecurityService, eventService) {\n      this.injector = injector;\n      this.oidcSecurityService = oidcSecurityService;\n      this.eventService = eventService;\n      this.eventService.registerForEvents().pipe(filter(notification => notification.type === EventTypes.ConfigLoaded)).subscribe(config => {\n        console.log('ConfigLoaded', config);\n      });\n    }\n\n    ngDoBootstrap(app) {\n      // Convert `PopupComponent` to a custom element.\n      const tenantChooserElement = createCustomElement(TenantChooserComponent, {\n        injector: this.injector\n      }); // Register the custom element with the browser.\n\n      customElements.define('horseless-tenant-chooser', tenantChooserElement); // Convert `PopupComponent` to a custom element.\n\n      const tenantEditorComponent = createCustomElement(TenantEditorComponent, {\n        injector: this.injector\n      }); // Register the custom element with the browser.\n\n      customElements.define('horseless-tenant-editor', tenantEditorComponent); // Convert `PopupComponent` to a custom element.\n\n      const appComponent = createCustomElement(AppComponent, {\n        injector: this.injector\n      }); // Register the custom element with the browser.\n\n      customElements.define('horseless-harness', appComponent); // app.bootstrap(AppComponent);\n    }\n\n  }\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.OidcSecurityService), i0.ɵɵinject(i1.PublicEventsService));\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [OidcSecurityService, {\n      provide: BASE_PATH,\n      useValue: environment.API_BASE_PATH\n    }, {\n      provide: HorselessConfiguration,\n      useFactory: authService => new HorselessConfiguration({\n        basePath: environment.API_BASE_PATH,\n        credentials: {\n          Bearer: authService.getAccessToken.bind(authService).toString()\n        }\n      }),\n      deps: [OidcSecurityService],\n      multi: false\n    }],\n    imports: [AuthModule.forRoot({\n      config: {\n        authority: 'https://awsk8sidp.ataxlab.com/auth/realms/horseless-infrastructure',\n        redirectUrl: window.location.origin + '/tenants',\n        postLogoutRedirectUri: window.location.origin + '/index',\n        clientId: 'horseless-web',\n        scope: 'openid profile email offline_access',\n        responseType: 'code',\n        silentRenew: true,\n        useRefreshToken: true,\n        logLevel: LogLevel.Debug\n      }\n    }), ToolbarModule, ButtonModule, MatExpansionModule, MatToolbarModule, HttpClientModule, TenantEditorModule, TenantChooserModule, HorselessClientAuthModule, HorselessApiModule.forRoot(apiConfigFactory), BrowserModule, BrowserAnimationsModule, AuthConfigModule, NgbModule, RouterModule.forRoot(routes)]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}