{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport * as i1 from '@vigouredelaruse/angular-odata';\nimport { ODataBaseService, ODataEntitySetService, EDM_PARSERS } from '@vigouredelaruse/angular-odata';\nlet HorselessContentOdataapiService = /*#__PURE__*/(() => {\n  class HorselessContentOdataapiService {\n    constructor() {}\n\n  }\n\n  HorselessContentOdataapiService.ɵfac = function HorselessContentOdataapiService_Factory(t) {\n    return new (t || HorselessContentOdataapiService)();\n  };\n\n  HorselessContentOdataapiService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessContentOdataapiService,\n    factory: HorselessContentOdataapiService.ɵfac,\n    providedIn: 'root'\n  });\n  return HorselessContentOdataapiService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HorselessContentOdataapiComponent = /*#__PURE__*/(() => {\n  class HorselessContentOdataapiComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  HorselessContentOdataapiComponent.ɵfac = function HorselessContentOdataapiComponent_Factory(t) {\n    return new (t || HorselessContentOdataapiComponent)();\n  };\n\n  HorselessContentOdataapiComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HorselessContentOdataapiComponent,\n    selectors: [[\"lib-horseless-content-odataapi\"]],\n    decls: 2,\n    vars: 0,\n    template: function HorselessContentOdataapiComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" horseless-content-odataapi works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return HorselessContentOdataapiComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HorselessContentOdataapiModule = /*#__PURE__*/(() => {\n  class HorselessContentOdataapiModule {}\n\n  HorselessContentOdataapiModule.ɵfac = function HorselessContentOdataapiModule_Factory(t) {\n    return new (t || HorselessContentOdataapiModule)();\n  };\n\n  HorselessContentOdataapiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HorselessContentOdataapiModule\n  });\n  HorselessContentOdataapiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return HorselessContentOdataapiModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#region ODataApiGen Imports\n//#endregion\n\n\nvar TenantIdentifierStrategyName = /*#__PURE__*/(() => {\n  (function (TenantIdentifierStrategyName) {\n    //#region ODataApiGen Members\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"STATIC\"] = 0] = \"STATIC\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"BASE_PATH\"] = 1] = \"BASE_PATH\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"ASPNETCORE_ROUTE\"] = 2] = \"ASPNETCORE_ROUTE\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"DNS_HOSTNAME\"] = 3] = \"DNS_HOSTNAME\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"DNS_FQDN\"] = 4] = \"DNS_FQDN\"; //#endregion\n  })(TenantIdentifierStrategyName || (TenantIdentifierStrategyName = {}));\n\n  return TenantIdentifierStrategyName;\n})();\n//#region ODataApiGen Imports\n//#endregion\nvar ACEPermissionScope = /*#__PURE__*/(() => {\n  (function (ACEPermissionScope) {\n    //#region ODataApiGen Members\n    ACEPermissionScope[ACEPermissionScope[\"SITE\"] = 0] = \"SITE\";\n    ACEPermissionScope[ACEPermissionScope[\"TENANT\"] = 1] = \"TENANT\";\n    ACEPermissionScope[ACEPermissionScope[\"OWNER\"] = 2] = \"OWNER\";\n    ACEPermissionScope[ACEPermissionScope[\"ROLE\"] = 3] = \"ROLE\";\n    ACEPermissionScope[ACEPermissionScope[\"GROUP\"] = 4] = \"GROUP\";\n    ACEPermissionScope[ACEPermissionScope[\"WORKFLOW\"] = 5] = \"WORKFLOW\";\n    ACEPermissionScope[ACEPermissionScope[\"ANONYMOUS\"] = 6] = \"ANONYMOUS\";\n    ACEPermissionScope[ACEPermissionScope[\"EVERYONE\"] = 7] = \"EVERYONE\"; //#endregion\n  })(ACEPermissionScope || (ACEPermissionScope = {}));\n\n  return ACEPermissionScope;\n})();\n//#region ODataApiGen Imports\n//#endregion\nvar ACEPermission = /*#__PURE__*/(() => {\n  (function (ACEPermission) {\n    //#region ODataApiGen Members\n    ACEPermission[ACEPermission[\"READ\"] = 0] = \"READ\";\n    ACEPermission[ACEPermission[\"CREATE\"] = 1] = \"CREATE\";\n    ACEPermission[ACEPermission[\"UPDATE\"] = 2] = \"UPDATE\";\n    ACEPermission[ACEPermission[\"DELETE\"] = 3] = \"DELETE\";\n    ACEPermission[ACEPermission[\"SHARE\"] = 4] = \"SHARE\";\n    ACEPermission[ACEPermission[\"EXECUTE\"] = 5] = \"EXECUTE\";\n    ACEPermission[ACEPermission[\"SEARCH\"] = 6] = \"SEARCH\";\n    ACEPermission[ACEPermission[\"PUBLISH\"] = 7] = \"PUBLISH\";\n    ACEPermission[ACEPermission[\"UNPUBLISH\"] = 8] = \"UNPUBLISH\";\n    ACEPermission[ACEPermission[\"APPROVE\"] = 9] = \"APPROVE\"; //#endregion\n  })(ACEPermission || (ACEPermission = {}));\n\n  return ACEPermission;\n})();\n//#region ODataApiGen Imports\n//#endregion\nvar ACEPermissionType = /*#__PURE__*/(() => {\n  (function (ACEPermissionType) {\n    //#region ODataApiGen Members\n    ACEPermissionType[ACEPermissionType[\"PERMIT\"] = 0] = \"PERMIT\";\n    ACEPermissionType[ACEPermissionType[\"DENY\"] = 1] = \"DENY\"; //#endregion\n  })(ACEPermissionType || (ACEPermissionType = {}));\n\n  return ACEPermissionType;\n})();\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\nconst TenantIdentifierStrategyNameConfig = {\n  name: 'TenantIdentifierStrategyName',\n  members: TenantIdentifierStrategyName,\n  fields: {\n    STATIC: {\n      value: 0\n    },\n    BASE_PATH: {\n      value: 1\n    },\n    ASPNETCORE_ROUTE: {\n      value: 2\n    },\n    DNS_HOSTNAME: {\n      value: 3\n    },\n    DNS_FQDN: {\n      value: 4\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\n\nconst ACEPermissionScopeConfig = {\n  name: 'ACEPermissionScope',\n  members: ACEPermissionScope,\n  fields: {\n    SITE: {\n      value: 0\n    },\n    TENANT: {\n      value: 1\n    },\n    OWNER: {\n      value: 2\n    },\n    ROLE: {\n      value: 3\n    },\n    GROUP: {\n      value: 4\n    },\n    WORKFLOW: {\n      value: 5\n    },\n    ANONYMOUS: {\n      value: 6\n    },\n    EVERYONE: {\n      value: 7\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\n\nconst ACEPermissionConfig = {\n  name: 'ACEPermission',\n  flags: true,\n  members: ACEPermission,\n  fields: {\n    READ: {\n      value: 0\n    },\n    CREATE: {\n      value: 1\n    },\n    UPDATE: {\n      value: 2\n    },\n    DELETE: {\n      value: 3\n    },\n    SHARE: {\n      value: 4\n    },\n    EXECUTE: {\n      value: 5\n    },\n    SEARCH: {\n      value: 6\n    },\n    PUBLISH: {\n      value: 7\n    },\n    UNPUBLISH: {\n      value: 8\n    },\n    APPROVE: {\n      value: 9\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\n\nconst ACEPermissionTypeConfig = {\n  name: 'ACEPermissionType',\n  members: ACEPermissionType,\n  fields: {\n    PERMIT: {\n      value: 0\n    },\n    DENY: {\n      value: 1\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst AccessControlEntryEntityConfig = {\n  name: 'AccessControlEntry',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsActive: {\n      type: 'Edm.Boolean'\n    },\n    Scope: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ACEPermissionScope',\n      nullable: false\n    },\n    Permission: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ACEPermission',\n      nullable: false\n    },\n    PermissionType: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ACEPermissionType',\n      nullable: false\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    SubjectAccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    SubjectHorselessSessions: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessSession',\n      collection: true,\n      navigation: true\n    },\n    SubjectPrincipals: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    SubjectTenants: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant',\n      collection: true,\n      navigation: true\n    },\n    ManagedContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    ManagedHorselessContents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent',\n      collection: true,\n      navigation: true\n    },\n    ManagedHorselessViews: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessView',\n      collection: true,\n      navigation: true\n    },\n    ManagedPublications: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Publication',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst ContentCollectionEntityConfig = {\n  name: 'ContentCollection',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    AllowAnonymousRead: {\n      type: 'Edm.Boolean'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    PublishedURL: {\n      type: 'Edm.String'\n    },\n    PreviewURL: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ChildContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    HorselessViews: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessView',\n      collection: true,\n      navigation: true\n    },\n    MimeContents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent',\n      collection: true,\n      navigation: true\n    },\n    ParentContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    Publications: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Publication',\n      collection: true,\n      navigation: true\n    },\n    Taxonomies: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxonomy',\n      collection: true,\n      navigation: true\n    },\n    Tenants: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst FilesystemAssetEntityConfig = {\n  name: 'FilesystemAsset',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Filename: {\n      type: 'Edm.String'\n    },\n    PublishedURL: {\n      type: 'Edm.String'\n    },\n    PreviewURL: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    HorselessContents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst HolonymEntityConfig = {\n  name: 'Holonym',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    JsonValue: {\n      type: 'Edm.String'\n    },\n    JsonSchema: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    Meronyms: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Meronym',\n      collection: true,\n      navigation: true\n    },\n    Taxons: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxon',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst HorselessContentEntityConfig = {\n  name: 'HorselessContent',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    FilesystemAssetId: {\n      type: 'Edm.Guid'\n    },\n    JSONAssetId: {\n      type: 'Edm.Guid'\n    },\n    MIMETypeId: {\n      type: 'Edm.Guid'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    PublishedURL: {\n      type: 'Edm.String'\n    },\n    PreviewURL: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    FilesystemAsset: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.FilesystemAsset',\n      navigation: true,\n      referentials: [{\n        property: 'FilesystemAssetId',\n        referencedProperty: 'Id'\n      }]\n    },\n    JSONAsset: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.JSONAsset',\n      navigation: true,\n      referentials: [{\n        property: 'JSONAssetId',\n        referencedProperty: 'Id'\n      }]\n    },\n    MIMEType: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.MIMEType',\n      navigation: true,\n      referentials: [{\n        property: 'MIMETypeId',\n        referencedProperty: 'Id'\n      }]\n    },\n    ContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst HorselessSessionEntityConfig = {\n  name: 'HorselessSession',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    SessionId: {\n      type: 'Edm.String'\n    },\n    Iss: {\n      type: 'Edm.String'\n    },\n    Aud: {\n      type: 'Edm.String'\n    },\n    Sub: {\n      type: 'Edm.String'\n    },\n    IsAnonymous: {\n      type: 'Edm.Boolean'\n    },\n    HorselessSessionPrincipalId: {\n      type: 'Edm.Guid'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    HorselessSessionPrincipal: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      navigation: true,\n      referentials: [{\n        property: 'HorselessSessionPrincipalId',\n        referencedProperty: 'Id'\n      }]\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst HorselessViewEntityConfig = {\n  name: 'HorselessView',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsActive: {\n      type: 'Edm.Boolean'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    Exists: {\n      type: 'Edm.Boolean',\n      nullable: false\n    },\n    IsDirectory: {\n      type: 'Edm.Boolean',\n      nullable: false\n    },\n    LastModified: {\n      type: 'Edm.DateTimeOffset',\n      nullable: false\n    },\n    Length: {\n      type: 'Edm.Int64',\n      nullable: false\n    },\n    Name: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    PhysicalPath: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    ViewContent: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst JSONAssetEntityConfig = {\n  name: 'JSONAsset',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    JsonValue: {\n      type: 'Edm.String'\n    },\n    JsonSchema: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    HorselessContents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst MeronymEntityConfig = {\n  name: 'Meronym',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    JsonValue: {\n      type: 'Edm.String'\n    },\n    JsonSchema: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    Holonyms: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Holonym',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst MIMETypeEntityConfig = {\n  name: 'MIMEType',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    MIMETypeName: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    HorselessContents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst NavigationMenuEntityConfig = {\n  name: 'NavigationMenu',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    PublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    UnPublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    MenuLabel: {\n      type: 'Edm.String'\n    },\n    MenuDescription: {\n      type: 'Edm.String'\n    },\n    MenuAltText: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ChildNavigationMenuItems: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenuItem',\n      collection: true,\n      navigation: true\n    },\n    Children: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenu',\n      collection: true,\n      navigation: true\n    },\n    Parents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenu',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst NavigationMenuItemEntityConfig = {\n  name: 'NavigationMenuItem',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    PublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    UnPublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    MenuItemLabel: {\n      type: 'Edm.String'\n    },\n    MenuItemDescription: {\n      type: 'Edm.String'\n    },\n    MenuItemAltText: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ChildNavigationItems: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenuItem',\n      collection: true,\n      navigation: true\n    },\n    ParentNavigationItems: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenuItem',\n      collection: true,\n      navigation: true\n    },\n    ParentNavigationMenus: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenu',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst NugetPackageEntityConfig = {\n  name: 'NugetPackage',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    PublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    UnPublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    PackageId: {\n      type: 'Edm.String'\n    },\n    PackageVersion: {\n      type: 'Edm.String'\n    },\n    PackageAuthor: {\n      type: 'Edm.String'\n    },\n    PackageSource: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst PlaceholderEntityConfig = {\n  name: 'Placeholder',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    Description: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst PrincipalEntityConfig = {\n  name: 'Principal',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Iss: {\n      type: 'Edm.String'\n    },\n    Aud: {\n      type: 'Edm.String'\n    },\n    Sub: {\n      type: 'Edm.String'\n    },\n    IsAnonymous: {\n      type: 'Edm.Boolean',\n      nullable: false\n    },\n    UPN: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    Email: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    PreferredUserName: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    HorselessSessions: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessSession',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    OwnedAccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    OwnedHorselessSessions: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessSession',\n      collection: true,\n      navigation: true\n    },\n    OwnedPrincipals: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    OwnedTenants: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    TenantAccounts: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant',\n      collection: true,\n      navigation: true\n    },\n    PrincipalClaimContainer: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaimContainer',\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst PublicationEntityConfig = {\n  name: 'Publication',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    PublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    UnPublishAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean'\n    },\n    PublishedURL: {\n      type: 'Edm.String'\n    },\n    PreviewURL: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    PublicationChildrens: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Publication',\n      collection: true,\n      navigation: true\n    },\n    PublicationParents: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Publication',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TaxonEntityConfig = {\n  name: 'Taxon',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    JsonValue: {\n      type: 'Edm.String'\n    },\n    JsonSchema: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    AntecedentTaxons: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxon',\n      collection: true,\n      navigation: true\n    },\n    DerivativeTaxons: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxon',\n      collection: true,\n      navigation: true\n    },\n    Holonyms: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Holonym',\n      collection: true,\n      navigation: true\n    },\n    Taxonomies: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxonomy',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TaxonomyEntityConfig = {\n  name: 'Taxonomy',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    JsonValue: {\n      type: 'Edm.String'\n    },\n    JsonSchema: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    Taxons: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxon',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantEntityConfig = {\n  name: 'Tenant',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsPublished: {\n      type: 'Edm.Boolean',\n      nullable: false\n    },\n    BaseUrl: {\n      type: 'Edm.String'\n    },\n    TenantIdentifier: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Accounts: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    ContentCollections: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    TenantIdentifierStrategy: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategy',\n      navigation: true\n    },\n    MetaData: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.JSONAsset',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst PrincipalClaimEntityConfig = {\n  name: 'PrincipalClaim',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    ClaimType: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    ClaimValue: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    ClaimValueType: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    ClaimIssuer: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    PrincipalClaimContainerId: {\n      type: 'Edm.Guid'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    PrincipalClaimContainer: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaimContainer',\n      navigation: true,\n      referentials: [{\n        property: 'PrincipalClaimContainerId',\n        referencedProperty: 'Id'\n      }]\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst PrincipalClaimContainerEntityConfig = {\n  name: 'PrincipalClaimContainer',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    PrincipalId: {\n      type: 'Edm.Guid'\n    },\n    PrincipalClaim: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaim',\n      collection: true,\n      navigation: true\n    },\n    Principal: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      navigation: true,\n      referentials: [{\n        property: 'PrincipalId',\n        referencedProperty: 'Id'\n      }]\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantIdentifierStrategyContainerEntityConfig = {\n  name: 'TenantIdentifierStrategyContainer',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    TenantIdentifierStrategyName: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategyName',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    ObjectId: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    TenantIdentifier: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    Strategy: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategy',\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantIdentifierStrategyEntityConfig = {\n  name: 'TenantIdentifierStrategy',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    ObjectId: {\n      type: 'Edm.String',\n      nullable: false\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    TargetTenant: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant',\n      navigation: true\n    },\n    StrategyContainers: {\n      type: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategyContainer',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n\nlet ContentEntitiesService = /*#__PURE__*/(() => {\n  class ContentEntitiesService extends ODataBaseService {\n    constructor(client) {\n      super(client, 'ContentEntitiesContainer', 'HorselessContent');\n    }\n\n  }\n\n  ContentEntitiesService.ɵfac = function ContentEntitiesService_Factory(t) {\n    return new (t || ContentEntitiesService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  ContentEntitiesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContentEntitiesService,\n    factory: ContentEntitiesService.ɵfac\n  });\n  return ContentEntitiesService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet AccessControlEntryService = /*#__PURE__*/(() => {\n  class AccessControlEntryService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'AccessControlEntry', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    managedContentCollections(key) {\n      return this.entity(key).navigationProperty('ManagedContentCollections');\n    }\n\n    fetchManagedContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.managedContentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToManagedContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.managedContentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromManagedContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.managedContentCollections(key).reference().remove(target);\n    }\n\n    managedHorselessContents(key) {\n      return this.entity(key).navigationProperty('ManagedHorselessContents');\n    }\n\n    fetchManagedHorselessContents(key, options) {\n      return this.fetchNavigationProperty(this.managedHorselessContents(key), 'entities', options);\n    }\n\n    addHorselessContentToManagedHorselessContents(key, target, {\n      etag\n    } = {}) {\n      return this.managedHorselessContents(key).reference().add(target);\n    }\n\n    removeHorselessContentFromManagedHorselessContents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.managedHorselessContents(key).reference().remove(target);\n    }\n\n    managedHorselessViews(key) {\n      return this.entity(key).navigationProperty('ManagedHorselessViews');\n    }\n\n    fetchManagedHorselessViews(key, options) {\n      return this.fetchNavigationProperty(this.managedHorselessViews(key), 'entities', options);\n    }\n\n    addHorselessViewToManagedHorselessViews(key, target, {\n      etag\n    } = {}) {\n      return this.managedHorselessViews(key).reference().add(target);\n    }\n\n    removeHorselessViewFromManagedHorselessViews(key, {\n      target,\n      etag\n    } = {}) {\n      return this.managedHorselessViews(key).reference().remove(target);\n    }\n\n    managedPublications(key) {\n      return this.entity(key).navigationProperty('ManagedPublications');\n    }\n\n    fetchManagedPublications(key, options) {\n      return this.fetchNavigationProperty(this.managedPublications(key), 'entities', options);\n    }\n\n    addPublicationToManagedPublications(key, target, {\n      etag\n    } = {}) {\n      return this.managedPublications(key).reference().add(target);\n    }\n\n    removePublicationFromManagedPublications(key, {\n      target,\n      etag\n    } = {}) {\n      return this.managedPublications(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    subjectAccessControlEntries(key) {\n      return this.entity(key).navigationProperty('SubjectAccessControlEntries');\n    }\n\n    fetchSubjectAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.subjectAccessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToSubjectAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.subjectAccessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromSubjectAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectAccessControlEntries(key).reference().remove(target);\n    }\n\n    subjectHorselessSessions(key) {\n      return this.entity(key).navigationProperty('SubjectHorselessSessions');\n    }\n\n    fetchSubjectHorselessSessions(key, options) {\n      return this.fetchNavigationProperty(this.subjectHorselessSessions(key), 'entities', options);\n    }\n\n    addHorselessSessionToSubjectHorselessSessions(key, target, {\n      etag\n    } = {}) {\n      return this.subjectHorselessSessions(key).reference().add(target);\n    }\n\n    removeHorselessSessionFromSubjectHorselessSessions(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectHorselessSessions(key).reference().remove(target);\n    }\n\n    subjectPrincipals(key) {\n      return this.entity(key).navigationProperty('SubjectPrincipals');\n    }\n\n    fetchSubjectPrincipals(key, options) {\n      return this.fetchNavigationProperty(this.subjectPrincipals(key), 'entities', options);\n    }\n\n    addPrincipalToSubjectPrincipals(key, target, {\n      etag\n    } = {}) {\n      return this.subjectPrincipals(key).reference().add(target);\n    }\n\n    removePrincipalFromSubjectPrincipals(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectPrincipals(key).reference().remove(target);\n    }\n\n    subjectTenants(key) {\n      return this.entity(key).navigationProperty('SubjectTenants');\n    }\n\n    fetchSubjectTenants(key, options) {\n      return this.fetchNavigationProperty(this.subjectTenants(key), 'entities', options);\n    }\n\n    addTenantToSubjectTenants(key, target, {\n      etag\n    } = {}) {\n      return this.subjectTenants(key).reference().add(target);\n    }\n\n    removeTenantFromSubjectTenants(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectTenants(key).reference().remove(target);\n    }\n\n  }\n\n  AccessControlEntryService.ɵfac = function AccessControlEntryService_Factory(t) {\n    return new (t || AccessControlEntryService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  AccessControlEntryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AccessControlEntryService,\n    factory: AccessControlEntryService.ɵfac\n  });\n  return AccessControlEntryService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet ContentCollectionService = /*#__PURE__*/(() => {\n  class ContentCollectionService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'ContentCollection', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    childContentCollections(key) {\n      return this.entity(key).navigationProperty('ChildContentCollections');\n    }\n\n    fetchChildContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.childContentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToChildContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.childContentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromChildContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.childContentCollections(key).reference().remove(target);\n    }\n\n    horselessViews(key) {\n      return this.entity(key).navigationProperty('HorselessViews');\n    }\n\n    fetchHorselessViews(key, options) {\n      return this.fetchNavigationProperty(this.horselessViews(key), 'entities', options);\n    }\n\n    addHorselessViewToHorselessViews(key, target, {\n      etag\n    } = {}) {\n      return this.horselessViews(key).reference().add(target);\n    }\n\n    removeHorselessViewFromHorselessViews(key, {\n      target,\n      etag\n    } = {}) {\n      return this.horselessViews(key).reference().remove(target);\n    }\n\n    mimeContents(key) {\n      return this.entity(key).navigationProperty('MimeContents');\n    }\n\n    fetchMimeContents(key, options) {\n      return this.fetchNavigationProperty(this.mimeContents(key), 'entities', options);\n    }\n\n    addHorselessContentToMimeContents(key, target, {\n      etag\n    } = {}) {\n      return this.mimeContents(key).reference().add(target);\n    }\n\n    removeHorselessContentFromMimeContents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.mimeContents(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    parentContentCollections(key) {\n      return this.entity(key).navigationProperty('ParentContentCollections');\n    }\n\n    fetchParentContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.parentContentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToParentContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.parentContentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromParentContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.parentContentCollections(key).reference().remove(target);\n    }\n\n    publications(key) {\n      return this.entity(key).navigationProperty('Publications');\n    }\n\n    fetchPublications(key, options) {\n      return this.fetchNavigationProperty(this.publications(key), 'entities', options);\n    }\n\n    addPublicationToPublications(key, target, {\n      etag\n    } = {}) {\n      return this.publications(key).reference().add(target);\n    }\n\n    removePublicationFromPublications(key, {\n      target,\n      etag\n    } = {}) {\n      return this.publications(key).reference().remove(target);\n    }\n\n    taxonomies(key) {\n      return this.entity(key).navigationProperty('Taxonomies');\n    }\n\n    fetchTaxonomies(key, options) {\n      return this.fetchNavigationProperty(this.taxonomies(key), 'entities', options);\n    }\n\n    addTaxonomyToTaxonomies(key, target, {\n      etag\n    } = {}) {\n      return this.taxonomies(key).reference().add(target);\n    }\n\n    removeTaxonomyFromTaxonomies(key, {\n      target,\n      etag\n    } = {}) {\n      return this.taxonomies(key).reference().remove(target);\n    }\n\n    tenants(key) {\n      return this.entity(key).navigationProperty('Tenants');\n    }\n\n    fetchTenants(key, options) {\n      return this.fetchNavigationProperty(this.tenants(key), 'entities', options);\n    }\n\n    addTenantToTenants(key, target, {\n      etag\n    } = {}) {\n      return this.tenants(key).reference().add(target);\n    }\n\n    removeTenantFromTenants(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenants(key).reference().remove(target);\n    }\n\n  }\n\n  ContentCollectionService.ɵfac = function ContentCollectionService_Factory(t) {\n    return new (t || ContentCollectionService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  ContentCollectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContentCollectionService,\n    factory: ContentCollectionService.ɵfac\n  });\n  return ContentCollectionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet FilesystemAssetService = /*#__PURE__*/(() => {\n  class FilesystemAssetService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'FilesystemAsset', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.FilesystemAsset');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    horselessContents(key) {\n      return this.entity(key).navigationProperty('HorselessContents');\n    }\n\n    fetchHorselessContents(key, options) {\n      return this.fetchNavigationProperty(this.horselessContents(key), 'entities', options);\n    }\n\n    addHorselessContentToHorselessContents(key, target, {\n      etag\n    } = {}) {\n      return this.horselessContents(key).reference().add(target);\n    }\n\n    removeHorselessContentFromHorselessContents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.horselessContents(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  FilesystemAssetService.ɵfac = function FilesystemAssetService_Factory(t) {\n    return new (t || FilesystemAssetService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  FilesystemAssetService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FilesystemAssetService,\n    factory: FilesystemAssetService.ɵfac\n  });\n  return FilesystemAssetService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet HolonymService = /*#__PURE__*/(() => {\n  class HolonymService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Holonym', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Holonym');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    meronyms(key) {\n      return this.entity(key).navigationProperty('Meronyms');\n    }\n\n    fetchMeronyms(key, options) {\n      return this.fetchNavigationProperty(this.meronyms(key), 'entities', options);\n    }\n\n    addMeronymToMeronyms(key, target, {\n      etag\n    } = {}) {\n      return this.meronyms(key).reference().add(target);\n    }\n\n    removeMeronymFromMeronyms(key, {\n      target,\n      etag\n    } = {}) {\n      return this.meronyms(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    taxons(key) {\n      return this.entity(key).navigationProperty('Taxons');\n    }\n\n    fetchTaxons(key, options) {\n      return this.fetchNavigationProperty(this.taxons(key), 'entities', options);\n    }\n\n    addTaxonToTaxons(key, target, {\n      etag\n    } = {}) {\n      return this.taxons(key).reference().add(target);\n    }\n\n    removeTaxonFromTaxons(key, {\n      target,\n      etag\n    } = {}) {\n      return this.taxons(key).reference().remove(target);\n    }\n\n  }\n\n  HolonymService.ɵfac = function HolonymService_Factory(t) {\n    return new (t || HolonymService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  HolonymService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HolonymService,\n    factory: HolonymService.ɵfac\n  });\n  return HolonymService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet HorselessContentService = /*#__PURE__*/(() => {\n  class HorselessContentService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'HorselessContent', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    contentCollections(key) {\n      return this.entity(key).navigationProperty('ContentCollections');\n    }\n\n    fetchContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.contentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().remove(target);\n    }\n\n    filesystemAsset(key) {\n      return this.entity(key).navigationProperty('FilesystemAsset');\n    }\n\n    fetchFilesystemAsset(key, options) {\n      return this.fetchNavigationProperty(this.filesystemAsset(key), 'entity', options);\n    }\n\n    setFilesystemAssetAsFilesystemAsset(key, target, {\n      etag\n    } = {}) {\n      return this.filesystemAsset(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetFilesystemAssetAsFilesystemAsset(key, {\n      target,\n      etag\n    } = {}) {\n      return this.filesystemAsset(key).reference().unset({\n        etag\n      });\n    }\n\n    jSONAsset(key) {\n      return this.entity(key).navigationProperty('JSONAsset');\n    }\n\n    fetchJSONAsset(key, options) {\n      return this.fetchNavigationProperty(this.jSONAsset(key), 'entity', options);\n    }\n\n    setJSONAssetAsJSONAsset(key, target, {\n      etag\n    } = {}) {\n      return this.jSONAsset(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetJSONAssetAsJSONAsset(key, {\n      target,\n      etag\n    } = {}) {\n      return this.jSONAsset(key).reference().unset({\n        etag\n      });\n    }\n\n    mIMEType(key) {\n      return this.entity(key).navigationProperty('MIMEType');\n    }\n\n    fetchMIMEType(key, options) {\n      return this.fetchNavigationProperty(this.mIMEType(key), 'entity', options);\n    }\n\n    setMIMETypeAsMIMEType(key, target, {\n      etag\n    } = {}) {\n      return this.mIMEType(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetMIMETypeAsMIMEType(key, {\n      target,\n      etag\n    } = {}) {\n      return this.mIMEType(key).reference().unset({\n        etag\n      });\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  HorselessContentService.ɵfac = function HorselessContentService_Factory(t) {\n    return new (t || HorselessContentService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  HorselessContentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessContentService,\n    factory: HorselessContentService.ɵfac\n  });\n  return HorselessContentService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet HorselessSessionService = /*#__PURE__*/(() => {\n  class HorselessSessionService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'HorselessSession', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessSession');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    horselessSessionPrincipal(key) {\n      return this.entity(key).navigationProperty('HorselessSessionPrincipal');\n    }\n\n    fetchHorselessSessionPrincipal(key, options) {\n      return this.fetchNavigationProperty(this.horselessSessionPrincipal(key), 'entity', options);\n    }\n\n    setPrincipalAsHorselessSessionPrincipal(key, target, {\n      etag\n    } = {}) {\n      return this.horselessSessionPrincipal(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetPrincipalAsHorselessSessionPrincipal(key, {\n      target,\n      etag\n    } = {}) {\n      return this.horselessSessionPrincipal(key).reference().unset({\n        etag\n      });\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  HorselessSessionService.ɵfac = function HorselessSessionService_Factory(t) {\n    return new (t || HorselessSessionService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  HorselessSessionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessSessionService,\n    factory: HorselessSessionService.ɵfac\n  });\n  return HorselessSessionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet HorselessViewService = /*#__PURE__*/(() => {\n  class HorselessViewService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'HorselessView', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessView');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    contentCollections(key) {\n      return this.entity(key).navigationProperty('ContentCollections');\n    }\n\n    fetchContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.contentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  HorselessViewService.ɵfac = function HorselessViewService_Factory(t) {\n    return new (t || HorselessViewService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  HorselessViewService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessViewService,\n    factory: HorselessViewService.ɵfac\n  });\n  return HorselessViewService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet JSONAssetService = /*#__PURE__*/(() => {\n  class JSONAssetService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'JSONAsset', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.JSONAsset');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    horselessContents(key) {\n      return this.entity(key).navigationProperty('HorselessContents');\n    }\n\n    fetchHorselessContents(key, options) {\n      return this.fetchNavigationProperty(this.horselessContents(key), 'entities', options);\n    }\n\n    addHorselessContentToHorselessContents(key, target, {\n      etag\n    } = {}) {\n      return this.horselessContents(key).reference().add(target);\n    }\n\n    removeHorselessContentFromHorselessContents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.horselessContents(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  JSONAssetService.ɵfac = function JSONAssetService_Factory(t) {\n    return new (t || JSONAssetService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  JSONAssetService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: JSONAssetService,\n    factory: JSONAssetService.ɵfac\n  });\n  return JSONAssetService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet MeronymService = /*#__PURE__*/(() => {\n  class MeronymService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Meronym', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Meronym');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    holonyms(key) {\n      return this.entity(key).navigationProperty('Holonyms');\n    }\n\n    fetchHolonyms(key, options) {\n      return this.fetchNavigationProperty(this.holonyms(key), 'entities', options);\n    }\n\n    addHolonymToHolonyms(key, target, {\n      etag\n    } = {}) {\n      return this.holonyms(key).reference().add(target);\n    }\n\n    removeHolonymFromHolonyms(key, {\n      target,\n      etag\n    } = {}) {\n      return this.holonyms(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  MeronymService.ɵfac = function MeronymService_Factory(t) {\n    return new (t || MeronymService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  MeronymService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MeronymService,\n    factory: MeronymService.ɵfac\n  });\n  return MeronymService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet MIMETypeService = /*#__PURE__*/(() => {\n  class MIMETypeService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'MIMEType', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.MIMEType');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    horselessContents(key) {\n      return this.entity(key).navigationProperty('HorselessContents');\n    }\n\n    fetchHorselessContents(key, options) {\n      return this.fetchNavigationProperty(this.horselessContents(key), 'entities', options);\n    }\n\n    addHorselessContentToHorselessContents(key, target, {\n      etag\n    } = {}) {\n      return this.horselessContents(key).reference().add(target);\n    }\n\n    removeHorselessContentFromHorselessContents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.horselessContents(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  MIMETypeService.ɵfac = function MIMETypeService_Factory(t) {\n    return new (t || MIMETypeService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  MIMETypeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MIMETypeService,\n    factory: MIMETypeService.ɵfac\n  });\n  return MIMETypeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet NavigationMenuService = /*#__PURE__*/(() => {\n  class NavigationMenuService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'NavigationMenu', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenu');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    childNavigationMenuItems(key) {\n      return this.entity(key).navigationProperty('ChildNavigationMenuItems');\n    }\n\n    fetchChildNavigationMenuItems(key, options) {\n      return this.fetchNavigationProperty(this.childNavigationMenuItems(key), 'entities', options);\n    }\n\n    addNavigationMenuItemToChildNavigationMenuItems(key, target, {\n      etag\n    } = {}) {\n      return this.childNavigationMenuItems(key).reference().add(target);\n    }\n\n    removeNavigationMenuItemFromChildNavigationMenuItems(key, {\n      target,\n      etag\n    } = {}) {\n      return this.childNavigationMenuItems(key).reference().remove(target);\n    }\n\n    children(key) {\n      return this.entity(key).navigationProperty('Children');\n    }\n\n    fetchChildren(key, options) {\n      return this.fetchNavigationProperty(this.children(key), 'entities', options);\n    }\n\n    addNavigationMenuToChildren(key, target, {\n      etag\n    } = {}) {\n      return this.children(key).reference().add(target);\n    }\n\n    removeNavigationMenuFromChildren(key, {\n      target,\n      etag\n    } = {}) {\n      return this.children(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    parents(key) {\n      return this.entity(key).navigationProperty('Parents');\n    }\n\n    fetchParents(key, options) {\n      return this.fetchNavigationProperty(this.parents(key), 'entities', options);\n    }\n\n    addNavigationMenuToParents(key, target, {\n      etag\n    } = {}) {\n      return this.parents(key).reference().add(target);\n    }\n\n    removeNavigationMenuFromParents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.parents(key).reference().remove(target);\n    }\n\n  }\n\n  NavigationMenuService.ɵfac = function NavigationMenuService_Factory(t) {\n    return new (t || NavigationMenuService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  NavigationMenuService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NavigationMenuService,\n    factory: NavigationMenuService.ɵfac\n  });\n  return NavigationMenuService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet NavigationMenuItemService = /*#__PURE__*/(() => {\n  class NavigationMenuItemService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'NavigationMenuItem', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenuItem');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    childNavigationItems(key) {\n      return this.entity(key).navigationProperty('ChildNavigationItems');\n    }\n\n    fetchChildNavigationItems(key, options) {\n      return this.fetchNavigationProperty(this.childNavigationItems(key), 'entities', options);\n    }\n\n    addNavigationMenuItemToChildNavigationItems(key, target, {\n      etag\n    } = {}) {\n      return this.childNavigationItems(key).reference().add(target);\n    }\n\n    removeNavigationMenuItemFromChildNavigationItems(key, {\n      target,\n      etag\n    } = {}) {\n      return this.childNavigationItems(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    parentNavigationItems(key) {\n      return this.entity(key).navigationProperty('ParentNavigationItems');\n    }\n\n    fetchParentNavigationItems(key, options) {\n      return this.fetchNavigationProperty(this.parentNavigationItems(key), 'entities', options);\n    }\n\n    addNavigationMenuItemToParentNavigationItems(key, target, {\n      etag\n    } = {}) {\n      return this.parentNavigationItems(key).reference().add(target);\n    }\n\n    removeNavigationMenuItemFromParentNavigationItems(key, {\n      target,\n      etag\n    } = {}) {\n      return this.parentNavigationItems(key).reference().remove(target);\n    }\n\n    parentNavigationMenus(key) {\n      return this.entity(key).navigationProperty('ParentNavigationMenus');\n    }\n\n    fetchParentNavigationMenus(key, options) {\n      return this.fetchNavigationProperty(this.parentNavigationMenus(key), 'entities', options);\n    }\n\n    addNavigationMenuToParentNavigationMenus(key, target, {\n      etag\n    } = {}) {\n      return this.parentNavigationMenus(key).reference().add(target);\n    }\n\n    removeNavigationMenuFromParentNavigationMenus(key, {\n      target,\n      etag\n    } = {}) {\n      return this.parentNavigationMenus(key).reference().remove(target);\n    }\n\n  }\n\n  NavigationMenuItemService.ɵfac = function NavigationMenuItemService_Factory(t) {\n    return new (t || NavigationMenuItemService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  NavigationMenuItemService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NavigationMenuItemService,\n    factory: NavigationMenuItemService.ɵfac\n  });\n  return NavigationMenuItemService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet NugetPackageService = /*#__PURE__*/(() => {\n  class NugetPackageService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'NugetPackage', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NugetPackage');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  NugetPackageService.ɵfac = function NugetPackageService_Factory(t) {\n    return new (t || NugetPackageService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  NugetPackageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NugetPackageService,\n    factory: NugetPackageService.ɵfac\n  });\n  return NugetPackageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet PlaceholderService = /*#__PURE__*/(() => {\n  class PlaceholderService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Placeholder', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Placeholder');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  PlaceholderService.ɵfac = function PlaceholderService_Factory(t) {\n    return new (t || PlaceholderService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  PlaceholderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PlaceholderService,\n    factory: PlaceholderService.ɵfac\n  });\n  return PlaceholderService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet PrincipalService = /*#__PURE__*/(() => {\n  class PrincipalService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Principal', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    horselessSessions(key) {\n      return this.entity(key).navigationProperty('HorselessSessions');\n    }\n\n    fetchHorselessSessions(key, options) {\n      return this.fetchNavigationProperty(this.horselessSessions(key), 'entities', options);\n    }\n\n    addHorselessSessionToHorselessSessions(key, target, {\n      etag\n    } = {}) {\n      return this.horselessSessions(key).reference().add(target);\n    }\n\n    removeHorselessSessionFromHorselessSessions(key, {\n      target,\n      etag\n    } = {}) {\n      return this.horselessSessions(key).reference().remove(target);\n    }\n\n    ownedAccessControlEntries(key) {\n      return this.entity(key).navigationProperty('OwnedAccessControlEntries');\n    }\n\n    fetchOwnedAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.ownedAccessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToOwnedAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.ownedAccessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromOwnedAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedAccessControlEntries(key).reference().remove(target);\n    }\n\n    ownedHorselessSessions(key) {\n      return this.entity(key).navigationProperty('OwnedHorselessSessions');\n    }\n\n    fetchOwnedHorselessSessions(key, options) {\n      return this.fetchNavigationProperty(this.ownedHorselessSessions(key), 'entities', options);\n    }\n\n    addHorselessSessionToOwnedHorselessSessions(key, target, {\n      etag\n    } = {}) {\n      return this.ownedHorselessSessions(key).reference().add(target);\n    }\n\n    removeHorselessSessionFromOwnedHorselessSessions(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedHorselessSessions(key).reference().remove(target);\n    }\n\n    ownedPrincipals(key) {\n      return this.entity(key).navigationProperty('OwnedPrincipals');\n    }\n\n    fetchOwnedPrincipals(key, options) {\n      return this.fetchNavigationProperty(this.ownedPrincipals(key), 'entities', options);\n    }\n\n    addPrincipalToOwnedPrincipals(key, target, {\n      etag\n    } = {}) {\n      return this.ownedPrincipals(key).reference().add(target);\n    }\n\n    removePrincipalFromOwnedPrincipals(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedPrincipals(key).reference().remove(target);\n    }\n\n    ownedTenants(key) {\n      return this.entity(key).navigationProperty('OwnedTenants');\n    }\n\n    fetchOwnedTenants(key, options) {\n      return this.fetchNavigationProperty(this.ownedTenants(key), 'entities', options);\n    }\n\n    addTenantToOwnedTenants(key, target, {\n      etag\n    } = {}) {\n      return this.ownedTenants(key).reference().add(target);\n    }\n\n    removeTenantFromOwnedTenants(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedTenants(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    principalClaimContainer(key) {\n      return this.entity(key).navigationProperty('PrincipalClaimContainer');\n    }\n\n    fetchPrincipalClaimContainer(key, options) {\n      return this.fetchNavigationProperty(this.principalClaimContainer(key), 'entity', options);\n    }\n\n    setPrincipalClaimContainerAsPrincipalClaimContainer(key, target, {\n      etag\n    } = {}) {\n      return this.principalClaimContainer(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetPrincipalClaimContainerAsPrincipalClaimContainer(key, {\n      target,\n      etag\n    } = {}) {\n      return this.principalClaimContainer(key).reference().unset({\n        etag\n      });\n    }\n\n    tenantAccounts(key) {\n      return this.entity(key).navigationProperty('TenantAccounts');\n    }\n\n    fetchTenantAccounts(key, options) {\n      return this.fetchNavigationProperty(this.tenantAccounts(key), 'entities', options);\n    }\n\n    addTenantToTenantAccounts(key, target, {\n      etag\n    } = {}) {\n      return this.tenantAccounts(key).reference().add(target);\n    }\n\n    removeTenantFromTenantAccounts(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantAccounts(key).reference().remove(target);\n    }\n\n  }\n\n  PrincipalService.ɵfac = function PrincipalService_Factory(t) {\n    return new (t || PrincipalService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  PrincipalService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PrincipalService,\n    factory: PrincipalService.ɵfac\n  });\n  return PrincipalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet PublicationService = /*#__PURE__*/(() => {\n  class PublicationService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Publication', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Publication');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    contentCollections(key) {\n      return this.entity(key).navigationProperty('ContentCollections');\n    }\n\n    fetchContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.contentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    publicationChildrens(key) {\n      return this.entity(key).navigationProperty('PublicationChildrens');\n    }\n\n    fetchPublicationChildrens(key, options) {\n      return this.fetchNavigationProperty(this.publicationChildrens(key), 'entities', options);\n    }\n\n    addPublicationToPublicationChildrens(key, target, {\n      etag\n    } = {}) {\n      return this.publicationChildrens(key).reference().add(target);\n    }\n\n    removePublicationFromPublicationChildrens(key, {\n      target,\n      etag\n    } = {}) {\n      return this.publicationChildrens(key).reference().remove(target);\n    }\n\n    publicationParents(key) {\n      return this.entity(key).navigationProperty('PublicationParents');\n    }\n\n    fetchPublicationParents(key, options) {\n      return this.fetchNavigationProperty(this.publicationParents(key), 'entities', options);\n    }\n\n    addPublicationToPublicationParents(key, target, {\n      etag\n    } = {}) {\n      return this.publicationParents(key).reference().add(target);\n    }\n\n    removePublicationFromPublicationParents(key, {\n      target,\n      etag\n    } = {}) {\n      return this.publicationParents(key).reference().remove(target);\n    }\n\n  }\n\n  PublicationService.ɵfac = function PublicationService_Factory(t) {\n    return new (t || PublicationService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  PublicationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PublicationService,\n    factory: PublicationService.ɵfac\n  });\n  return PublicationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TaxonService = /*#__PURE__*/(() => {\n  class TaxonService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Taxon', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxon');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    antecedentTaxons(key) {\n      return this.entity(key).navigationProperty('AntecedentTaxons');\n    }\n\n    fetchAntecedentTaxons(key, options) {\n      return this.fetchNavigationProperty(this.antecedentTaxons(key), 'entities', options);\n    }\n\n    addTaxonToAntecedentTaxons(key, target, {\n      etag\n    } = {}) {\n      return this.antecedentTaxons(key).reference().add(target);\n    }\n\n    removeTaxonFromAntecedentTaxons(key, {\n      target,\n      etag\n    } = {}) {\n      return this.antecedentTaxons(key).reference().remove(target);\n    }\n\n    derivativeTaxons(key) {\n      return this.entity(key).navigationProperty('DerivativeTaxons');\n    }\n\n    fetchDerivativeTaxons(key, options) {\n      return this.fetchNavigationProperty(this.derivativeTaxons(key), 'entities', options);\n    }\n\n    addTaxonToDerivativeTaxons(key, target, {\n      etag\n    } = {}) {\n      return this.derivativeTaxons(key).reference().add(target);\n    }\n\n    removeTaxonFromDerivativeTaxons(key, {\n      target,\n      etag\n    } = {}) {\n      return this.derivativeTaxons(key).reference().remove(target);\n    }\n\n    holonyms(key) {\n      return this.entity(key).navigationProperty('Holonyms');\n    }\n\n    fetchHolonyms(key, options) {\n      return this.fetchNavigationProperty(this.holonyms(key), 'entities', options);\n    }\n\n    addHolonymToHolonyms(key, target, {\n      etag\n    } = {}) {\n      return this.holonyms(key).reference().add(target);\n    }\n\n    removeHolonymFromHolonyms(key, {\n      target,\n      etag\n    } = {}) {\n      return this.holonyms(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    taxonomies(key) {\n      return this.entity(key).navigationProperty('Taxonomies');\n    }\n\n    fetchTaxonomies(key, options) {\n      return this.fetchNavigationProperty(this.taxonomies(key), 'entities', options);\n    }\n\n    addTaxonomyToTaxonomies(key, target, {\n      etag\n    } = {}) {\n      return this.taxonomies(key).reference().add(target);\n    }\n\n    removeTaxonomyFromTaxonomies(key, {\n      target,\n      etag\n    } = {}) {\n      return this.taxonomies(key).reference().remove(target);\n    }\n\n  }\n\n  TaxonService.ɵfac = function TaxonService_Factory(t) {\n    return new (t || TaxonService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TaxonService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TaxonService,\n    factory: TaxonService.ɵfac\n  });\n  return TaxonService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TaxonomyService = /*#__PURE__*/(() => {\n  class TaxonomyService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Taxonomy', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxonomy');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    contentCollections(key) {\n      return this.entity(key).navigationProperty('ContentCollections');\n    }\n\n    fetchContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.contentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    taxons(key) {\n      return this.entity(key).navigationProperty('Taxons');\n    }\n\n    fetchTaxons(key, options) {\n      return this.fetchNavigationProperty(this.taxons(key), 'entities', options);\n    }\n\n    addTaxonToTaxons(key, target, {\n      etag\n    } = {}) {\n      return this.taxons(key).reference().add(target);\n    }\n\n    removeTaxonFromTaxons(key, {\n      target,\n      etag\n    } = {}) {\n      return this.taxons(key).reference().remove(target);\n    }\n\n  }\n\n  TaxonomyService.ɵfac = function TaxonomyService_Factory(t) {\n    return new (t || TaxonomyService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TaxonomyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TaxonomyService,\n    factory: TaxonomyService.ɵfac\n  });\n  return TaxonomyService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantService = /*#__PURE__*/(() => {\n  class TenantService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Tenant', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    accounts(key) {\n      return this.entity(key).navigationProperty('Accounts');\n    }\n\n    fetchAccounts(key, options) {\n      return this.fetchNavigationProperty(this.accounts(key), 'entities', options);\n    }\n\n    addPrincipalToAccounts(key, target, {\n      etag\n    } = {}) {\n      return this.accounts(key).reference().add(target);\n    }\n\n    removePrincipalFromAccounts(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accounts(key).reference().remove(target);\n    }\n\n    contentCollections(key) {\n      return this.entity(key).navigationProperty('ContentCollections');\n    }\n\n    fetchContentCollections(key, options) {\n      return this.fetchNavigationProperty(this.contentCollections(key), 'entities', options);\n    }\n\n    addContentCollectionToContentCollections(key, target, {\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().add(target);\n    }\n\n    removeContentCollectionFromContentCollections(key, {\n      target,\n      etag\n    } = {}) {\n      return this.contentCollections(key).reference().remove(target);\n    }\n\n    metaData(key) {\n      return this.entity(key).navigationProperty('MetaData');\n    }\n\n    fetchMetaData(key, options) {\n      return this.fetchNavigationProperty(this.metaData(key), 'entities', options);\n    }\n\n    addJSONAssetToMetaData(key, target, {\n      etag\n    } = {}) {\n      return this.metaData(key).reference().add(target);\n    }\n\n    removeJSONAssetFromMetaData(key, {\n      target,\n      etag\n    } = {}) {\n      return this.metaData(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    tenantIdentifierStrategy(key) {\n      return this.entity(key).navigationProperty('TenantIdentifierStrategy');\n    }\n\n    fetchTenantIdentifierStrategy(key, options) {\n      return this.fetchNavigationProperty(this.tenantIdentifierStrategy(key), 'entity', options);\n    }\n\n    setTenantIdentifierStrategyAsTenantIdentifierStrategy(key, target, {\n      etag\n    } = {}) {\n      return this.tenantIdentifierStrategy(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantIdentifierStrategyAsTenantIdentifierStrategy(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantIdentifierStrategy(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  TenantService.ɵfac = function TenantService_Factory(t) {\n    return new (t || TenantService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantService,\n    factory: TenantService.ɵfac\n  });\n  return TenantService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet PrincipalClaimService = /*#__PURE__*/(() => {\n  class PrincipalClaimService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'PrincipalClaim', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaim');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    principalClaimContainer(key) {\n      return this.entity(key).navigationProperty('PrincipalClaimContainer');\n    }\n\n    fetchPrincipalClaimContainer(key, options) {\n      return this.fetchNavigationProperty(this.principalClaimContainer(key), 'entity', options);\n    }\n\n    setPrincipalClaimContainerAsPrincipalClaimContainer(key, target, {\n      etag\n    } = {}) {\n      return this.principalClaimContainer(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetPrincipalClaimContainerAsPrincipalClaimContainer(key, {\n      target,\n      etag\n    } = {}) {\n      return this.principalClaimContainer(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  PrincipalClaimService.ɵfac = function PrincipalClaimService_Factory(t) {\n    return new (t || PrincipalClaimService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  PrincipalClaimService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PrincipalClaimService,\n    factory: PrincipalClaimService.ɵfac\n  });\n  return PrincipalClaimService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet PrincipalClaimContainerService = /*#__PURE__*/(() => {\n  class PrincipalClaimContainerService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'PrincipalClaimContainer', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaimContainer');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    principal(key) {\n      return this.entity(key).navigationProperty('Principal');\n    }\n\n    fetchPrincipal(key, options) {\n      return this.fetchNavigationProperty(this.principal(key), 'entity', options);\n    }\n\n    setPrincipalAsPrincipal(key, target, {\n      etag\n    } = {}) {\n      return this.principal(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetPrincipalAsPrincipal(key, {\n      target,\n      etag\n    } = {}) {\n      return this.principal(key).reference().unset({\n        etag\n      });\n    }\n\n    principalClaim(key) {\n      return this.entity(key).navigationProperty('PrincipalClaim');\n    }\n\n    fetchPrincipalClaim(key, options) {\n      return this.fetchNavigationProperty(this.principalClaim(key), 'entities', options);\n    }\n\n    addPrincipalClaimToPrincipalClaim(key, target, {\n      etag\n    } = {}) {\n      return this.principalClaim(key).reference().add(target);\n    }\n\n    removePrincipalClaimFromPrincipalClaim(key, {\n      target,\n      etag\n    } = {}) {\n      return this.principalClaim(key).reference().remove(target);\n    }\n\n  }\n\n  PrincipalClaimContainerService.ɵfac = function PrincipalClaimContainerService_Factory(t) {\n    return new (t || PrincipalClaimContainerService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  PrincipalClaimContainerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PrincipalClaimContainerService,\n    factory: PrincipalClaimContainerService.ɵfac\n  });\n  return PrincipalClaimContainerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantIdentifierStrategyContainerService = /*#__PURE__*/(() => {\n  class TenantIdentifierStrategyContainerService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'TenantIdentifierStrategyContainer', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategyContainer');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    strategy(key) {\n      return this.entity(key).navigationProperty('Strategy');\n    }\n\n    fetchStrategy(key, options) {\n      return this.fetchNavigationProperty(this.strategy(key), 'entity', options);\n    }\n\n    setTenantIdentifierStrategyAsStrategy(key, target, {\n      etag\n    } = {}) {\n      return this.strategy(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantIdentifierStrategyAsStrategy(key, {\n      target,\n      etag\n    } = {}) {\n      return this.strategy(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  TenantIdentifierStrategyContainerService.ɵfac = function TenantIdentifierStrategyContainerService_Factory(t) {\n    return new (t || TenantIdentifierStrategyContainerService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantIdentifierStrategyContainerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantIdentifierStrategyContainerService,\n    factory: TenantIdentifierStrategyContainerService.ɵfac\n  });\n  return TenantIdentifierStrategyContainerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantIdentifierStrategyService = /*#__PURE__*/(() => {\n  class TenantIdentifierStrategyService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'TenantIdentifierStrategy', 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategy');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    strategyContainers(key) {\n      return this.entity(key).navigationProperty('StrategyContainers');\n    }\n\n    fetchStrategyContainers(key, options) {\n      return this.fetchNavigationProperty(this.strategyContainers(key), 'entities', options);\n    }\n\n    addTenantIdentifierStrategyContainerToStrategyContainers(key, target, {\n      etag\n    } = {}) {\n      return this.strategyContainers(key).reference().add(target);\n    }\n\n    removeTenantIdentifierStrategyContainerFromStrategyContainers(key, {\n      target,\n      etag\n    } = {}) {\n      return this.strategyContainers(key).reference().remove(target);\n    }\n\n    targetTenant(key) {\n      return this.entity(key).navigationProperty('TargetTenant');\n    }\n\n    fetchTargetTenant(key, options) {\n      return this.fetchNavigationProperty(this.targetTenant(key), 'entity', options);\n    }\n\n    setTenantAsTargetTenant(key, target, {\n      etag\n    } = {}) {\n      return this.targetTenant(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantAsTargetTenant(key, {\n      target,\n      etag\n    } = {}) {\n      return this.targetTenant(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  TenantIdentifierStrategyService.ɵfac = function TenantIdentifierStrategyService_Factory(t) {\n    return new (t || TenantIdentifierStrategyService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantIdentifierStrategyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantIdentifierStrategyService,\n    factory: TenantIdentifierStrategyService.ɵfac\n  });\n  return TenantIdentifierStrategyService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\n\nconst AccessControlEntryServiceEntitySetConfig = {\n  name: 'AccessControlEntry',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.AccessControlEntry',\n  service: AccessControlEntryService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst ContentCollectionServiceEntitySetConfig = {\n  name: 'ContentCollection',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.ContentCollection',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: ContentCollectionService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst FilesystemAssetServiceEntitySetConfig = {\n  name: 'FilesystemAsset',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.FilesystemAsset',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: FilesystemAssetService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst HolonymServiceEntitySetConfig = {\n  name: 'Holonym',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Holonym',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: HolonymService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst HorselessContentServiceEntitySetConfig = {\n  name: 'HorselessContent',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessContent',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: HorselessContentService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst HorselessSessionServiceEntitySetConfig = {\n  name: 'HorselessSession',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessSession',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: HorselessSessionService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst HorselessViewServiceEntitySetConfig = {\n  name: 'HorselessView',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.HorselessView',\n  service: HorselessViewService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst JSONAssetServiceEntitySetConfig = {\n  name: 'JSONAsset',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.JSONAsset',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: JSONAssetService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst MeronymServiceEntitySetConfig = {\n  name: 'Meronym',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Meronym',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: MeronymService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst MIMETypeServiceEntitySetConfig = {\n  name: 'MIMEType',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.MIMEType',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: MIMETypeService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst NavigationMenuServiceEntitySetConfig = {\n  name: 'NavigationMenu',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenu',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: NavigationMenuService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst NavigationMenuItemServiceEntitySetConfig = {\n  name: 'NavigationMenuItem',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NavigationMenuItem',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: NavigationMenuItemService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst NugetPackageServiceEntitySetConfig = {\n  name: 'NugetPackage',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.NugetPackage',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: NugetPackageService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst PlaceholderServiceEntitySetConfig = {\n  name: 'Placeholder',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Placeholder',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: PlaceholderService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst PrincipalServiceEntitySetConfig = {\n  name: 'Principal',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Principal',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: PrincipalService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst PublicationServiceEntitySetConfig = {\n  name: 'Publication',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Publication',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: PublicationService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TaxonServiceEntitySetConfig = {\n  name: 'Taxon',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxon',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TaxonService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TaxonomyServiceEntitySetConfig = {\n  name: 'Taxonomy',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Taxonomy',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TaxonomyService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantServiceEntitySetConfig = {\n  name: 'Tenant',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.Tenant',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TenantService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst PrincipalClaimServiceEntitySetConfig = {\n  name: 'PrincipalClaim',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaim',\n  service: PrincipalClaimService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst PrincipalClaimContainerServiceEntitySetConfig = {\n  name: 'PrincipalClaimContainer',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.PrincipalClaimContainer',\n  service: PrincipalClaimContainerService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantIdentifierStrategyContainerServiceEntitySetConfig = {\n  name: 'TenantIdentifierStrategyContainer',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategyContainer',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TenantIdentifierStrategyContainerService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantIdentifierStrategyServiceEntitySetConfig = {\n  name: 'TenantIdentifierStrategy',\n  entityType: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities.TenantIdentifierStrategy',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TenantIdentifierStrategyService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntityContainerConfig\n\nconst ContentEntitiesContainer = {\n  name: 'ContentEntities',\n  entitySets: [AccessControlEntryServiceEntitySetConfig, ContentCollectionServiceEntitySetConfig, FilesystemAssetServiceEntitySetConfig, HolonymServiceEntitySetConfig, HorselessContentServiceEntitySetConfig, HorselessSessionServiceEntitySetConfig, HorselessViewServiceEntitySetConfig, JSONAssetServiceEntitySetConfig, MeronymServiceEntitySetConfig, MIMETypeServiceEntitySetConfig, NavigationMenuServiceEntitySetConfig, NavigationMenuItemServiceEntitySetConfig, NugetPackageServiceEntitySetConfig, PlaceholderServiceEntitySetConfig, PrincipalServiceEntitySetConfig, PublicationServiceEntitySetConfig, TaxonServiceEntitySetConfig, TaxonomyServiceEntitySetConfig, TenantServiceEntitySetConfig, PrincipalClaimServiceEntitySetConfig, PrincipalClaimContainerServiceEntitySetConfig, TenantIdentifierStrategyContainerServiceEntitySetConfig, TenantIdentifierStrategyServiceEntitySetConfig]\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen SchemaConfig\n\nconst ContentEntitiesSchema = {\n  namespace: 'TheHorselessNewspaper.Schemas.ContentModel.ContentEntities',\n  enums: [TenantIdentifierStrategyNameConfig, ACEPermissionScopeConfig, ACEPermissionConfig, ACEPermissionTypeConfig],\n  entities: [AccessControlEntryEntityConfig, ContentCollectionEntityConfig, FilesystemAssetEntityConfig, HolonymEntityConfig, HorselessContentEntityConfig, HorselessSessionEntityConfig, HorselessViewEntityConfig, JSONAssetEntityConfig, MeronymEntityConfig, MIMETypeEntityConfig, NavigationMenuEntityConfig, NavigationMenuItemEntityConfig, NugetPackageEntityConfig, PlaceholderEntityConfig, PrincipalEntityConfig, PublicationEntityConfig, TaxonEntityConfig, TaxonomyEntityConfig, TenantEntityConfig, PrincipalClaimEntityConfig, PrincipalClaimContainerEntityConfig, TenantIdentifierStrategyContainerEntityConfig, TenantIdentifierStrategyEntityConfig],\n  callables: [],\n  containers: [ContentEntitiesContainer]\n}; //#endregion\n//#region ODataApiGen ODataImports\n//#endregion\n//#region ODataApiGen ApiConfig\n\nconst HorselessContentConfig = {\n  serviceRootUrl: '',\n  name: 'HorselessContent',\n  version: '4.0',\n  creation: new Date('2022-06-27T15:03:21.9241087+00:00'),\n  schemas: [ContentEntitiesSchema],\n  parsers: EDM_PARSERS\n}; //#endregion\n//#region ODataApiGen ODataImports\n//#endregion\n\nlet HorselessContentModule = /*#__PURE__*/(() => {\n  class HorselessContentModule {}\n\n  HorselessContentModule.ɵfac = function HorselessContentModule_Factory(t) {\n    return new (t || HorselessContentModule)();\n  };\n\n  HorselessContentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HorselessContentModule\n  });\n  HorselessContentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [//#region ODataApiGen Providers\n    ContentEntitiesService, AccessControlEntryService, ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, HorselessViewService, JSONAssetService, MeronymService, MIMETypeService, NavigationMenuService, NavigationMenuItemService, NugetPackageService, PlaceholderService, PrincipalService, PublicationService, TaxonService, TaxonomyService, TenantService, PrincipalClaimService, PrincipalClaimContainerService, TenantIdentifierStrategyContainerService, TenantIdentifierStrategyService //#endregion\n    ]\n  });\n  return HorselessContentModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#region ODataApiGen Imports\n//#endregion\n\n/*\n * Public API Surface of horseless-content-odataapi\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ACEPermission, ACEPermissionConfig, ACEPermissionScope, ACEPermissionScopeConfig, ACEPermissionType, ACEPermissionTypeConfig, AccessControlEntryEntityConfig, AccessControlEntryService, AccessControlEntryServiceEntitySetConfig, ContentCollectionEntityConfig, ContentCollectionService, ContentCollectionServiceEntitySetConfig, ContentEntitiesService, FilesystemAssetEntityConfig, FilesystemAssetService, FilesystemAssetServiceEntitySetConfig, HolonymEntityConfig, HolonymService, HolonymServiceEntitySetConfig, HorselessContentConfig, HorselessContentEntityConfig, HorselessContentModule, HorselessContentOdataapiComponent, HorselessContentOdataapiModule, HorselessContentOdataapiService, HorselessContentService, HorselessContentServiceEntitySetConfig, HorselessSessionEntityConfig, HorselessSessionService, HorselessSessionServiceEntitySetConfig, HorselessViewEntityConfig, HorselessViewService, HorselessViewServiceEntitySetConfig, JSONAssetEntityConfig, JSONAssetService, JSONAssetServiceEntitySetConfig, MIMETypeEntityConfig, MIMETypeService, MIMETypeServiceEntitySetConfig, MeronymEntityConfig, MeronymService, MeronymServiceEntitySetConfig, NavigationMenuEntityConfig, NavigationMenuItemEntityConfig, NavigationMenuItemService, NavigationMenuItemServiceEntitySetConfig, NavigationMenuService, NavigationMenuServiceEntitySetConfig, NugetPackageEntityConfig, NugetPackageService, NugetPackageServiceEntitySetConfig, PlaceholderEntityConfig, PlaceholderService, PlaceholderServiceEntitySetConfig, PrincipalClaimContainerEntityConfig, PrincipalClaimContainerService, PrincipalClaimContainerServiceEntitySetConfig, PrincipalClaimEntityConfig, PrincipalClaimService, PrincipalClaimServiceEntitySetConfig, PrincipalEntityConfig, PrincipalService, PrincipalServiceEntitySetConfig, PublicationEntityConfig, PublicationService, PublicationServiceEntitySetConfig, TaxonEntityConfig, TaxonService, TaxonServiceEntitySetConfig, TaxonomyEntityConfig, TaxonomyService, TaxonomyServiceEntitySetConfig, TenantEntityConfig, TenantIdentifierStrategyContainerEntityConfig, TenantIdentifierStrategyContainerService, TenantIdentifierStrategyContainerServiceEntitySetConfig, TenantIdentifierStrategyEntityConfig, TenantIdentifierStrategyName, TenantIdentifierStrategyNameConfig, TenantIdentifierStrategyService, TenantIdentifierStrategyServiceEntitySetConfig, TenantService, TenantServiceEntitySetConfig }; //# sourceMappingURL=horselessnewspaper-horseless-content-odataapi.mjs.map","map":null,"metadata":{},"sourceType":"module"}