{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport * as i1 from '@vigouredelaruse/angular-odata';\nimport { ODataBaseService, ODataEntitySetService, EDM_PARSERS } from '@vigouredelaruse/angular-odata';\nlet HorselessHostingOdataapiService = /*#__PURE__*/(() => {\n  class HorselessHostingOdataapiService {\n    constructor() {}\n\n  }\n\n  HorselessHostingOdataapiService.ɵfac = function HorselessHostingOdataapiService_Factory(t) {\n    return new (t || HorselessHostingOdataapiService)();\n  };\n\n  HorselessHostingOdataapiService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HorselessHostingOdataapiService,\n    factory: HorselessHostingOdataapiService.ɵfac,\n    providedIn: 'root'\n  });\n  return HorselessHostingOdataapiService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HorselessHostingOdataapiComponent = /*#__PURE__*/(() => {\n  class HorselessHostingOdataapiComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  HorselessHostingOdataapiComponent.ɵfac = function HorselessHostingOdataapiComponent_Factory(t) {\n    return new (t || HorselessHostingOdataapiComponent)();\n  };\n\n  HorselessHostingOdataapiComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HorselessHostingOdataapiComponent,\n    selectors: [[\"lib-horseless-hosting-odataapi\"]],\n    decls: 2,\n    vars: 0,\n    template: function HorselessHostingOdataapiComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" horseless-hosting-odataapi works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return HorselessHostingOdataapiComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HorselessHostingOdataapiModule = /*#__PURE__*/(() => {\n  class HorselessHostingOdataapiModule {}\n\n  HorselessHostingOdataapiModule.ɵfac = function HorselessHostingOdataapiModule_Factory(t) {\n    return new (t || HorselessHostingOdataapiModule)();\n  };\n\n  HorselessHostingOdataapiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HorselessHostingOdataapiModule\n  });\n  HorselessHostingOdataapiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return HorselessHostingOdataapiModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#region ODataApiGen Imports\n//#endregion\n\n\nvar ACEPermissionScope = /*#__PURE__*/(() => {\n  (function (ACEPermissionScope) {\n    //#region ODataApiGen Members\n    ACEPermissionScope[ACEPermissionScope[\"SITE\"] = 0] = \"SITE\";\n    ACEPermissionScope[ACEPermissionScope[\"TENANT\"] = 1] = \"TENANT\";\n    ACEPermissionScope[ACEPermissionScope[\"OWNER\"] = 2] = \"OWNER\";\n    ACEPermissionScope[ACEPermissionScope[\"ROLE\"] = 3] = \"ROLE\";\n    ACEPermissionScope[ACEPermissionScope[\"GROUP\"] = 4] = \"GROUP\";\n    ACEPermissionScope[ACEPermissionScope[\"WORKFLOW\"] = 5] = \"WORKFLOW\";\n    ACEPermissionScope[ACEPermissionScope[\"ANONYMOUS\"] = 6] = \"ANONYMOUS\";\n    ACEPermissionScope[ACEPermissionScope[\"EVERYONE\"] = 7] = \"EVERYONE\"; //#endregion\n  })(ACEPermissionScope || (ACEPermissionScope = {}));\n\n  return ACEPermissionScope;\n})();\n//#region ODataApiGen Imports\n//#endregion\nvar ACEPermission = /*#__PURE__*/(() => {\n  (function (ACEPermission) {\n    //#region ODataApiGen Members\n    ACEPermission[ACEPermission[\"READ\"] = 0] = \"READ\";\n    ACEPermission[ACEPermission[\"CREATE\"] = 1] = \"CREATE\";\n    ACEPermission[ACEPermission[\"UPDATE\"] = 2] = \"UPDATE\";\n    ACEPermission[ACEPermission[\"DELETE\"] = 3] = \"DELETE\";\n    ACEPermission[ACEPermission[\"SHARE\"] = 4] = \"SHARE\";\n    ACEPermission[ACEPermission[\"EXECUTE\"] = 5] = \"EXECUTE\";\n    ACEPermission[ACEPermission[\"SEARCH\"] = 6] = \"SEARCH\";\n    ACEPermission[ACEPermission[\"PUBLISH\"] = 7] = \"PUBLISH\";\n    ACEPermission[ACEPermission[\"UNPUBLISH\"] = 8] = \"UNPUBLISH\";\n    ACEPermission[ACEPermission[\"APPROVE\"] = 9] = \"APPROVE\"; //#endregion\n  })(ACEPermission || (ACEPermission = {}));\n\n  return ACEPermission;\n})();\n//#region ODataApiGen Imports\n//#endregion\nvar ACEPermissionType = /*#__PURE__*/(() => {\n  (function (ACEPermissionType) {\n    //#region ODataApiGen Members\n    ACEPermissionType[ACEPermissionType[\"PERMIT\"] = 0] = \"PERMIT\";\n    ACEPermissionType[ACEPermissionType[\"DENY\"] = 1] = \"DENY\"; //#endregion\n  })(ACEPermissionType || (ACEPermissionType = {}));\n\n  return ACEPermissionType;\n})();\n//#region ODataApiGen Imports\n//#endregion\nvar TenantIdentifierStrategyName = /*#__PURE__*/(() => {\n  (function (TenantIdentifierStrategyName) {\n    //#region ODataApiGen Members\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"STATIC\"] = 0] = \"STATIC\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"BASE_PATH\"] = 1] = \"BASE_PATH\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"ASPNETCORE_ROUTE\"] = 2] = \"ASPNETCORE_ROUTE\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"DNS_HOSTNAME\"] = 3] = \"DNS_HOSTNAME\";\n    TenantIdentifierStrategyName[TenantIdentifierStrategyName[\"DNS_FQDN\"] = 4] = \"DNS_FQDN\"; //#endregion\n  })(TenantIdentifierStrategyName || (TenantIdentifierStrategyName = {}));\n\n  return TenantIdentifierStrategyName;\n})();\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\nconst ACEPermissionScopeConfig = {\n  name: 'ACEPermissionScope',\n  members: ACEPermissionScope,\n  fields: {\n    SITE: {\n      value: 0\n    },\n    TENANT: {\n      value: 1\n    },\n    OWNER: {\n      value: 2\n    },\n    ROLE: {\n      value: 3\n    },\n    GROUP: {\n      value: 4\n    },\n    WORKFLOW: {\n      value: 5\n    },\n    ANONYMOUS: {\n      value: 6\n    },\n    EVERYONE: {\n      value: 7\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\n\nconst ACEPermissionConfig = {\n  name: 'ACEPermission',\n  flags: true,\n  members: ACEPermission,\n  fields: {\n    READ: {\n      value: 0\n    },\n    CREATE: {\n      value: 1\n    },\n    UPDATE: {\n      value: 2\n    },\n    DELETE: {\n      value: 3\n    },\n    SHARE: {\n      value: 4\n    },\n    EXECUTE: {\n      value: 5\n    },\n    SEARCH: {\n      value: 6\n    },\n    PUBLISH: {\n      value: 7\n    },\n    UNPUBLISH: {\n      value: 8\n    },\n    APPROVE: {\n      value: 9\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\n\nconst ACEPermissionTypeConfig = {\n  name: 'ACEPermissionType',\n  members: ACEPermissionType,\n  fields: {\n    PERMIT: {\n      value: 0\n    },\n    DENY: {\n      value: 1\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EnumTypeConfig\n\nconst TenantIdentifierStrategyNameConfig = {\n  name: 'TenantIdentifierStrategyName',\n  members: TenantIdentifierStrategyName,\n  fields: {\n    STATIC: {\n      value: 0\n    },\n    BASE_PATH: {\n      value: 1\n    },\n    ASPNETCORE_ROUTE: {\n      value: 2\n    },\n    DNS_HOSTNAME: {\n      value: 3\n    },\n    DNS_FQDN: {\n      value: 4\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst AccessControlEntryEntityConfig = {\n  name: 'AccessControlEntry',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    Scope: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.ACEPermissionScope',\n      nullable: false\n    },\n    Permission: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.ACEPermission',\n      nullable: false\n    },\n    PermissionType: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.ACEPermissionType',\n      nullable: false\n    },\n    Timestamp: {\n      type: 'Edm.Binary',\n      nullable: false\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    IsActive: {\n      type: 'Edm.Boolean'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    SubjectAccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    SubjectPrincipals: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    SubjectTenants: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst KeyCloakConfigurationEntityConfig = {\n  name: 'KeyCloakConfiguration',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    Authority: {\n      type: 'Edm.String'\n    },\n    Realm: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Iss: {\n      type: 'Edm.String'\n    },\n    Aud: {\n      type: 'Edm.String'\n    },\n    TenantInfoId: {\n      type: 'Edm.Guid'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    TenantInfo: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantInfo',\n      navigation: true,\n      referentials: [{\n        property: 'TenantInfoId',\n        referencedProperty: 'Id'\n      }]\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst NugetPackageEntityConfig = {\n  name: 'NugetPackage',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    PackageName: {\n      type: 'Edm.String'\n    },\n    PackageId: {\n      type: 'Edm.String'\n    },\n    Publisher: {\n      type: 'Edm.String'\n    },\n    Version: {\n      type: 'Edm.String'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst PrincipalEntityConfig = {\n  name: 'Principal',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    UPN: {\n      type: 'Edm.String'\n    },\n    Email: {\n      type: 'Edm.String'\n    },\n    PreferredUserName: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Iss: {\n      type: 'Edm.String'\n    },\n    Aud: {\n      type: 'Edm.String'\n    },\n    Sub: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    OwnedAccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    OwnedPrincipals: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    OwnedTenants: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    TenantAccounts: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantIdentifierStrategyContainerEntityConfig = {\n  name: 'TenantIdentifierStrategyContainer',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    TenantIdentifierStrategyName: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategyName',\n      nullable: false\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    StrategyId: {\n      type: 'Edm.Guid'\n    },\n    Strategy: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategy',\n      navigation: true,\n      referentials: [{\n        property: 'StrategyId',\n        referencedProperty: 'Id'\n      }]\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantIdentifierStrategyEntityConfig = {\n  name: 'TenantIdentifierStrategy',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    TargetTenantId: {\n      type: 'Edm.Guid'\n    },\n    TargetTenant: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant',\n      navigation: true,\n      referentials: [{\n        property: 'TargetTenantId',\n        referencedProperty: 'Id'\n      }]\n    },\n    StrategyContainers: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategyContainer',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantEntityConfig = {\n  name: 'Tenant',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    IsPublished: {\n      type: 'Edm.Boolean',\n      nullable: false\n    },\n    BaseUrl: {\n      type: 'Edm.String'\n    },\n    TenantIdentifier: {\n      type: 'Edm.String'\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    TenantIdentifierStrategy: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategy',\n      navigation: true\n    },\n    TenantInfos: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantInfo',\n      collection: true,\n      navigation: true\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Accounts: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst TenantInfoEntityConfig = {\n  name: 'TenantInfo',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    ParentTenantId: {\n      type: 'Edm.Guid'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Identifier: {\n      type: 'Edm.String'\n    },\n    Name: {\n      type: 'Edm.String'\n    },\n    ConnectionString: {\n      type: 'Edm.String'\n    },\n    TenantBaseUrl: {\n      type: 'Edm.String'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    ParentTenant: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant',\n      navigation: true\n    },\n    KeyCloakConfigurations: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.KeyCloakConfiguration',\n      collection: true,\n      navigation: true\n    },\n    WebAPITenantInfos: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.WebAPITenantInfo',\n      collection: true,\n      navigation: true\n    }\n  }\n}; //#endregion\n//#endregion\n//#region ODataApiGen StrucutredTypeConfig\n\nconst WebAPITenantInfoEntityConfig = {\n  name: 'WebAPITenantInfo',\n  keys: [{\n    name: 'Id'\n  }],\n  fields: {\n    Id: {\n      type: 'Edm.Guid',\n      nullable: false\n    },\n    Timestamp: {\n      type: 'Edm.Binary'\n    },\n    UpdatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    DictionaryKey: {\n      type: 'Edm.String'\n    },\n    DisplayName: {\n      type: 'Edm.String'\n    },\n    ObjectId: {\n      type: 'Edm.String'\n    },\n    IsSoftDeleted: {\n      type: 'Edm.Boolean'\n    },\n    CreatedAt: {\n      type: 'Edm.DateTimeOffset'\n    },\n    Identifier: {\n      type: 'Edm.String'\n    },\n    Name: {\n      type: 'Edm.String'\n    },\n    ConnectionString: {\n      type: 'Edm.String'\n    },\n    WebAPIBaseUrl: {\n      type: 'Edm.String'\n    },\n    TenantInfoId: {\n      type: 'Edm.Guid'\n    },\n    AccessControlEntries: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n      collection: true,\n      navigation: true\n    },\n    Owners: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n      collection: true,\n      navigation: true\n    },\n    TenantInfo: {\n      type: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantInfo',\n      navigation: true,\n      referentials: [{\n        property: 'TenantInfoId',\n        referencedProperty: 'Id'\n      }]\n    }\n  }\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n\nlet HostingEntitiesService = /*#__PURE__*/(() => {\n  class HostingEntitiesService extends ODataBaseService {\n    constructor(client) {\n      super(client, 'HostingEntitiesContainer', 'HorselessHosting');\n    }\n\n  }\n\n  HostingEntitiesService.ɵfac = function HostingEntitiesService_Factory(t) {\n    return new (t || HostingEntitiesService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  HostingEntitiesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HostingEntitiesService,\n    factory: HostingEntitiesService.ɵfac\n  });\n  return HostingEntitiesService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet AccessControlEntryService = /*#__PURE__*/(() => {\n  class AccessControlEntryService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'AccessControlEntry', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    subjectAccessControlEntries(key) {\n      return this.entity(key).navigationProperty('SubjectAccessControlEntries');\n    }\n\n    fetchSubjectAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.subjectAccessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToSubjectAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.subjectAccessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromSubjectAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectAccessControlEntries(key).reference().remove(target);\n    }\n\n    subjectPrincipals(key) {\n      return this.entity(key).navigationProperty('SubjectPrincipals');\n    }\n\n    fetchSubjectPrincipals(key, options) {\n      return this.fetchNavigationProperty(this.subjectPrincipals(key), 'entities', options);\n    }\n\n    addPrincipalToSubjectPrincipals(key, target, {\n      etag\n    } = {}) {\n      return this.subjectPrincipals(key).reference().add(target);\n    }\n\n    removePrincipalFromSubjectPrincipals(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectPrincipals(key).reference().remove(target);\n    }\n\n    subjectTenants(key) {\n      return this.entity(key).navigationProperty('SubjectTenants');\n    }\n\n    fetchSubjectTenants(key, options) {\n      return this.fetchNavigationProperty(this.subjectTenants(key), 'entities', options);\n    }\n\n    addTenantToSubjectTenants(key, target, {\n      etag\n    } = {}) {\n      return this.subjectTenants(key).reference().add(target);\n    }\n\n    removeTenantFromSubjectTenants(key, {\n      target,\n      etag\n    } = {}) {\n      return this.subjectTenants(key).reference().remove(target);\n    }\n\n  }\n\n  AccessControlEntryService.ɵfac = function AccessControlEntryService_Factory(t) {\n    return new (t || AccessControlEntryService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  AccessControlEntryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AccessControlEntryService,\n    factory: AccessControlEntryService.ɵfac\n  });\n  return AccessControlEntryService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet KeyCloakConfigurationService = /*#__PURE__*/(() => {\n  class KeyCloakConfigurationService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'KeyCloakConfiguration', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.KeyCloakConfiguration');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    tenantInfo(key) {\n      return this.entity(key).navigationProperty('TenantInfo');\n    }\n\n    fetchTenantInfo(key, options) {\n      return this.fetchNavigationProperty(this.tenantInfo(key), 'entity', options);\n    }\n\n    setTenantInfoAsTenantInfo(key, target, {\n      etag\n    } = {}) {\n      return this.tenantInfo(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantInfoAsTenantInfo(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantInfo(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  KeyCloakConfigurationService.ɵfac = function KeyCloakConfigurationService_Factory(t) {\n    return new (t || KeyCloakConfigurationService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  KeyCloakConfigurationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: KeyCloakConfigurationService,\n    factory: KeyCloakConfigurationService.ɵfac\n  });\n  return KeyCloakConfigurationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet NugetPackageService = /*#__PURE__*/(() => {\n  class NugetPackageService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'NugetPackage', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.NugetPackage');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n  }\n\n  NugetPackageService.ɵfac = function NugetPackageService_Factory(t) {\n    return new (t || NugetPackageService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  NugetPackageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NugetPackageService,\n    factory: NugetPackageService.ɵfac\n  });\n  return NugetPackageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet PrincipalService = /*#__PURE__*/(() => {\n  class PrincipalService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Principal', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    ownedAccessControlEntries(key) {\n      return this.entity(key).navigationProperty('OwnedAccessControlEntries');\n    }\n\n    fetchOwnedAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.ownedAccessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToOwnedAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.ownedAccessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromOwnedAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedAccessControlEntries(key).reference().remove(target);\n    }\n\n    ownedPrincipals(key) {\n      return this.entity(key).navigationProperty('OwnedPrincipals');\n    }\n\n    fetchOwnedPrincipals(key, options) {\n      return this.fetchNavigationProperty(this.ownedPrincipals(key), 'entities', options);\n    }\n\n    addPrincipalToOwnedPrincipals(key, target, {\n      etag\n    } = {}) {\n      return this.ownedPrincipals(key).reference().add(target);\n    }\n\n    removePrincipalFromOwnedPrincipals(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedPrincipals(key).reference().remove(target);\n    }\n\n    ownedTenants(key) {\n      return this.entity(key).navigationProperty('OwnedTenants');\n    }\n\n    fetchOwnedTenants(key, options) {\n      return this.fetchNavigationProperty(this.ownedTenants(key), 'entities', options);\n    }\n\n    addTenantToOwnedTenants(key, target, {\n      etag\n    } = {}) {\n      return this.ownedTenants(key).reference().add(target);\n    }\n\n    removeTenantFromOwnedTenants(key, {\n      target,\n      etag\n    } = {}) {\n      return this.ownedTenants(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    tenantAccounts(key) {\n      return this.entity(key).navigationProperty('TenantAccounts');\n    }\n\n    fetchTenantAccounts(key, options) {\n      return this.fetchNavigationProperty(this.tenantAccounts(key), 'entities', options);\n    }\n\n    addTenantToTenantAccounts(key, target, {\n      etag\n    } = {}) {\n      return this.tenantAccounts(key).reference().add(target);\n    }\n\n    removeTenantFromTenantAccounts(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantAccounts(key).reference().remove(target);\n    }\n\n  }\n\n  PrincipalService.ɵfac = function PrincipalService_Factory(t) {\n    return new (t || PrincipalService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  PrincipalService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PrincipalService,\n    factory: PrincipalService.ɵfac\n  });\n  return PrincipalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantIdentifierStrategyContainerService = /*#__PURE__*/(() => {\n  class TenantIdentifierStrategyContainerService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'TenantIdentifierStrategyContainer', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategyContainer');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    strategy(key) {\n      return this.entity(key).navigationProperty('Strategy');\n    }\n\n    fetchStrategy(key, options) {\n      return this.fetchNavigationProperty(this.strategy(key), 'entity', options);\n    }\n\n    setTenantIdentifierStrategyAsStrategy(key, target, {\n      etag\n    } = {}) {\n      return this.strategy(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantIdentifierStrategyAsStrategy(key, {\n      target,\n      etag\n    } = {}) {\n      return this.strategy(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  TenantIdentifierStrategyContainerService.ɵfac = function TenantIdentifierStrategyContainerService_Factory(t) {\n    return new (t || TenantIdentifierStrategyContainerService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantIdentifierStrategyContainerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantIdentifierStrategyContainerService,\n    factory: TenantIdentifierStrategyContainerService.ɵfac\n  });\n  return TenantIdentifierStrategyContainerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantIdentifierStrategyService = /*#__PURE__*/(() => {\n  class TenantIdentifierStrategyService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'TenantIdentifierStrategy', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategy');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    strategyContainers(key) {\n      return this.entity(key).navigationProperty('StrategyContainers');\n    }\n\n    fetchStrategyContainers(key, options) {\n      return this.fetchNavigationProperty(this.strategyContainers(key), 'entities', options);\n    }\n\n    addTenantIdentifierStrategyContainerToStrategyContainers(key, target, {\n      etag\n    } = {}) {\n      return this.strategyContainers(key).reference().add(target);\n    }\n\n    removeTenantIdentifierStrategyContainerFromStrategyContainers(key, {\n      target,\n      etag\n    } = {}) {\n      return this.strategyContainers(key).reference().remove(target);\n    }\n\n    targetTenant(key) {\n      return this.entity(key).navigationProperty('TargetTenant');\n    }\n\n    fetchTargetTenant(key, options) {\n      return this.fetchNavigationProperty(this.targetTenant(key), 'entity', options);\n    }\n\n    setTenantAsTargetTenant(key, target, {\n      etag\n    } = {}) {\n      return this.targetTenant(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantAsTargetTenant(key, {\n      target,\n      etag\n    } = {}) {\n      return this.targetTenant(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  TenantIdentifierStrategyService.ɵfac = function TenantIdentifierStrategyService_Factory(t) {\n    return new (t || TenantIdentifierStrategyService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantIdentifierStrategyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantIdentifierStrategyService,\n    factory: TenantIdentifierStrategyService.ɵfac\n  });\n  return TenantIdentifierStrategyService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantService = /*#__PURE__*/(() => {\n  class TenantService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'Tenant', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    accounts(key) {\n      return this.entity(key).navigationProperty('Accounts');\n    }\n\n    fetchAccounts(key, options) {\n      return this.fetchNavigationProperty(this.accounts(key), 'entities', options);\n    }\n\n    addPrincipalToAccounts(key, target, {\n      etag\n    } = {}) {\n      return this.accounts(key).reference().add(target);\n    }\n\n    removePrincipalFromAccounts(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accounts(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    tenantIdentifierStrategy(key) {\n      return this.entity(key).navigationProperty('TenantIdentifierStrategy');\n    }\n\n    fetchTenantIdentifierStrategy(key, options) {\n      return this.fetchNavigationProperty(this.tenantIdentifierStrategy(key), 'entity', options);\n    }\n\n    setTenantIdentifierStrategyAsTenantIdentifierStrategy(key, target, {\n      etag\n    } = {}) {\n      return this.tenantIdentifierStrategy(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantIdentifierStrategyAsTenantIdentifierStrategy(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantIdentifierStrategy(key).reference().unset({\n        etag\n      });\n    }\n\n    tenantInfos(key) {\n      return this.entity(key).navigationProperty('TenantInfos');\n    }\n\n    fetchTenantInfos(key, options) {\n      return this.fetchNavigationProperty(this.tenantInfos(key), 'entities', options);\n    }\n\n    addTenantInfoToTenantInfos(key, target, {\n      etag\n    } = {}) {\n      return this.tenantInfos(key).reference().add(target);\n    }\n\n    removeTenantInfoFromTenantInfos(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantInfos(key).reference().remove(target);\n    }\n\n  }\n\n  TenantService.ɵfac = function TenantService_Factory(t) {\n    return new (t || TenantService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantService,\n    factory: TenantService.ɵfac\n  });\n  return TenantService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet TenantInfoService = /*#__PURE__*/(() => {\n  class TenantInfoService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'TenantInfo', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantInfo');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    keyCloakConfigurations(key) {\n      return this.entity(key).navigationProperty('KeyCloakConfigurations');\n    }\n\n    fetchKeyCloakConfigurations(key, options) {\n      return this.fetchNavigationProperty(this.keyCloakConfigurations(key), 'entities', options);\n    }\n\n    addKeyCloakConfigurationToKeyCloakConfigurations(key, target, {\n      etag\n    } = {}) {\n      return this.keyCloakConfigurations(key).reference().add(target);\n    }\n\n    removeKeyCloakConfigurationFromKeyCloakConfigurations(key, {\n      target,\n      etag\n    } = {}) {\n      return this.keyCloakConfigurations(key).reference().remove(target);\n    }\n\n    parentTenant(key) {\n      return this.entity(key).navigationProperty('ParentTenant');\n    }\n\n    fetchParentTenant(key, options) {\n      return this.fetchNavigationProperty(this.parentTenant(key), 'entity', options);\n    }\n\n    setTenantAsParentTenant(key, target, {\n      etag\n    } = {}) {\n      return this.parentTenant(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantAsParentTenant(key, {\n      target,\n      etag\n    } = {}) {\n      return this.parentTenant(key).reference().unset({\n        etag\n      });\n    }\n\n    webAPITenantInfos(key) {\n      return this.entity(key).navigationProperty('WebAPITenantInfos');\n    }\n\n    fetchWebAPITenantInfos(key, options) {\n      return this.fetchNavigationProperty(this.webAPITenantInfos(key), 'entities', options);\n    }\n\n    addWebAPITenantInfoToWebAPITenantInfos(key, target, {\n      etag\n    } = {}) {\n      return this.webAPITenantInfos(key).reference().add(target);\n    }\n\n    removeWebAPITenantInfoFromWebAPITenantInfos(key, {\n      target,\n      etag\n    } = {}) {\n      return this.webAPITenantInfos(key).reference().remove(target);\n    }\n\n  }\n\n  TenantInfoService.ɵfac = function TenantInfoService_Factory(t) {\n    return new (t || TenantInfoService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  TenantInfoService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TenantInfoService,\n    factory: TenantInfoService.ɵfac\n  });\n  return TenantInfoService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#endregion\n\n\nlet WebAPITenantInfoService = /*#__PURE__*/(() => {\n  class WebAPITenantInfoService extends ODataEntitySetService {\n    constructor(client) {\n      super(client, 'WebAPITenantInfo', 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.WebAPITenantInfo');\n    } //#region ODataApiGen Actions\n    //#endregion\n    //#region ODataApiGen Functions\n    //#endregion\n    //#region ODataApiGen Navigations\n\n\n    accessControlEntries(key) {\n      return this.entity(key).navigationProperty('AccessControlEntries');\n    }\n\n    fetchAccessControlEntries(key, options) {\n      return this.fetchNavigationProperty(this.accessControlEntries(key), 'entities', options);\n    }\n\n    addAccessControlEntryToAccessControlEntries(key, target, {\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().add(target);\n    }\n\n    removeAccessControlEntryFromAccessControlEntries(key, {\n      target,\n      etag\n    } = {}) {\n      return this.accessControlEntries(key).reference().remove(target);\n    }\n\n    owners(key) {\n      return this.entity(key).navigationProperty('Owners');\n    }\n\n    fetchOwners(key, options) {\n      return this.fetchNavigationProperty(this.owners(key), 'entities', options);\n    }\n\n    addPrincipalToOwners(key, target, {\n      etag\n    } = {}) {\n      return this.owners(key).reference().add(target);\n    }\n\n    removePrincipalFromOwners(key, {\n      target,\n      etag\n    } = {}) {\n      return this.owners(key).reference().remove(target);\n    }\n\n    tenantInfo(key) {\n      return this.entity(key).navigationProperty('TenantInfo');\n    }\n\n    fetchTenantInfo(key, options) {\n      return this.fetchNavigationProperty(this.tenantInfo(key), 'entity', options);\n    }\n\n    setTenantInfoAsTenantInfo(key, target, {\n      etag\n    } = {}) {\n      return this.tenantInfo(key).reference().set(target, {\n        etag\n      });\n    }\n\n    unsetTenantInfoAsTenantInfo(key, {\n      target,\n      etag\n    } = {}) {\n      return this.tenantInfo(key).reference().unset({\n        etag\n      });\n    }\n\n  }\n\n  WebAPITenantInfoService.ɵfac = function WebAPITenantInfoService_Factory(t) {\n    return new (t || WebAPITenantInfoService)(i0.ɵɵinject(i1.ODataClient));\n  };\n\n  WebAPITenantInfoService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: WebAPITenantInfoService,\n    factory: WebAPITenantInfoService.ɵfac\n  });\n  return WebAPITenantInfoService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\n\nconst AccessControlEntryServiceEntitySetConfig = {\n  name: 'AccessControlEntry',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.AccessControlEntry',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: AccessControlEntryService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst KeyCloakConfigurationServiceEntitySetConfig = {\n  name: 'KeyCloakConfiguration',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.KeyCloakConfiguration',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: KeyCloakConfigurationService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst NugetPackageServiceEntitySetConfig = {\n  name: 'NugetPackage',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.NugetPackage',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: NugetPackageService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst PrincipalServiceEntitySetConfig = {\n  name: 'Principal',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Principal',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: PrincipalService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantIdentifierStrategyContainerServiceEntitySetConfig = {\n  name: 'TenantIdentifierStrategyContainer',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategyContainer',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TenantIdentifierStrategyContainerService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantIdentifierStrategyServiceEntitySetConfig = {\n  name: 'TenantIdentifierStrategy',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantIdentifierStrategy',\n  service: TenantIdentifierStrategyService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantServiceEntitySetConfig = {\n  name: 'Tenant',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.Tenant',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TenantService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst TenantInfoServiceEntitySetConfig = {\n  name: 'TenantInfo',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.TenantInfo',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: TenantInfoService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntitySetConfig\n\nconst WebAPITenantInfoServiceEntitySetConfig = {\n  name: 'WebAPITenantInfo',\n  entityType: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities.WebAPITenantInfo',\n  annotations: [{\n    \"term\": \"Org.OData.Core.V1.OptimisticConcurrency\",\n    \"properties\": [\"Timestamp\"]\n  }],\n  service: WebAPITenantInfoService\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen EntityContainerConfig\n\nconst HostingEntitiesContainer = {\n  name: 'HostingEntities',\n  entitySets: [AccessControlEntryServiceEntitySetConfig, KeyCloakConfigurationServiceEntitySetConfig, NugetPackageServiceEntitySetConfig, PrincipalServiceEntitySetConfig, TenantIdentifierStrategyContainerServiceEntitySetConfig, TenantIdentifierStrategyServiceEntitySetConfig, TenantServiceEntitySetConfig, TenantInfoServiceEntitySetConfig, WebAPITenantInfoServiceEntitySetConfig]\n}; //#endregion\n//#region ODataApiGen Imports\n//#endregion\n//#region ODataApiGen SchemaConfig\n\nconst HostingEntitiesSchema = {\n  namespace: 'TheHorselessNewspaper.Schemas.HostingModel.HostingEntities',\n  enums: [ACEPermissionScopeConfig, ACEPermissionConfig, ACEPermissionTypeConfig, TenantIdentifierStrategyNameConfig],\n  entities: [AccessControlEntryEntityConfig, KeyCloakConfigurationEntityConfig, NugetPackageEntityConfig, PrincipalEntityConfig, TenantIdentifierStrategyContainerEntityConfig, TenantIdentifierStrategyEntityConfig, TenantEntityConfig, TenantInfoEntityConfig, WebAPITenantInfoEntityConfig],\n  callables: [],\n  containers: [HostingEntitiesContainer]\n}; //#endregion\n//#region ODataApiGen ODataImports\n//#endregion\n//#region ODataApiGen ApiConfig\n\nconst HorselessHostingConfig = {\n  serviceRootUrl: '',\n  name: 'HorselessHosting',\n  version: '4.0',\n  creation: new Date('2022-06-27T15:03:57.4166300+00:00'),\n  schemas: [HostingEntitiesSchema],\n  parsers: EDM_PARSERS\n}; //#endregion\n//#region ODataApiGen ODataImports\n//#endregion\n\nlet HorselessHostingModule = /*#__PURE__*/(() => {\n  class HorselessHostingModule {}\n\n  HorselessHostingModule.ɵfac = function HorselessHostingModule_Factory(t) {\n    return new (t || HorselessHostingModule)();\n  };\n\n  HorselessHostingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: HorselessHostingModule\n  });\n  HorselessHostingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [//#region ODataApiGen Providers\n    HostingEntitiesService, AccessControlEntryService, KeyCloakConfigurationService, NugetPackageService, PrincipalService, TenantIdentifierStrategyContainerService, TenantIdentifierStrategyService, TenantService, TenantInfoService, WebAPITenantInfoService //#endregion\n    ]\n  });\n  return HorselessHostingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); //#region ODataApiGen Imports\n//#endregion\n\n/*\n * Public API Surface of horseless-hosting-odataapi\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ACEPermission, ACEPermissionConfig, ACEPermissionScope, ACEPermissionScopeConfig, ACEPermissionType, ACEPermissionTypeConfig, AccessControlEntryEntityConfig, AccessControlEntryService, AccessControlEntryServiceEntitySetConfig, HorselessHostingConfig, HorselessHostingModule, HorselessHostingOdataapiComponent, HorselessHostingOdataapiModule, HorselessHostingOdataapiService, HostingEntitiesService, KeyCloakConfigurationEntityConfig, KeyCloakConfigurationService, KeyCloakConfigurationServiceEntitySetConfig, NugetPackageEntityConfig, NugetPackageService, NugetPackageServiceEntitySetConfig, PrincipalEntityConfig, PrincipalService, PrincipalServiceEntitySetConfig, TenantEntityConfig, TenantIdentifierStrategyContainerEntityConfig, TenantIdentifierStrategyContainerService, TenantIdentifierStrategyContainerServiceEntitySetConfig, TenantIdentifierStrategyEntityConfig, TenantIdentifierStrategyName, TenantIdentifierStrategyNameConfig, TenantIdentifierStrategyService, TenantIdentifierStrategyServiceEntitySetConfig, TenantInfoEntityConfig, TenantInfoService, TenantInfoServiceEntitySetConfig, TenantService, TenantServiceEntitySetConfig, WebAPITenantInfoEntityConfig, WebAPITenantInfoService, WebAPITenantInfoServiceEntitySetConfig }; //# sourceMappingURL=horselessnewspaper-horseless-hosting-odataapi.mjs.map","map":null,"metadata":{},"sourceType":"module"}