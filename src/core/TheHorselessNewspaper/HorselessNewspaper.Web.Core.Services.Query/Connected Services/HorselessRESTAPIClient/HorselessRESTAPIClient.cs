//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace HorselessNewspaper.Web.Core.Services.Query.HorselessRESTAPIClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial interface IHorselessRESTAPIClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesAccessControlEntry>> ApiHorselessContentModelAccessControlEntryCreateAsync(string __tenant__, ContentEntitiesAccessControlEntry body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesAccessControlEntry>> ApiHorselessContentModelAccessControlEntryGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesAccessControlEntry>> ApiHorselessContentModelAccessControlEntryUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesAccessControlEntry body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry>>> ApiHorselessContentModelAccessControlEntryGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<HorselessResponse<SecurityRestClientConfiguration>> ApiClientConfigurationGetClientConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelContentCollectionGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelContentCollectionCreateAsync(string __tenant__, ContentEntitiesContentCollection body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelContentCollectionUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesContentCollection body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesContentCollection>>> ApiHorselessContentModelContentCollectionGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<MvcPartialViewResult>> ApiDynamicViewServerGetDynamicViewAsync(string __tenant__, string viewPhysicalPath = null, System.Guid? parentContentCollectionObjectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse> ApiHorselessContentModelFilesystemAssetIngressUploadPhysicalAsync(string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesFilesystemAsset>> ApiHorselessContentModelFilesystemAssetCreateAsync(string __tenant__, ContentEntitiesFilesystemAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesFilesystemAsset>> ApiHorselessContentModelFilesystemAssetGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesFilesystemAsset>> ApiHorselessContentModelFilesystemAssetUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesFilesystemAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesFilesystemAsset>>> ApiHorselessContentModelFilesystemAssetGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHolonym>> ApiHorselessContentModelHolonymCreateAsync(string __tenant__, ContentEntitiesHolonym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHolonym>> ApiHorselessContentModelHolonymGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHolonym>> ApiHorselessContentModelHolonymUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHolonym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHolonym>>> ApiHorselessContentModelHolonymGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessContent>> ApiHorselessContentModelHorselessContentCreateAsync(string __tenant__, ContentEntitiesHorselessContent body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessContent>> ApiHorselessContentModelHorselessContentGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessContent>> ApiHorselessContentModelHorselessContentUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHorselessContent body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessContent>>> ApiHorselessContentModelHorselessContentGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessSession>> ApiHorselessContentModelHorselessSessionCreateAsync(string __tenant__, ContentEntitiesHorselessSession body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelHorselessSessionGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessSession>> ApiHorselessContentModelHorselessSessionUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHorselessSession body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessSession>>> ApiHorselessContentModelHorselessSessionGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessView>> ApiHorselessContentModelHorselessViewCreateAsync(string __tenant__, ContentEntitiesHorselessView body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessView>> ApiHorselessContentModelHorselessViewGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessView>> ApiHorselessContentModelHorselessViewUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHorselessView body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessView>>> ApiHorselessContentModelHorselessViewGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesJSONAsset>> ApiHorselessContentModelJSONAssetCreateAsync(string __tenant__, ContentEntitiesJSONAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesJSONAsset>> ApiHorselessContentModelJSONAssetGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesJSONAsset>> ApiHorselessContentModelJSONAssetUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesJSONAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesJSONAsset>>> ApiHorselessContentModelJSONAssetGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse> KeycloakSignInGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse> KeycloakSignInPostAsync(string provider = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse> KeycloakSignoutAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMeronym>> ApiHorselessContentModelMeronymCreateAsync(string __tenant__, ContentEntitiesMeronym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMeronym>> ApiHorselessContentModelMeronymGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMeronym>> ApiHorselessContentModelMeronymUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesMeronym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesMeronym>>> ApiHorselessContentModelMeronymGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMIMEType>> ApiHorselessContentModelMIMETypeCreateAsync(string __tenant__, ContentEntitiesMIMEType body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMIMEType>> ApiHorselessContentModelMIMETypeGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMIMEType>> ApiHorselessContentModelMIMETypeUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesMIMEType body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesMIMEType>>> ApiHorselessContentModelMIMETypeGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenuItem>> ApiHorselessContentModelNavigationMenuItemCreateAsync(string __tenant__, ContentEntitiesNavigationMenuItem body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenuItem>> ApiHorselessContentModelNavigationMenuItemGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenuItem>> ApiHorselessContentModelNavigationMenuItemUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesNavigationMenuItem body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem>>> ApiHorselessContentModelNavigationMenuItemGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenu>> ApiHorselessContentModelModelNavigationMenuCreateAsync(string __tenant__, ContentEntitiesNavigationMenu body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenu>> ApiHorselessContentModelModelNavigationMenuGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenu>> ApiHorselessContentModelModelNavigationMenuUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesNavigationMenu body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu>>> ApiHorselessContentModelModelNavigationMenuGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNugetPackage>> ApiHorselessContentModelNugetPackageCreateAsync(string __tenant__, ContentEntitiesNugetPackage body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNugetPackage>> ApiHorselessContentModelNugetPackageGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNugetPackage>> ApiHorselessContentModelNugetPackageUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesNugetPackage body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNugetPackage>>> ApiHorselessContentModelNugetPackageGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPrincipal>> ApiHorselessContentModelPrincipalCreateAsync(string __tenant__, ContentEntitiesPrincipal body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPrincipal>> ApiHorselessContentModelPrincipalGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPrincipal>> ApiHorselessContentModelPrincipalUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesPrincipal body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesPrincipal>>> ApiHorselessContentModelPrincipalGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPublication>> ApiHorselessContentModelPublicationCreateAsync(string __tenant__, ContentEntitiesPublication body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPublication>> ApiHorselessContentModelPublicationGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPublication>> ApiHorselessContentModelPublicationUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesPublication body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesPublication>>> ApiHorselessContentModelPublicationGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenantInfo>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoCreateAsync(HostingEntitiesTenantInfo body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenantInfo>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoGetByObjectIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenantInfo>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoUpdateAsync(string entityCollectionId, HostingEntitiesTenantInfo body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<MultiTenantTenantInfo>>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoGetByPageNumberAsync(int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse> ApproveGetAsync(string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse> ApprovePostAsync(string tenantId, string displayName, string tenantIdentifier, System.Guid? id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenant>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantCreateAsync(HostingEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenant>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantGetByObjectIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenant>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantUpdateAsync(string entityCollectionId, HostingEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<HostingEntitiesTenant>>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantGetByPageNumberAsync(int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantCreateAsync(string __tenant__, ContentEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantUpdatePropertiesAsync(string contentCollectionId, string __tenant__, System.Collections.Generic.IEnumerable<string> updatedProperties = null, ContentEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesTenant>>> ApiHorselessContentModelTenantGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class HorselessRESTAPIClient : IHorselessRESTAPIClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;
    
        public HorselessRESTAPIClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }
    
        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
    
        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesAccessControlEntry>> ApiHorselessContentModelAccessControlEntryCreateAsync(string __tenant__, ContentEntitiesAccessControlEntry body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/AccessControlEntry/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesAccessControlEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesAccessControlEntry>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesAccessControlEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesAccessControlEntry>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesAccessControlEntry>> ApiHorselessContentModelAccessControlEntryGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/AccessControlEntry/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesAccessControlEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesAccessControlEntry>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesAccessControlEntry>> ApiHorselessContentModelAccessControlEntryUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesAccessControlEntry body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/AccessControlEntry/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesAccessControlEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesAccessControlEntry>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesAccessControlEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesAccessControlEntry>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry>>> ApiHorselessContentModelAccessControlEntryGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/AccessControlEntry/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<HorselessResponse<SecurityRestClientConfiguration>> ApiClientConfigurationGetClientConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/ClientConfiguration/GetClientConfiguration");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SecurityRestClientConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<SecurityRestClientConfiguration>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelContentCollectionGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/ContentCollection/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesContentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesContentCollection>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelContentCollectionCreateAsync(string __tenant__, ContentEntitiesContentCollection body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/ContentCollection/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesContentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesContentCollection>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesContentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesContentCollection>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelContentCollectionUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesContentCollection body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/ContentCollection/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesContentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesContentCollection>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesContentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesContentCollection>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesContentCollection>>> ApiHorselessContentModelContentCollectionGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/ContentCollection/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesContentCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesContentCollection>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<MvcPartialViewResult>> ApiDynamicViewServerGetDynamicViewAsync(string __tenant__, string viewPhysicalPath = null, System.Guid? parentContentCollectionObjectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/DynamicViewServer/GetDynamicView");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (viewPhysicalPath != null)
                        request_.Headers.TryAddWithoutValidation("viewPhysicalPath", ConvertToString(viewPhysicalPath, System.Globalization.CultureInfo.InvariantCulture));
                    if (parentContentCollectionObjectId != null)
                        request_.Headers.TryAddWithoutValidation("parentContentCollectionObjectId", ConvertToString(parentContentCollectionObjectId, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/html"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcPartialViewResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<MvcPartialViewResult>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse> ApiHorselessContentModelFilesystemAssetIngressUploadPhysicalAsync(string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/FilesystemAssetIngress/UploadPhysical");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new HorselessResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesFilesystemAsset>> ApiHorselessContentModelFilesystemAssetCreateAsync(string __tenant__, ContentEntitiesFilesystemAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/FilesystemAsset/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesFilesystemAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesFilesystemAsset>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesFilesystemAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesFilesystemAsset>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesFilesystemAsset>> ApiHorselessContentModelFilesystemAssetGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/FilesystemAsset/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesFilesystemAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesFilesystemAsset>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesFilesystemAsset>> ApiHorselessContentModelFilesystemAssetUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesFilesystemAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/FilesystemAsset/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesFilesystemAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesFilesystemAsset>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesFilesystemAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesFilesystemAsset>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesFilesystemAsset>>> ApiHorselessContentModelFilesystemAssetGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/FilesystemAsset/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesFilesystemAsset>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesFilesystemAsset>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHolonym>> ApiHorselessContentModelHolonymCreateAsync(string __tenant__, ContentEntitiesHolonym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Holonym/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHolonym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHolonym>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHolonym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHolonym>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHolonym>> ApiHorselessContentModelHolonymGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Holonym/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHolonym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHolonym>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHolonym>> ApiHorselessContentModelHolonymUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHolonym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Holonym/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHolonym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHolonym>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHolonym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHolonym>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHolonym>>> ApiHorselessContentModelHolonymGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Holonym/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesHolonym>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHolonym>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessContent>> ApiHorselessContentModelHorselessContentCreateAsync(string __tenant__, ContentEntitiesHorselessContent body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessContent/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHorselessContent>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessContent>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessContent>> ApiHorselessContentModelHorselessContentGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessContent/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessContent>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessContent>> ApiHorselessContentModelHorselessContentUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHorselessContent body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessContent/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHorselessContent>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessContent>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessContent>>> ApiHorselessContentModelHorselessContentGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessContent/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesHorselessContent>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessContent>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessSession>> ApiHorselessContentModelHorselessSessionCreateAsync(string __tenant__, ContentEntitiesHorselessSession body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessSession/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHorselessSession>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessSession>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesContentCollection>> ApiHorselessContentModelHorselessSessionGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessSession/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesContentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesContentCollection>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessSession>> ApiHorselessContentModelHorselessSessionUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHorselessSession body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessSession/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHorselessSession>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessSession>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessSession>>> ApiHorselessContentModelHorselessSessionGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessSession/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesHorselessSession>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessSession>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessView>> ApiHorselessContentModelHorselessViewCreateAsync(string __tenant__, ContentEntitiesHorselessView body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessView/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHorselessView>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessView>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessView>> ApiHorselessContentModelHorselessViewGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessView/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessView>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesHorselessView>> ApiHorselessContentModelHorselessViewUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesHorselessView body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessView/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesHorselessView>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesHorselessView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesHorselessView>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessView>>> ApiHorselessContentModelHorselessViewGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/HorselessView/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesHorselessView>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesHorselessView>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesJSONAsset>> ApiHorselessContentModelJSONAssetCreateAsync(string __tenant__, ContentEntitiesJSONAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/JSONAsset/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesJSONAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesJSONAsset>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesJSONAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesJSONAsset>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesJSONAsset>> ApiHorselessContentModelJSONAssetGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/JSONAsset/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesJSONAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesJSONAsset>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesJSONAsset>> ApiHorselessContentModelJSONAssetUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesJSONAsset body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/JSONAsset/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesJSONAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesJSONAsset>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesJSONAsset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesJSONAsset>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesJSONAsset>>> ApiHorselessContentModelJSONAssetGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/JSONAsset/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesJSONAsset>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesJSONAsset>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse> KeycloakSignInGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Keycloak/SignIn");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new HorselessResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse> KeycloakSignInPostAsync(string provider = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Keycloak/SignIn");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (provider == null)
                        throw new System.ArgumentNullException("provider");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(provider, System.Globalization.CultureInfo.InvariantCulture)), "provider");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new HorselessResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse> KeycloakSignoutAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Keycloak/Signout");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new HorselessResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMeronym>> ApiHorselessContentModelMeronymCreateAsync(string __tenant__, ContentEntitiesMeronym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Meronym/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMeronym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesMeronym>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMeronym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesMeronym>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMeronym>> ApiHorselessContentModelMeronymGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Meronym/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMeronym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesMeronym>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMeronym>> ApiHorselessContentModelMeronymUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesMeronym body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Meronym/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMeronym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesMeronym>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMeronym>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesMeronym>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesMeronym>>> ApiHorselessContentModelMeronymGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Meronym/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesMeronym>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesMeronym>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMIMEType>> ApiHorselessContentModelMIMETypeCreateAsync(string __tenant__, ContentEntitiesMIMEType body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/MIMEType/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMIMEType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesMIMEType>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMIMEType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesMIMEType>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMIMEType>> ApiHorselessContentModelMIMETypeGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/MIMEType/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMIMEType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesMIMEType>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesMIMEType>> ApiHorselessContentModelMIMETypeUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesMIMEType body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/MIMEType/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMIMEType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesMIMEType>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesMIMEType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesMIMEType>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesMIMEType>>> ApiHorselessContentModelMIMETypeGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/MIMEType/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesMIMEType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesMIMEType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenuItem>> ApiHorselessContentModelNavigationMenuItemCreateAsync(string __tenant__, ContentEntitiesNavigationMenuItem body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NavigationMenuItem/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenuItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesNavigationMenuItem>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenuItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNavigationMenuItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenuItem>> ApiHorselessContentModelNavigationMenuItemGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NavigationMenuItem/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenuItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNavigationMenuItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenuItem>> ApiHorselessContentModelNavigationMenuItemUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesNavigationMenuItem body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NavigationMenuItem/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenuItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesNavigationMenuItem>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenuItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNavigationMenuItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem>>> ApiHorselessContentModelNavigationMenuItemGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NavigationMenuItem/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenu>> ApiHorselessContentModelModelNavigationMenuCreateAsync(string __tenant__, ContentEntitiesNavigationMenu body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModelModel/NavigationMenu/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenu>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesNavigationMenu>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenu>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNavigationMenu>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenu>> ApiHorselessContentModelModelNavigationMenuGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModelModel/NavigationMenu/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenu>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNavigationMenu>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNavigationMenu>> ApiHorselessContentModelModelNavigationMenuUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesNavigationMenu body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModelModel/NavigationMenu/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenu>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesNavigationMenu>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNavigationMenu>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNavigationMenu>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu>>> ApiHorselessContentModelModelNavigationMenuGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModelModel/NavigationMenu/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNugetPackage>> ApiHorselessContentModelNugetPackageCreateAsync(string __tenant__, ContentEntitiesNugetPackage body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NugetPackage/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNugetPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesNugetPackage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNugetPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNugetPackage>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNugetPackage>> ApiHorselessContentModelNugetPackageGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NugetPackage/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNugetPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNugetPackage>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesNugetPackage>> ApiHorselessContentModelNugetPackageUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesNugetPackage body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NugetPackage/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNugetPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesNugetPackage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesNugetPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesNugetPackage>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNugetPackage>>> ApiHorselessContentModelNugetPackageGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/NugetPackage/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesNugetPackage>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesNugetPackage>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPrincipal>> ApiHorselessContentModelPrincipalCreateAsync(string __tenant__, ContentEntitiesPrincipal body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Principal/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPrincipal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesPrincipal>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPrincipal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesPrincipal>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPrincipal>> ApiHorselessContentModelPrincipalGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Principal/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPrincipal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesPrincipal>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPrincipal>> ApiHorselessContentModelPrincipalUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesPrincipal body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Principal/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPrincipal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesPrincipal>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPrincipal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesPrincipal>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesPrincipal>>> ApiHorselessContentModelPrincipalGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Principal/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesPrincipal>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesPrincipal>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPublication>> ApiHorselessContentModelPublicationCreateAsync(string __tenant__, ContentEntitiesPublication body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Publication/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPublication>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesPublication>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPublication>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesPublication>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPublication>> ApiHorselessContentModelPublicationGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Publication/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPublication>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesPublication>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesPublication>> ApiHorselessContentModelPublicationUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesPublication body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Publication/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPublication>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesPublication>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesPublication>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesPublication>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesPublication>>> ApiHorselessContentModelPublicationGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Publication/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesPublication>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesPublication>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenantInfo>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoCreateAsync(HostingEntitiesTenantInfo body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoCreate");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenantInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HostingEntitiesTenantInfo>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenantInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<HostingEntitiesTenantInfo>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenantInfo>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoGetByObjectIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoGetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenantInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<HostingEntitiesTenantInfo>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenantInfo>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoUpdateAsync(string entityCollectionId, HostingEntitiesTenantInfo body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityCollectionId == null)
                throw new System.ArgumentNullException("entityCollectionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoUpdate/{entityCollectionId}");
            urlBuilder_.Replace("{entityCollectionId}", System.Uri.EscapeDataString(ConvertToString(entityCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenantInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HostingEntitiesTenantInfo>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenantInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<HostingEntitiesTenantInfo>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<MultiTenantTenantInfo>>> ApiHorselessHostingModelTenantInfoHostingEntitiesTenantInfoGetByPageNumberAsync(int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantInfo/HostingEntitiesTenantInfoGetByPageNumber?");
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MultiTenantTenantInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<MultiTenantTenantInfo>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse> ApproveGetAsync(string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Approve/{tenantId}");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new HorselessResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse> ApprovePostAsync(string tenantId, string displayName, string tenantIdentifier, System.Guid? id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");
    
            if (displayName == null)
                throw new System.ArgumentNullException("displayName");
    
            if (tenantIdentifier == null)
                throw new System.ArgumentNullException("tenantIdentifier");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Approve/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("displayName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(displayName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdentifier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdentifier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new HorselessResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenant>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantCreateAsync(HostingEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantCreate");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HostingEntitiesTenant>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<HostingEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenant>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantGetByObjectIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantGetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<HostingEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<HostingEntitiesTenant>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantUpdateAsync(string entityCollectionId, HostingEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityCollectionId == null)
                throw new System.ArgumentNullException("entityCollectionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantUpdate/{entityCollectionId}");
            urlBuilder_.Replace("{entityCollectionId}", System.Uri.EscapeDataString(ConvertToString(entityCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HostingEntitiesTenant>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<HostingEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<HostingEntitiesTenant>>> ApiHorselessHostingModelTenantRESTHostingEntitiesTenantGetByPageNumberAsync(int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantGetByPageNumber?");
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HostingEntitiesTenant>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<HostingEntitiesTenant>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantCreateAsync(string __tenant__, ContentEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Tenant/Create");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesTenant>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantGetByObjectIdAsync(string objectId, string __tenant__, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Tenant/GetByObjectId/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantUpdateAsync(string contentCollectionId, string __tenant__, ContentEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Tenant/Update/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesTenant>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<ContentEntitiesTenant>> ApiHorselessContentModelTenantUpdatePropertiesAsync(string contentCollectionId, string __tenant__, System.Collections.Generic.IEnumerable<string> updatedProperties = null, ContentEntitiesTenant body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (contentCollectionId == null)
                throw new System.ArgumentNullException("contentCollectionId");
    
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Tenant/UpdateProperties/{contentCollectionId}");
            urlBuilder_.Replace("{contentCollectionId}", System.Uri.EscapeDataString(ConvertToString(contentCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (updatedProperties != null)
                        request_.Headers.TryAddWithoutValidation("updatedProperties", updatedProperties);
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ContentEntitiesTenant>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentEntitiesTenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<ContentEntitiesTenant>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesTenant>>> ApiHorselessContentModelTenantGetByPageNumberAsync(string __tenant__, int? pageSize = null, int? pageNumber = null, int? pageCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (__tenant__ == null)
                throw new System.ArgumentNullException("__tenant__");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{__tenant__}/api/HorselessContentModel/Tenant/GetByPageNumber?");
            urlBuilder_.Replace("{__tenant__}", System.Uri.EscapeDataString(ConvertToString(__tenant__, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContentEntitiesTenant>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new HorselessResponse<System.Collections.Generic.ICollection<ContentEntitiesTenant>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MvcProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MvcProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentEntitiesACEPermission
    {
        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CREATE")]
        CREATE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHARE")]
        SHARE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTE")]
        EXECUTE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH")]
        SEARCH = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISH")]
        PUBLISH = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNPUBLISH")]
        UNPUBLISH = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPROVE")]
        APPROVE = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentEntitiesACEPermissionScope
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
        SITE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TENANT")]
        TENANT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OWNER")]
        OWNER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROLE")]
        ROLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW")]
        WORKFLOW = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ANONYMOUS")]
        ANONYMOUS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EVERYONE")]
        EVERYONE = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentEntitiesACEPermissionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PERMIT")]
        PERMIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENY")]
        DENY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesAccessControlEntry 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public bool? IsActive { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Scope")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentEntitiesACEPermissionScope? Scope { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Permission")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentEntitiesACEPermission? Permission { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PermissionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentEntitiesACEPermissionType? PermissionType { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessContents")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessContent> HorselessContents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessViews")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessView> HorselessViews { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Publications")]
        public System.Collections.Generic.ICollection<ContentEntitiesPublication> Publications { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<ContentEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Placeholders")]
        public System.Collections.Generic.ICollection<ContentEntitiesPlaceholder> Placeholders { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("SubjectPrincipals")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> SubjectPrincipals { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesAccessControlEntry FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesAccessControlEntry>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesContentCollection 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AllowAnonymousRead")]
        public bool? AllowAnonymousRead { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishedURL")]
        public string PublishedURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PreviewURL")]
        public string PreviewURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ParentContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ParentContentCollections { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ChildContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ChildContentCollections { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessViews")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessView> HorselessViews { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Publications")]
        public System.Collections.Generic.ICollection<ContentEntitiesPublication> Publications { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<ContentEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Taxonomies")]
        public System.Collections.Generic.ICollection<ContentEntitiesTaxonomy> Taxonomies { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessContents")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessContent> HorselessContents { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesContentCollection FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesContentCollection>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesFilesystemAsset 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Filename")]
        public string Filename { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishedURL")]
        public string PublishedURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PreviewURL")]
        public string PreviewURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessContents")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessContent> HorselessContents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesFilesystemAsset FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesFilesystemAsset>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesHolonym 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonValue")]
        public string JsonValue { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonSchema")]
        public string JsonSchema { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Meronyms")]
        public System.Collections.Generic.ICollection<ContentEntitiesMeronym> Meronyms { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesHolonym FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesHolonym>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesHorselessContent 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("FilesystemAssetId")]
        public System.Guid? FilesystemAssetId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JSONAssetId")]
        public System.Guid? JSONAssetId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MIMETypeId")]
        public System.Guid? MIMETypeId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishedURL")]
        public string PublishedURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PreviewURL")]
        public string PreviewURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("FilesystemAsset")]
        public ContentEntitiesFilesystemAsset FilesystemAsset { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JSONAsset")]
        public ContentEntitiesJSONAsset JSONAsset { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MIMEType")]
        public ContentEntitiesMIMEType MIMEType { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselesContentType")]
        public ContentEntitiesHorselessContentType? HorselesContentType { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesHorselessContent FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesHorselessContent>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentEntitiesHorselessContentType
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesHorselessSession 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("SessionId")]
        public string SessionId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Iss")]
        public string Iss { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Aud")]
        public string Aud { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Sub")]
        public string Sub { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsAnonymous")]
        public bool? IsAnonymous { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Principal")]
        public ContentEntitiesPrincipal Principal { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesHorselessSession FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesHorselessSession>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesHorselessView 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public bool? IsActive { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Exists")]
        public bool? Exists { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsDirectory")]
        public bool? IsDirectory { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("LastModified")]
        public System.DateTime? LastModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Length")]
        public long? Length { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PhysicalPath")]
        public string PhysicalPath { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ViewContent")]
        public byte[] ViewContent { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Placeholders")]
        public System.Collections.Generic.ICollection<ContentEntitiesPlaceholder> Placeholders { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesHorselessView FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesHorselessView>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesJSONAsset 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonValue")]
        public string JsonValue { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonSchema")]
        public string JsonSchema { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessContents")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessContent> HorselessContents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<ContentEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonObject")]
        public System.Collections.Generic.IDictionary<string, NodesJsonNode> JsonObject { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesJSONAsset FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesJSONAsset>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesMIMEType 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MIMETypeName")]
        public string MIMETypeName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessContents")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessContent> HorselessContents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesMIMEType FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesMIMEType>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesMeronym 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonValue")]
        public string JsonValue { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonSchema")]
        public string JsonSchema { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Holonyms")]
        public System.Collections.Generic.ICollection<ContentEntitiesHolonym> Holonyms { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesMeronym FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesMeronym>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesNavigationMenu 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishAt")]
        public System.DateTime? PublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UnPublishAt")]
        public System.DateTime? UnPublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuLabel")]
        public string MenuLabel { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuDescription")]
        public string MenuDescription { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuAltText")]
        public string MenuAltText { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ChildNavigationMenuItems")]
        public System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem> ChildNavigationMenuItems { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Children")]
        public System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu> Children { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Parents")]
        public System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu> Parents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesNavigationMenu FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesNavigationMenu>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesNavigationMenuItem 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishAt")]
        public System.DateTime? PublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UnPublishAt")]
        public System.DateTime? UnPublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuItemLabel")]
        public string MenuItemLabel { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuItemDescription")]
        public string MenuItemDescription { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuItemAltText")]
        public string MenuItemAltText { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ChildNavigationItems")]
        public System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem> ChildNavigationItems { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ParentNavigationItems")]
        public System.Collections.Generic.ICollection<ContentEntitiesNavigationMenuItem> ParentNavigationItems { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ParentNavigationMenus")]
        public System.Collections.Generic.ICollection<ContentEntitiesNavigationMenu> ParentNavigationMenus { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesNavigationMenuItem FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesNavigationMenuItem>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesNugetPackage 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishAt")]
        public System.DateTime? PublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UnPublishAt")]
        public System.DateTime? UnPublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PackageId")]
        public string PackageId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PackageVersion")]
        public string PackageVersion { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PackageAuthor")]
        public string PackageAuthor { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PackageSource")]
        public string PackageSource { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesNugetPackage FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesNugetPackage>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesPlaceholder 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessViewId")]
        public System.Guid? HorselessViewId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessView")]
        public ContentEntitiesHorselessView HorselessView { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesPlaceholder FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesPlaceholder>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesPrincipal 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Iss")]
        public string Iss { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Aud")]
        public string Aud { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Sub")]
        public string Sub { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsAnonymous")]
        public bool? IsAnonymous { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UPN")]
        public string UPN { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string Email { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PreferredUserName")]
        public string PreferredUserName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PrincipalClaimContainer")]
        public ContentEntitiesPrincipalClaimContainer PrincipalClaimContainer { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ManagingAccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> ManagingAccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<ContentEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("OwnedTenants")]
        public System.Collections.Generic.ICollection<ContentEntitiesTenant> OwnedTenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("OwnedHorselessSessions")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessSession> OwnedHorselessSessions { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessSessions")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessSession> HorselessSessions { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessContents")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessContent> HorselessContents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("HorselessViews")]
        public System.Collections.Generic.ICollection<ContentEntitiesHorselessView> HorselessViews { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("FilesystemAssets")]
        public System.Collections.Generic.ICollection<ContentEntitiesFilesystemAsset> FilesystemAssets { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Holonyms")]
        public System.Collections.Generic.ICollection<ContentEntitiesHolonym> Holonyms { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JSONAssets")]
        public System.Collections.Generic.ICollection<ContentEntitiesJSONAsset> JSONAssets { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Placeholders")]
        public System.Collections.Generic.ICollection<ContentEntitiesPlaceholder> Placeholders { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesPrincipal FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesPrincipal>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesPrincipalClaim 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ClaimType")]
        public string ClaimType { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ClaimValue")]
        public string ClaimValue { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ClaimValueType")]
        public string ClaimValueType { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ClaimIssuer")]
        public string ClaimIssuer { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PrincipalClaimContainerId")]
        public System.Guid? PrincipalClaimContainerId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PrincipalClaimContainer")]
        public ContentEntitiesPrincipalClaimContainer PrincipalClaimContainer { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesPrincipalClaim FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesPrincipalClaim>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesPrincipalClaimContainer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PrincipalClaims")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipalClaim> PrincipalClaims { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PrincipalId")]
        public System.Guid? PrincipalId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Principal")]
        public ContentEntitiesPrincipal Principal { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesPrincipalClaimContainer FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesPrincipalClaimContainer>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesPublication 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishAt")]
        public System.DateTime? PublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UnPublishAt")]
        public System.DateTime? UnPublishAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublishedURL")]
        public string PublishedURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PreviewURL")]
        public string PreviewURL { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublicationChildren")]
        public System.Collections.Generic.ICollection<ContentEntitiesPublication> PublicationChildren { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PublicationParents")]
        public System.Collections.Generic.ICollection<ContentEntitiesPublication> PublicationParents { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesPublication FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesPublication>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesTaxon 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonValue")]
        public string JsonValue { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonSchema")]
        public string JsonSchema { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AntecedentTaxons")]
        public System.Collections.Generic.ICollection<ContentEntitiesTaxon> AntecedentTaxons { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DerivativeTaxons")]
        public System.Collections.Generic.ICollection<ContentEntitiesTaxon> DerivativeTaxons { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TaxonomyId")]
        public System.Guid? TaxonomyId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Taxonomy")]
        public ContentEntitiesTaxonomy Taxonomy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Holonyms")]
        public System.Collections.Generic.ICollection<ContentEntitiesHolonym> Holonyms { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesTaxon FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesTaxon>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesTaxonomy 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonValue")]
        public string JsonValue { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("JsonSchema")]
        public string JsonSchema { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Taxons")]
        public System.Collections.Generic.ICollection<ContentEntitiesTaxon> Taxons { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesTaxonomy FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesTaxonomy>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesTenant 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("BaseUrl")]
        public string BaseUrl { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifierStrategyId")]
        public System.Guid? TenantIdentifierStrategyId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifierStrategy")]
        public ContentEntitiesTenantIdentifierStrategy TenantIdentifierStrategy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifier")]
        public string TenantIdentifier { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("MetaData")]
        public System.Collections.Generic.ICollection<ContentEntitiesJSONAsset> MetaData { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Accounts")]
        public System.Collections.Generic.ICollection<ContentEntitiesPrincipal> Accounts { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DeploymentState")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentEntitiesTenantDeploymentWorkflowState? DeploymentState { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentCollections")]
        public System.Collections.Generic.ICollection<ContentEntitiesContentCollection> ContentCollections { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesTenant FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesTenant>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentEntitiesTenantDeploymentWorkflowState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PendingApproval")]
        PendingApproval = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExistsInContentDb")]
        ExistsInContentDb = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasOwners")]
        HasOwners = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasACL")]
        HasACL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasTenantFilesystem")]
        HasTenantFilesystem = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasContentCollection")]
        HasContentCollection = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentComplete")]
        DeploymentComplete = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesTenantIdentifierStrategy 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenant_Id")]
        public System.Guid? Tenant_Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenant")]
        public ContentEntitiesTenant Tenant { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("StrategyContainers")]
        public System.Collections.Generic.ICollection<ContentEntitiesTenantIdentifierStrategyContainer> StrategyContainers { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesTenantIdentifierStrategy FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesTenantIdentifierStrategy>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ContentEntitiesTenantIdentifierStrategyContainer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifierStrategyName")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentEntitiesTenantIdentifierStrategyName? TenantIdentifierStrategyName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifier")]
        public string TenantIdentifier { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Strategy")]
        public ContentEntitiesTenantIdentifierStrategy Strategy { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ContentEntitiesTenantIdentifierStrategyContainer FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ContentEntitiesTenantIdentifierStrategyContainer>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum ContentEntitiesTenantIdentifierStrategyName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STATIC")]
        STATIC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASE_PATH")]
        BASE_PATH = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASPNETCORE_ROUTE")]
        ASPNETCORE_ROUTE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DNS_HOSTNAME")]
        DNS_HOSTNAME = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DNS_FQDN")]
        DNS_FQDN = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum HostingEntitiesACEPermission
    {
        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CREATE")]
        CREATE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHARE")]
        SHARE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTE")]
        EXECUTE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH")]
        SEARCH = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISH")]
        PUBLISH = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNPUBLISH")]
        UNPUBLISH = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPROVE")]
        APPROVE = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum HostingEntitiesACEPermissionScope
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
        SITE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TENANT")]
        TENANT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OWNER")]
        OWNER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROLE")]
        ROLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW")]
        WORKFLOW = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ANONYMOUS")]
        ANONYMOUS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EVERYONE")]
        EVERYONE = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum HostingEntitiesACEPermissionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PERMIT")]
        PERMIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENY")]
        DENY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesAccessControlEntry 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Scope")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HostingEntitiesACEPermissionScope? Scope { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Permission")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HostingEntitiesACEPermission? Permission { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PermissionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HostingEntitiesACEPermissionType? PermissionType { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("NugetPackages")]
        public System.Collections.Generic.ICollection<HostingEntitiesNugetPackage> NugetPackages { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<HostingEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public bool? IsActive { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesAccessControlEntry FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesAccessControlEntry>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesKeyCloakConfiguration 
    {
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Authority")]
        public string Authority { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Realm")]
        public string Realm { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Iss")]
        public string Iss { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Aud")]
        public string Aud { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantInfoId")]
        public System.Guid? TenantInfoId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantInfo")]
        public HostingEntitiesTenantInfo TenantInfo { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesKeyCloakConfiguration FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesKeyCloakConfiguration>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesNugetPackage 
    {
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<HostingEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PackageName")]
        public string PackageName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PackageId")]
        public string PackageId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Publisher")]
        public string Publisher { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Version")]
        public string Version { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesNugetPackage FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesNugetPackage>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesPrincipal 
    {
        [System.Text.Json.Serialization.JsonPropertyName("UPN")]
        public string UPN { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string Email { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("PreferredUserName")]
        public string PreferredUserName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("NugetPackages")]
        public System.Collections.Generic.ICollection<HostingEntitiesNugetPackage> NugetPackages { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("OwnedTenants")]
        public System.Collections.Generic.ICollection<HostingEntitiesTenant> OwnedTenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenants")]
        public System.Collections.Generic.ICollection<HostingEntitiesTenant> Tenants { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Iss")]
        public string Iss { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Aud")]
        public string Aud { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Sub")]
        public string Sub { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesPrincipal FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesPrincipal>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesTenant 
    {
        [System.Text.Json.Serialization.JsonPropertyName("IsPublished")]
        public bool? IsPublished { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("BaseUrl")]
        public string BaseUrl { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifier")]
        public string TenantIdentifier { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifierStrategy")]
        public HostingEntitiesTenantIdentifierStrategy TenantIdentifierStrategy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantInfos")]
        public System.Collections.Generic.ICollection<HostingEntitiesTenantInfo> TenantInfos { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("KeyCloakConfigurations")]
        public System.Collections.Generic.ICollection<HostingEntitiesKeyCloakConfiguration> KeyCloakConfigurations { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("NugetPackages")]
        public System.Collections.Generic.ICollection<HostingEntitiesNugetPackage> NugetPackages { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Accounts")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Accounts { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DeploymentState")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HostingEntitiesTenantDeploymentWorkflowState? DeploymentState { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesTenant FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesTenant>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum HostingEntitiesTenantDeploymentWorkflowState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PendingApproval")]
        PendingApproval = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExistsInContentDb")]
        ExistsInContentDb = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasOwners")]
        HasOwners = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasACL")]
        HasACL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HasContentCollection")]
        HasContentCollection = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeploymentComplete")]
        DeploymentComplete = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesTenantIdentifierStrategy 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantId")]
        public System.Guid? TenantId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Tenant")]
        public HostingEntitiesTenant Tenant { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("StrategyContainers")]
        public System.Collections.Generic.ICollection<HostingEntitiesTenantIdentifierStrategyContainer> StrategyContainers { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesTenantIdentifierStrategy FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesTenantIdentifierStrategy>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesTenantIdentifierStrategyContainer 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifierStrategyName")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HostingEntitiesTenantIdentifierStrategyName? TenantIdentifierStrategyName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("StrategyId")]
        public System.Guid? StrategyId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Strategy")]
        public HostingEntitiesTenantIdentifierStrategy Strategy { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesTenantIdentifierStrategyContainer FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesTenantIdentifierStrategyContainer>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public enum HostingEntitiesTenantIdentifierStrategyName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STATIC")]
        STATIC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASE_PATH")]
        BASE_PATH = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ASPNETCORE_ROUTE")]
        ASPNETCORE_ROUTE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DNS_HOSTNAME")]
        DNS_HOSTNAME = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DNS_FQDN")]
        DNS_FQDN = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesTenantInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ParentTenantId")]
        public System.Guid? ParentTenantId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ParentTenant")]
        public HostingEntitiesTenant ParentTenant { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Identifier")]
        public string Identifier { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ConnectionString")]
        public string ConnectionString { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantBaseUrl")]
        public string TenantBaseUrl { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("KeyCloakConfigurations")]
        public System.Collections.Generic.ICollection<HostingEntitiesKeyCloakConfiguration> KeyCloakConfigurations { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("WebAPITenantInfos")]
        public System.Collections.Generic.ICollection<HostingEntitiesWebAPITenantInfo> WebAPITenantInfos { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesTenantInfo FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesTenantInfo>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class HostingEntitiesWebAPITenantInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("AccessControlEntries")]
        public System.Collections.Generic.ICollection<HostingEntitiesAccessControlEntry> AccessControlEntries { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Owners")]
        public System.Collections.Generic.ICollection<HostingEntitiesPrincipal> Owners { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Timestamp")]
        public byte[] Timestamp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("UpdatedAt")]
        public System.DateTime? UpdatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DictionaryKey")]
        public string DictionaryKey { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string DisplayName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ObjectId")]
        public string ObjectId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("IsSoftDeleted")]
        public bool? IsSoftDeleted { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Identifier")]
        public string Identifier { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ConnectionString")]
        public string ConnectionString { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("WebAPIBaseUrl")]
        public string WebAPIBaseUrl { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantInfoId")]
        public System.Guid? TenantInfoId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantInfo")]
        public HostingEntitiesTenantInfo TenantInfo { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static HostingEntitiesWebAPITenantInfo FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<HostingEntitiesWebAPITenantInfo>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class MultiTenantTenantInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Identifier")]
        public string Identifier { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ConnectionString")]
        public string ConnectionString { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static MultiTenantTenantInfo FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<MultiTenantTenantInfo>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class MvcPartialViewResult 
    {
        [System.Text.Json.Serialization.JsonPropertyName("StatusCode")]
        public int? StatusCode { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ViewName")]
        public string ViewName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Model")]
        public object Model { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ViewData")]
        public System.Collections.Generic.IDictionary<string, object> ViewData { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TempData")]
        public System.Collections.Generic.IDictionary<string, object> TempData { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ViewEngine")]
        public ViewEnginesIViewEngine ViewEngine { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ContentType")]
        public string ContentType { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static MvcPartialViewResult FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<MvcPartialViewResult>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class MvcProblemDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static MvcProblemDetails FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<MvcProblemDetails>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class NodesJsonNode 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Options")]
        public NodesJsonNodeOptions Options { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Parent")]
        public NodesJsonNode Parent { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("Root")]
        public NodesJsonNode Root { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static NodesJsonNode FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<NodesJsonNode>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class NodesJsonNodeOptions 
    {
        [System.Text.Json.Serialization.JsonPropertyName("PropertyNameCaseInsensitive")]
        public bool? PropertyNameCaseInsensitive { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static NodesJsonNodeOptions FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<NodesJsonNodeOptions>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class SecurityRestClientConfiguration 
    {
        [System.Text.Json.Serialization.JsonPropertyName("IsClaimsIdentity")]
        public bool? IsClaimsIdentity { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("AccessToken")]
        public string AccessToken { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ODataEndpoint")]
        public string ODataEndpoint { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("RESTEndpoint")]
        public string RESTEndpoint { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("TenantIdentifier")]
        public string TenantIdentifier { get; set; }
    
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static SecurityRestClientConfiguration FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<SecurityRestClientConfiguration>(data, options);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v13.0.1.0)")]
    public partial class ViewEnginesIViewEngine 
    {
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Serialize(this, options);
        }
    
        public static ViewEnginesIViewEngine FromJson(string data)
        {
            var options = new System.Text.Json.JsonSerializerOptions();
            return System.Text.Json.JsonSerializer.Deserialize<ViewEnginesIViewEngine>(data, options);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class HorselessResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public HorselessResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class HorselessResponse<TResult> : HorselessResponse
    {
        public TResult Result { get; private set; }

        public HorselessResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016