{"hash":"ccb6993a9fe8acd64053296aeea995d5ad48d1ca","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\n\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nclass CustomHttpParameterCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\r\nconst COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n};\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionRESTControllerCreate(contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Create`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerUpdate(contentCollectionId, contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Create`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerUpdate(contentCollectionId, contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymRESTControllerCreate(contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Create`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerUpdate(contentCollectionId, contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionRESTControllerCreate(contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Create`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerUpdate(contentCollectionId, contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetRESTControllerCreate(contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Create`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerUpdate(contentCollectionId, contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass KeycloakAuthenticationService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    canConsumeForm(consumes) {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    keycloakAuthenticationControllerSignIn(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/Keycloak/SignIn`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignIn_1(provider, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'multipart/form-data'\r\n        ];\r\n        const canConsumeForm = this.canConsumeForm(consumes);\r\n        let localVarFormParams;\r\n        let localVarUseForm = false;\r\n        let localVarConvertFormParamsToString = false;\r\n        if (localVarUseForm) {\r\n            localVarFormParams = new FormData();\r\n        }\r\n        else {\r\n            localVarFormParams = new HttpParams({ encoder: this.encoder });\r\n        }\r\n        if (provider !== undefined) {\r\n            localVarFormParams = localVarFormParams.append('provider', provider) || localVarFormParams;\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/SignIn`, localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignOutCurrentUser(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/Signout`, null, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nKeycloakAuthenticationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nKeycloakAuthenticationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymRESTControllerCreate(contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Create`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerUpdate(contentCollectionId, contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MetadataService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    metadataControllerGetMetadata(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/$metadata`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    metadataControllerGetMetadata_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/$metadata`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    metadataControllerGetServiceDocument(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    metadataControllerGetServiceDocument_2(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMetadataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MetadataService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMetadataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MetadataService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MetadataService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    mimeTypeRESTControllerCreate(contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Create`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerUpdate(contentCollectionId, contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Create`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Create`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_2(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantInfoRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Create`, hostingEntitiesTenantInfo, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantInfoRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantInfoRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantInfoRESTControllerUpdate(entityCollectionId, hostingEntitiesTenantInfo, observe = 'body', reportProgress = false, options) {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantInfoRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Update/${encodeURIComponent(String(entityCollectionId))}`, hostingEntitiesTenantInfo, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantInfoRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantInfoRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantInfoRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantInfoRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantInfoRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantRESTControllerCreate(hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Create`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerCreate_1(contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Create`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerGetByObjectId_2(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId_2.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerUpdate(entityCollectionId, hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Update/${encodeURIComponent(String(entityCollectionId))}`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerUpdate_3(contentCollectionId, contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate_3.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\nconst APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MetadataService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantInfoRESTService, TenantRESTService];\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermission;\r\n(function (ContentEntitiesACEPermission) {\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(ContentEntitiesACEPermission || (ContentEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionScope;\r\n(function (ContentEntitiesACEPermissionScope) {\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(ContentEntitiesACEPermissionScope || (ContentEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionType;\r\n(function (ContentEntitiesACEPermissionType) {\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n})(ContentEntitiesACEPermissionType || (ContentEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesTenantIdentifierStrategyName;\r\n(function (ContentEntitiesTenantIdentifierStrategyName) {\r\n    ContentEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(ContentEntitiesTenantIdentifierStrategyName || (ContentEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmContainerElementKind;\r\n(function (EdmEdmContainerElementKind) {\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(EdmEdmContainerElementKind || (EdmEdmContainerElementKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmExpressionKind;\r\n(function (EdmEdmExpressionKind) {\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_9\"] = 9] = \"NUMBER_9\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_10\"] = 10] = \"NUMBER_10\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_11\"] = 11] = \"NUMBER_11\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_12\"] = 12] = \"NUMBER_12\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_13\"] = 13] = \"NUMBER_13\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_14\"] = 14] = \"NUMBER_14\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_15\"] = 15] = \"NUMBER_15\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_16\"] = 16] = \"NUMBER_16\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_17\"] = 17] = \"NUMBER_17\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_18\"] = 18] = \"NUMBER_18\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_19\"] = 19] = \"NUMBER_19\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_20\"] = 20] = \"NUMBER_20\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_21\"] = 21] = \"NUMBER_21\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_22\"] = 22] = \"NUMBER_22\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_23\"] = 23] = \"NUMBER_23\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_24\"] = 24] = \"NUMBER_24\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_25\"] = 25] = \"NUMBER_25\";\r\n})(EdmEdmExpressionKind || (EdmEdmExpressionKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmSchemaElementKind;\r\n(function (EdmEdmSchemaElementKind) {\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(EdmEdmSchemaElementKind || (EdmEdmSchemaElementKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmTypeKind;\r\n(function (EdmEdmTypeKind) {\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_9\"] = 9] = \"NUMBER_9\";\r\n})(EdmEdmTypeKind || (EdmEdmTypeKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermission;\r\n(function (HostingEntitiesACEPermission) {\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(HostingEntitiesACEPermission || (HostingEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionScope;\r\n(function (HostingEntitiesACEPermissionScope) {\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(HostingEntitiesACEPermissionScope || (HostingEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionType;\r\n(function (HostingEntitiesACEPermissionType) {\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(HostingEntitiesACEPermissionType || (HostingEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesTenantIdentifierStrategyName;\r\n(function (HostingEntitiesTenantIdentifierStrategyName) {\r\n    HostingEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(HostingEntitiesTenantIdentifierStrategyName || (HostingEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ApiModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: i1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, ContentCollectionRESTService, ContentCollectionService, ContentEntitiesACEPermission, ContentEntitiesACEPermissionScope, ContentEntitiesACEPermissionType, ContentEntitiesTenantIdentifierStrategyName, EdmEdmContainerElementKind, EdmEdmExpressionKind, EdmEdmSchemaElementKind, EdmEdmTypeKind, FilesystemAssetRESTService, FilesystemAssetService, HolonymRESTService, HolonymService, HorselessContentService, HorselessSessionRESTService, HorselessSessionService, HostingEntitiesACEPermission, HostingEntitiesACEPermissionScope, HostingEntitiesACEPermissionType, HostingEntitiesTenantIdentifierStrategyName, JSONAssetRESTService, JSONAssetService, KeycloakAuthenticationService, MeronymRESTService, MeronymService, MetadataService, MimeTypeRESTService, NavigationMenuItemRESTService, NavigationMenuItemService, NavigationMenuRESTService, NavigationMenuService, TenantInfoRESTService, TenantRESTService, TenantService };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib-src-horseless-contentapirr.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib-src-horseless-contentapirr.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/encoder.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/variables.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/contentCollection.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/contentCollectionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/filesystemAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/filesystemAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/holonym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/holonymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/horselessContent.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/horselessSession.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/horselessSessionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/jSONAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/jSONAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/keycloakAuthentication.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/meronym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/meronymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/metadata.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/mimeTypeREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenu.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenuItem.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenuItemREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenuREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/tenant.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/tenantInfoREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/tenantREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmContainerElementKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmExpressionKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmSchemaElementKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmTypeKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/mvcProblemDetails.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/oDataODataTypeAnnotation.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/wizardcontroller-horseless-contentapi-lib-src-horseless-contentapirr.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\r\n\r\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\r\n    encodeKey(k: string): string {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v: string): string {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k: string): string {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v: string): string {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport interface ConfigurationParameters {\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n    encoder?: HttpParameterCodec;\r\n    /**\r\n     * The keys are the names in the securitySchemes section of the OpenAPI\r\n     * document. They should map to the value used for authentication\r\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\r\n     */\r\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\r\n}\r\n\r\nexport class Configuration {\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n    encoder?: HttpParameterCodec;\r\n    /**\r\n     * The keys are the names in the securitySchemes section of the OpenAPI\r\n     * document. They should map to the value used for authentication\r\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\r\n     */\r\n    credentials: {[ key: string ]: string | (() => string | undefined)};\r\n\r\n    constructor(configurationParameters: ConfigurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderAccept(accepts: string[]): string | undefined {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const type = accepts.find((x: string) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n\r\n    public lookupCredential(key: string): string | undefined {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContentCollectionService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesContentCollection>>;\r\n    public contentCollectionControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesContentCollection>>(`${this.configuration.basePath}/HorselessContent/ContentCollection`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesContentCollection>>;\r\n    public contentCollectionControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesContentCollection>>(`${this.configuration.basePath}/HorselessContent/ContentCollection/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContentCollectionRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesContentCollection \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Create`,\r\n            contentEntitiesContentCollection,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\r\n        if (objectId !== undefined && objectId !== null) {\r\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\r\n            <any>objectId, 'objectId');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                params: localVarQueryParameters,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesContentCollection \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesContentCollection,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilesystemAssetService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesFilesystemAsset>>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesFilesystemAsset>>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilesystemAssetRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesFilesystemAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Create`,\r\n            contentEntitiesFilesystemAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesFilesystemAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesFilesystemAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HolonymService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHolonym>>;\r\n    public holonymControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHolonym>>(`${this.configuration.basePath}/HorselessContent/Holonym`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHolonym>>;\r\n    public holonymControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHolonym>>(`${this.configuration.basePath}/HorselessContent/Holonym/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HolonymRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesHolonym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Create`,\r\n            contentEntitiesHolonym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesHolonym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesHolonym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHorselessContent } from '../model/contentEntitiesHorselessContent';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HorselessContentService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessContentControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessContent>>;\r\n    public horselessContentControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessContent>>(`${this.configuration.basePath}/HorselessContent/HorselessContent`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessContentControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessContent>>;\r\n    public horselessContentControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessContent>>(`${this.configuration.basePath}/HorselessContent/HorselessContent/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HorselessSessionService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessSession>>;\r\n    public horselessSessionControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessSession>>(`${this.configuration.basePath}/HorselessContent/HorselessSession`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessSession>>;\r\n    public horselessSessionControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessSession>>(`${this.configuration.basePath}/HorselessContent/HorselessSession/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\r\n// @ts-ignore\r\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HorselessSessionRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesHorselessSession \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Create`,\r\n            contentEntitiesHorselessSession,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesHorselessSession \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesHorselessSession,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JSONAssetService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesJSONAsset>>(`${this.configuration.basePath}/HorselessContent/JSONAsset`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesJSONAsset>>(`${this.configuration.basePath}/HorselessContent/JSONAsset/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JSONAssetRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesJSONAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Create`,\r\n            contentEntitiesJSONAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesJSONAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesJSONAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KeycloakAuthenticationService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public keycloakAuthenticationControllerSignIn(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\r\n    public keycloakAuthenticationControllerSignIn(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\r\n    public keycloakAuthenticationControllerSignIn(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\r\n    public keycloakAuthenticationControllerSignIn(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param provider \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'multipart/form-data'\r\n        ];\r\n\r\n        const canConsumeForm = this.canConsumeForm(consumes);\r\n\r\n        let localVarFormParams: { append(param: string, value: any): any; };\r\n        let localVarUseForm = false;\r\n        let localVarConvertFormParamsToString = false;\r\n        if (localVarUseForm) {\r\n            localVarFormParams = new FormData();\r\n        } else {\r\n            localVarFormParams = new HttpParams({encoder: this.encoder});\r\n        }\r\n\r\n        if (provider !== undefined) {\r\n            localVarFormParams = localVarFormParams.append('provider', <any>provider) as any || localVarFormParams;\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\r\n            localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/Signout`,\r\n            null,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MeronymService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMeronym>>;\r\n    public meronymControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesMeronym>>(`${this.configuration.basePath}/HorselessContent/Meronym`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMeronym>>;\r\n    public meronymControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesMeronym>>(`${this.configuration.basePath}/HorselessContent/Meronym/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MeronymRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesMeronym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Create`,\r\n            contentEntitiesMeronym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesMeronym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesMeronym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { EdmIEdmModel } from '../model/edmIEdmModel';\r\n// @ts-ignore\r\nimport { ODataODataServiceDocument } from '../model/oDataODataServiceDocument';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetMetadata(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<EdmIEdmModel>;\r\n    public metadataControllerGetMetadata(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<EdmIEdmModel>(`${this.configuration.basePath}/HorselessContent/$metadata`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetMetadata_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<EdmIEdmModel>;\r\n    public metadataControllerGetMetadata_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<EdmIEdmModel>(`${this.configuration.basePath}/HorselessHosting/$metadata`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetServiceDocument(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ODataODataServiceDocument>;\r\n    public metadataControllerGetServiceDocument(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ODataODataServiceDocument>(`${this.configuration.basePath}/HorselessContent`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetServiceDocument_2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ODataODataServiceDocument>;\r\n    public metadataControllerGetServiceDocument_2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument_2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument_2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ODataODataServiceDocument>(`${this.configuration.basePath}/HorselessHosting`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MimeTypeRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesMIMEType \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Create`,\r\n            contentEntitiesMIMEType,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesMIMEType \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesMIMEType,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenu>>;\r\n    public navigationMenuControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenu>>(`${this.configuration.basePath}/HorselessContent/NavigationMenu`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenu>>;\r\n    public navigationMenuControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenu>>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuItemService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenuItem>>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenuItem>>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuItemRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesNavigationMenuItem \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Create`,\r\n            contentEntitiesNavigationMenuItem,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesNavigationMenuItem \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesNavigationMenuItem,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesNavigationMenu \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Create`,\r\n            contentEntitiesNavigationMenu,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesNavigationMenu \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesNavigationMenu,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { HostingEntitiesTenant } from '../model/hostingEntitiesTenant';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<HostingEntitiesTenant>>;\r\n    public tenantControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<HostingEntitiesTenant>>(`${this.configuration.basePath}/HorselessHosting/Tenant`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<HostingEntitiesTenant>>;\r\n    public tenantControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<HostingEntitiesTenant>>(`${this.configuration.basePath}/HorselessContent/Tenant`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantControllerGet_2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<HostingEntitiesTenant>>;\r\n    public tenantControllerGet_2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<HostingEntitiesTenant>>(`${this.configuration.basePath}/HorselessContent/Tenant/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { HostingEntitiesTenantInfo } from '../model/hostingEntitiesTenantInfo';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantInfoRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param hostingEntitiesTenantInfo \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenantInfo>;\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenantInfo>(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Create`,\r\n            hostingEntitiesTenantInfo,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenantInfo>;\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantInfoRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<HostingEntitiesTenantInfo>(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param entityCollectionId \r\n     * @param hostingEntitiesTenantInfo \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenantInfo>;\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantInfoRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenantInfo>(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Update/${encodeURIComponent(String(entityCollectionId))}`,\r\n            hostingEntitiesTenantInfo,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesTenant } from '../model/contentEntitiesTenant';\r\n// @ts-ignore\r\nimport { HostingEntitiesTenant } from '../model/hostingEntitiesTenant';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param hostingEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenant>;\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenant>(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Create`,\r\n            hostingEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Create`,\r\n            contentEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenant>;\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<HostingEntitiesTenant>(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId_2.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesTenant>(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param entityCollectionId \r\n     * @param hostingEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenant>;\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenant>(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Update/${encodeURIComponent(String(entityCollectionId))}`,\r\n            hostingEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate_3.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","export * from './contentCollection.service';\r\nimport { ContentCollectionService } from './contentCollection.service';\r\nexport * from './contentCollectionREST.service';\r\nimport { ContentCollectionRESTService } from './contentCollectionREST.service';\r\nexport * from './filesystemAsset.service';\r\nimport { FilesystemAssetService } from './filesystemAsset.service';\r\nexport * from './filesystemAssetREST.service';\r\nimport { FilesystemAssetRESTService } from './filesystemAssetREST.service';\r\nexport * from './holonym.service';\r\nimport { HolonymService } from './holonym.service';\r\nexport * from './holonymREST.service';\r\nimport { HolonymRESTService } from './holonymREST.service';\r\nexport * from './horselessContent.service';\r\nimport { HorselessContentService } from './horselessContent.service';\r\nexport * from './horselessSession.service';\r\nimport { HorselessSessionService } from './horselessSession.service';\r\nexport * from './horselessSessionREST.service';\r\nimport { HorselessSessionRESTService } from './horselessSessionREST.service';\r\nexport * from './jSONAsset.service';\r\nimport { JSONAssetService } from './jSONAsset.service';\r\nexport * from './jSONAssetREST.service';\r\nimport { JSONAssetRESTService } from './jSONAssetREST.service';\r\nexport * from './keycloakAuthentication.service';\r\nimport { KeycloakAuthenticationService } from './keycloakAuthentication.service';\r\nexport * from './meronym.service';\r\nimport { MeronymService } from './meronym.service';\r\nexport * from './meronymREST.service';\r\nimport { MeronymRESTService } from './meronymREST.service';\r\nexport * from './metadata.service';\r\nimport { MetadataService } from './metadata.service';\r\nexport * from './mimeTypeREST.service';\r\nimport { MimeTypeRESTService } from './mimeTypeREST.service';\r\nexport * from './navigationMenu.service';\r\nimport { NavigationMenuService } from './navigationMenu.service';\r\nexport * from './navigationMenuItem.service';\r\nimport { NavigationMenuItemService } from './navigationMenuItem.service';\r\nexport * from './navigationMenuItemREST.service';\r\nimport { NavigationMenuItemRESTService } from './navigationMenuItemREST.service';\r\nexport * from './navigationMenuREST.service';\r\nimport { NavigationMenuRESTService } from './navigationMenuREST.service';\r\nexport * from './tenant.service';\r\nimport { TenantService } from './tenant.service';\r\nexport * from './tenantInfoREST.service';\r\nimport { TenantInfoRESTService } from './tenantInfoREST.service';\r\nexport * from './tenantREST.service';\r\nimport { TenantRESTService } from './tenantREST.service';\r\nexport const APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MetadataService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantInfoRESTService, TenantRESTService];\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesACEPermission {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesACEPermissionScope {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesACEPermissionType {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesTenantIdentifierStrategyName {\r\n    static = 'STATIC',\r\n    basePath = 'BASE_PATH',\r\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\r\n    dnsHostname = 'DNS_HOSTNAME',\r\n    dnsFqdn = 'DNS_FQDN'\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmContainerElementKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmExpressionKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8,\r\n    NUMBER_9 = 9,\r\n    NUMBER_10 = 10,\r\n    NUMBER_11 = 11,\r\n    NUMBER_12 = 12,\r\n    NUMBER_13 = 13,\r\n    NUMBER_14 = 14,\r\n    NUMBER_15 = 15,\r\n    NUMBER_16 = 16,\r\n    NUMBER_17 = 17,\r\n    NUMBER_18 = 18,\r\n    NUMBER_19 = 19,\r\n    NUMBER_20 = 20,\r\n    NUMBER_21 = 21,\r\n    NUMBER_22 = 22,\r\n    NUMBER_23 = 23,\r\n    NUMBER_24 = 24,\r\n    NUMBER_25 = 25\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmSchemaElementKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmTypeKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8,\r\n    NUMBER_9 = 9\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesACEPermission {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesACEPermissionScope {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesACEPermissionType {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesTenantIdentifierStrategyName {\r\n    static = 'STATIC',\r\n    basePath = 'BASE_PATH',\r\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\r\n    dnsHostname = 'DNS_HOSTNAME',\r\n    dnsFqdn = 'DNS_FQDN'\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport interface MvcProblemDetails { \r\n  [key: string]: any | any;\r\n\r\n\r\n    type?: string | null;\r\n    title?: string | null;\r\n    status?: number | null;\r\n    detail?: string | null;\r\n    instance?: string | null;\r\n}\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport interface ODataODataTypeAnnotation { \r\n    typeName?: string | null;\r\n}\r\n\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { Configuration } from './configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ContentCollectionService } from './api/contentCollection.service';\r\nimport { ContentCollectionRESTService } from './api/contentCollectionREST.service';\r\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\r\nimport { FilesystemAssetRESTService } from './api/filesystemAssetREST.service';\r\nimport { HolonymService } from './api/holonym.service';\r\nimport { HolonymRESTService } from './api/holonymREST.service';\r\nimport { HorselessContentService } from './api/horselessContent.service';\r\nimport { HorselessSessionService } from './api/horselessSession.service';\r\nimport { HorselessSessionRESTService } from './api/horselessSessionREST.service';\r\nimport { JSONAssetService } from './api/jSONAsset.service';\r\nimport { JSONAssetRESTService } from './api/jSONAssetREST.service';\r\nimport { KeycloakAuthenticationService } from './api/keycloakAuthentication.service';\r\nimport { MeronymService } from './api/meronym.service';\r\nimport { MeronymRESTService } from './api/meronymREST.service';\r\nimport { MetadataService } from './api/metadata.service';\r\nimport { MimeTypeRESTService } from './api/mimeTypeREST.service';\r\nimport { NavigationMenuService } from './api/navigationMenu.service';\r\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\r\nimport { NavigationMenuItemRESTService } from './api/navigationMenuItemREST.service';\r\nimport { NavigationMenuRESTService } from './api/navigationMenuREST.service';\r\nimport { TenantService } from './api/tenant.service';\r\nimport { TenantInfoRESTService } from './api/tenantInfoREST.service';\r\nimport { TenantRESTService } from './api/tenantREST.service';\r\n\r\n@NgModule({\r\n  imports:      [],\r\n  declarations: [],\r\n  exports:      [],\r\n  providers: []\r\n})\r\nexport class ApiModule {\r\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\r\n        };\r\n    }\r\n\r\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\r\n                 @Optional() http: HttpClient) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n            'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\n\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nclass CustomHttpParameterCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\r\nconst COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n};\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionRESTControllerCreate(contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Create`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerUpdate(contentCollectionId, contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Create`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerUpdate(contentCollectionId, contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymRESTControllerCreate(contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Create`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerUpdate(contentCollectionId, contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionRESTControllerCreate(contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Create`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerUpdate(contentCollectionId, contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetRESTControllerCreate(contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Create`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerUpdate(contentCollectionId, contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass KeycloakAuthenticationService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    canConsumeForm(consumes) {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    keycloakAuthenticationControllerSignIn(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/Keycloak/SignIn`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignIn_1(provider, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'multipart/form-data'\r\n        ];\r\n        const canConsumeForm = this.canConsumeForm(consumes);\r\n        let localVarFormParams;\r\n        let localVarUseForm = false;\r\n        let localVarConvertFormParamsToString = false;\r\n        if (localVarUseForm) {\r\n            localVarFormParams = new FormData();\r\n        }\r\n        else {\r\n            localVarFormParams = new HttpParams({ encoder: this.encoder });\r\n        }\r\n        if (provider !== undefined) {\r\n            localVarFormParams = localVarFormParams.append('provider', provider) || localVarFormParams;\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/SignIn`, localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignOutCurrentUser(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/Signout`, null, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nKeycloakAuthenticationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nKeycloakAuthenticationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymRESTControllerCreate(contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Create`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerUpdate(contentCollectionId, contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MetadataService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    metadataControllerGetMetadata(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/$metadata`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    metadataControllerGetMetadata_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/$metadata`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    metadataControllerGetServiceDocument(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    metadataControllerGetServiceDocument_2(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMetadataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MetadataService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMetadataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MetadataService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MetadataService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    mimeTypeRESTControllerCreate(contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Create`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerUpdate(contentCollectionId, contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Create`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Create`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_2(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantInfoRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Create`, hostingEntitiesTenantInfo, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantInfoRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantInfoRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantInfoRESTControllerUpdate(entityCollectionId, hostingEntitiesTenantInfo, observe = 'body', reportProgress = false, options) {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantInfoRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Update/${encodeURIComponent(String(entityCollectionId))}`, hostingEntitiesTenantInfo, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantInfoRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantInfoRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantInfoRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantInfoRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantInfoRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantRESTControllerCreate(hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Create`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerCreate_1(contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Create`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerGetByObjectId_2(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId_2.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerUpdate(entityCollectionId, hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Update/${encodeURIComponent(String(entityCollectionId))}`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerUpdate_3(contentCollectionId, contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate_3.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Update/${encodeURIComponent(String(contentCollectionId))}`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\nconst APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MetadataService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantInfoRESTService, TenantRESTService];\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermission;\r\n(function (ContentEntitiesACEPermission) {\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(ContentEntitiesACEPermission || (ContentEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionScope;\r\n(function (ContentEntitiesACEPermissionScope) {\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(ContentEntitiesACEPermissionScope || (ContentEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionType;\r\n(function (ContentEntitiesACEPermissionType) {\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n})(ContentEntitiesACEPermissionType || (ContentEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesTenantIdentifierStrategyName;\r\n(function (ContentEntitiesTenantIdentifierStrategyName) {\r\n    ContentEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(ContentEntitiesTenantIdentifierStrategyName || (ContentEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmContainerElementKind;\r\n(function (EdmEdmContainerElementKind) {\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmContainerElementKind[EdmEdmContainerElementKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(EdmEdmContainerElementKind || (EdmEdmContainerElementKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmExpressionKind;\r\n(function (EdmEdmExpressionKind) {\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_9\"] = 9] = \"NUMBER_9\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_10\"] = 10] = \"NUMBER_10\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_11\"] = 11] = \"NUMBER_11\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_12\"] = 12] = \"NUMBER_12\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_13\"] = 13] = \"NUMBER_13\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_14\"] = 14] = \"NUMBER_14\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_15\"] = 15] = \"NUMBER_15\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_16\"] = 16] = \"NUMBER_16\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_17\"] = 17] = \"NUMBER_17\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_18\"] = 18] = \"NUMBER_18\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_19\"] = 19] = \"NUMBER_19\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_20\"] = 20] = \"NUMBER_20\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_21\"] = 21] = \"NUMBER_21\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_22\"] = 22] = \"NUMBER_22\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_23\"] = 23] = \"NUMBER_23\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_24\"] = 24] = \"NUMBER_24\";\r\n    EdmEdmExpressionKind[EdmEdmExpressionKind[\"NUMBER_25\"] = 25] = \"NUMBER_25\";\r\n})(EdmEdmExpressionKind || (EdmEdmExpressionKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmSchemaElementKind;\r\n(function (EdmEdmSchemaElementKind) {\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    EdmEdmSchemaElementKind[EdmEdmSchemaElementKind[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(EdmEdmSchemaElementKind || (EdmEdmSchemaElementKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar EdmEdmTypeKind;\r\n(function (EdmEdmTypeKind) {\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n    EdmEdmTypeKind[EdmEdmTypeKind[\"NUMBER_9\"] = 9] = \"NUMBER_9\";\r\n})(EdmEdmTypeKind || (EdmEdmTypeKind = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermission;\r\n(function (HostingEntitiesACEPermission) {\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(HostingEntitiesACEPermission || (HostingEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionScope;\r\n(function (HostingEntitiesACEPermissionScope) {\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(HostingEntitiesACEPermissionScope || (HostingEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionType;\r\n(function (HostingEntitiesACEPermissionType) {\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(HostingEntitiesACEPermissionType || (HostingEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesTenantIdentifierStrategyName;\r\n(function (HostingEntitiesTenantIdentifierStrategyName) {\r\n    HostingEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(HostingEntitiesTenantIdentifierStrategyName || (HostingEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: ApiModule, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: SkipSelf\r\n                    }] }, { type: i1.HttpClient, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, ContentCollectionRESTService, ContentCollectionService, ContentEntitiesACEPermission, ContentEntitiesACEPermissionScope, ContentEntitiesACEPermissionType, ContentEntitiesTenantIdentifierStrategyName, EdmEdmContainerElementKind, EdmEdmExpressionKind, EdmEdmSchemaElementKind, EdmEdmTypeKind, FilesystemAssetRESTService, FilesystemAssetService, HolonymRESTService, HolonymService, HorselessContentService, HorselessSessionRESTService, HorselessSessionService, HostingEntitiesACEPermission, HostingEntitiesACEPermissionScope, HostingEntitiesACEPermissionType, HostingEntitiesTenantIdentifierStrategyName, JSONAssetRESTService, JSONAssetService, KeycloakAuthenticationService, MeronymRESTService, MeronymService, MetadataService, MimeTypeRESTService, NavigationMenuItemRESTService, NavigationMenuItemService, NavigationMenuRESTService, NavigationMenuService, TenantInfoRESTService, TenantRESTService, TenantService };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib-src-horseless-contentapirr.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib-src-horseless-contentapirr.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/encoder.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/variables.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/contentCollection.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/contentCollectionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/filesystemAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/filesystemAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/holonym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/holonymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/horselessContent.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/horselessSession.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/horselessSessionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/jSONAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/jSONAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/keycloakAuthentication.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/meronym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/meronymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/metadata.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/mimeTypeREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenu.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenuItem.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenuItemREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/navigationMenuREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/tenant.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/tenantInfoREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/tenantREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api/api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/contentEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmContainerElementKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmExpressionKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmSchemaElementKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/edmEdmTypeKind.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/model/hostingEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapirr/wizardcontroller-horseless-contentapi-lib-src-horseless-contentapirr.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\r\n\r\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\r\n    encodeKey(k: string): string {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v: string): string {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k: string): string {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v: string): string {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport interface ConfigurationParameters {\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n    encoder?: HttpParameterCodec;\r\n    /**\r\n     * The keys are the names in the securitySchemes section of the OpenAPI\r\n     * document. They should map to the value used for authentication\r\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\r\n     */\r\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\r\n}\r\n\r\nexport class Configuration {\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    /**\r\n     *  @deprecated Since 5.0. Use credentials instead\r\n     */\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n    encoder?: HttpParameterCodec;\r\n    /**\r\n     * The keys are the names in the securitySchemes section of the OpenAPI\r\n     * document. They should map to the value used for authentication\r\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\r\n     */\r\n    credentials: {[ key: string ]: string | (() => string | undefined)};\r\n\r\n    constructor(configurationParameters: ConfigurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderAccept(accepts: string[]): string | undefined {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const type = accepts.find((x: string) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n\r\n    public lookupCredential(key: string): string | undefined {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContentCollectionService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesContentCollection>>;\r\n    public contentCollectionControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesContentCollection>>(`${this.configuration.basePath}/HorselessContent/ContentCollection`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesContentCollection>>;\r\n    public contentCollectionControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesContentCollection>>>;\r\n    public contentCollectionControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesContentCollection>>(`${this.configuration.basePath}/HorselessContent/ContentCollection/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContentCollectionRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesContentCollection \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Create`,\r\n            contentEntitiesContentCollection,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerGetByObjectId(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\r\n        if (objectId !== undefined && objectId !== null) {\r\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\r\n            <any>objectId, 'objectId');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                params: localVarQueryParameters,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesContentCollection \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/ContentCollection/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesContentCollection,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilesystemAssetService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesFilesystemAsset>>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesFilesystemAsset>>>;\r\n    public filesystemAssetControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesFilesystemAsset>>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilesystemAssetRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesFilesystemAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Create`,\r\n            contentEntitiesFilesystemAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesFilesystemAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\r\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/HorselessContentModel/FilesystemAsset/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesFilesystemAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HolonymService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHolonym>>;\r\n    public holonymControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHolonym>>(`${this.configuration.basePath}/HorselessContent/Holonym`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHolonym>>;\r\n    public holonymControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHolonym>>>;\r\n    public holonymControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHolonym>>(`${this.configuration.basePath}/HorselessContent/Holonym/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HolonymRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesHolonym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Create`,\r\n            contentEntitiesHolonym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesHolonym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\r\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/HorselessContentModel/Holonym/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesHolonym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHorselessContent } from '../model/contentEntitiesHorselessContent';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HorselessContentService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessContentControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessContent>>;\r\n    public horselessContentControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessContent>>(`${this.configuration.basePath}/HorselessContent/HorselessContent`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessContentControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessContent>>;\r\n    public horselessContentControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessContent>>>;\r\n    public horselessContentControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessContent>>(`${this.configuration.basePath}/HorselessContent/HorselessContent/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HorselessSessionService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessSession>>;\r\n    public horselessSessionControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessSession>>(`${this.configuration.basePath}/HorselessContent/HorselessSession`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessSession>>;\r\n    public horselessSessionControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessSession>>>;\r\n    public horselessSessionControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesHorselessSession>>(`${this.configuration.basePath}/HorselessContent/HorselessSession/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\r\n// @ts-ignore\r\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HorselessSessionRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesHorselessSession \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Create`,\r\n            contentEntitiesHorselessSession,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesHorselessSession \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\r\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessContentModel/HorselessSession/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesHorselessSession,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JSONAssetService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesJSONAsset>>(`${this.configuration.basePath}/HorselessContent/JSONAsset`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesJSONAsset>>>;\r\n    public jSONAssetControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesJSONAsset>>(`${this.configuration.basePath}/HorselessContent/JSONAsset/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JSONAssetRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesJSONAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Create`,\r\n            contentEntitiesJSONAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesJSONAsset \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\r\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/HorselessContentModel/JSONAsset/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesJSONAsset,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KeycloakAuthenticationService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public keycloakAuthenticationControllerSignIn(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\r\n    public keycloakAuthenticationControllerSignIn(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\r\n    public keycloakAuthenticationControllerSignIn(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\r\n    public keycloakAuthenticationControllerSignIn(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param provider \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\r\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'multipart/form-data'\r\n        ];\r\n\r\n        const canConsumeForm = this.canConsumeForm(consumes);\r\n\r\n        let localVarFormParams: { append(param: string, value: any): any; };\r\n        let localVarUseForm = false;\r\n        let localVarConvertFormParamsToString = false;\r\n        if (localVarUseForm) {\r\n            localVarFormParams = new FormData();\r\n        } else {\r\n            localVarFormParams = new HttpParams({encoder: this.encoder});\r\n        }\r\n\r\n        if (provider !== undefined) {\r\n            localVarFormParams = localVarFormParams.append('provider', <any>provider) as any || localVarFormParams;\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\r\n            localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\r\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/Signout`,\r\n            null,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MeronymService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMeronym>>;\r\n    public meronymControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesMeronym>>(`${this.configuration.basePath}/HorselessContent/Meronym`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMeronym>>;\r\n    public meronymControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMeronym>>>;\r\n    public meronymControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesMeronym>>(`${this.configuration.basePath}/HorselessContent/Meronym/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MeronymRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesMeronym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Create`,\r\n            contentEntitiesMeronym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesMeronym \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\r\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/HorselessContentModel/Meronym/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesMeronym,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { EdmIEdmModel } from '../model/edmIEdmModel';\r\n// @ts-ignore\r\nimport { ODataODataServiceDocument } from '../model/oDataODataServiceDocument';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MetadataService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetMetadata(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<EdmIEdmModel>;\r\n    public metadataControllerGetMetadata(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<EdmIEdmModel>(`${this.configuration.basePath}/HorselessContent/$metadata`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetMetadata_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<EdmIEdmModel>;\r\n    public metadataControllerGetMetadata_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<EdmIEdmModel>>;\r\n    public metadataControllerGetMetadata_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<EdmIEdmModel>(`${this.configuration.basePath}/HorselessHosting/$metadata`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetServiceDocument(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ODataODataServiceDocument>;\r\n    public metadataControllerGetServiceDocument(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ODataODataServiceDocument>(`${this.configuration.basePath}/HorselessContent`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public metadataControllerGetServiceDocument_2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ODataODataServiceDocument>;\r\n    public metadataControllerGetServiceDocument_2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument_2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ODataODataServiceDocument>>;\r\n    public metadataControllerGetServiceDocument_2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ODataODataServiceDocument>(`${this.configuration.basePath}/HorselessHosting`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MimeTypeRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesMIMEType \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Create`,\r\n            contentEntitiesMIMEType,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesMIMEType \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModel/MIMEType/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesMIMEType,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenu>>;\r\n    public navigationMenuControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenu>>(`${this.configuration.basePath}/HorselessContent/NavigationMenu`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenu>>;\r\n    public navigationMenuControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenu>>>;\r\n    public navigationMenuControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenu>>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuItemService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenuItem>>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenuItem>>>;\r\n    public navigationMenuItemControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenuItem>>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuItemRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesNavigationMenuItem \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Create`,\r\n            contentEntitiesNavigationMenuItem,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesNavigationMenuItem \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\r\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/HorselessContentModel/NavigationMenuItem/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesNavigationMenuItem,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\r\n// @ts-ignore\r\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationMenuRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesNavigationMenu \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Create`,\r\n            contentEntitiesNavigationMenu,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesNavigationMenu \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\r\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/HorselessContentModelModel/NavigationMenu/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesNavigationMenu,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { HostingEntitiesTenant } from '../model/hostingEntitiesTenant';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<HostingEntitiesTenant>>;\r\n    public tenantControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<HostingEntitiesTenant>>(`${this.configuration.basePath}/HorselessHosting/Tenant`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<HostingEntitiesTenant>>;\r\n    public tenantControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<HostingEntitiesTenant>>(`${this.configuration.basePath}/HorselessContent/Tenant`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantControllerGet_2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<HostingEntitiesTenant>>;\r\n    public tenantControllerGet_2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HostingEntitiesTenant>>>;\r\n    public tenantControllerGet_2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<Array<HostingEntitiesTenant>>(`${this.configuration.basePath}/HorselessContent/Tenant/$count`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { HostingEntitiesTenantInfo } from '../model/hostingEntitiesTenantInfo';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantInfoRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param hostingEntitiesTenantInfo \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenantInfo>;\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerCreate(hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenantInfo>(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Create`,\r\n            hostingEntitiesTenantInfo,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenantInfo>;\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantInfoRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<HostingEntitiesTenantInfo>(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param entityCollectionId \r\n     * @param hostingEntitiesTenantInfo \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenantInfo>;\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenantInfo>>;\r\n    public tenantInfoRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenantInfo?: HostingEntitiesTenantInfo, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantInfoRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenantInfo>(`${this.configuration.basePath}/api/HorselessHostingModel/TenantInfo/Update/${encodeURIComponent(String(entityCollectionId))}`,\r\n            hostingEntitiesTenantInfo,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \r\n        }       from '@angular/common/http';\r\nimport { CustomHttpParameterCodec }                          from '../encoder';\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n// @ts-ignore\r\nimport { ContentEntitiesTenant } from '../model/contentEntitiesTenant';\r\n// @ts-ignore\r\nimport { HostingEntitiesTenant } from '../model/hostingEntitiesTenant';\r\n// @ts-ignore\r\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\r\n\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantRESTService {\r\n\r\n    protected basePath = 'http://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n    public encoder: HttpParameterCodec;\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n\r\n\r\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        } else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            } else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key,\r\n                        (value as Date).toISOString().substr(0, 10));\r\n                } else {\r\n                   throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            } else {\r\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\r\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        } else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        } else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n\r\n    /**\r\n     * @param hostingEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenant>;\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerCreate(hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenant>(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Create`,\r\n            hostingEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerCreate_1(contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Create`,\r\n            contentEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenant>;\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<HostingEntitiesTenant>(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param objectId \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerGetByObjectId_2(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId_2.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.get<ContentEntitiesTenant>(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/GetByObjectId`,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param entityCollectionId \r\n     * @param hostingEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HostingEntitiesTenant>;\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<HostingEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate(entityCollectionId: string, hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (entityCollectionId === null || entityCollectionId === undefined) {\r\n            throw new Error('Required parameter entityCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<HostingEntitiesTenant>(`${this.configuration.basePath}/api/HorselessHostingModel/Tenant/Update/${encodeURIComponent(String(entityCollectionId))}`,\r\n            hostingEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param contentCollectionId \r\n     * @param contentEntitiesTenant \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\r\n    public tenantRESTControllerUpdate_3(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate_3.');\r\n        }\r\n\r\n        let localVarHeaders = this.defaultHeaders;\r\n\r\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts: string[] = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n\r\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        let responseType_: 'text' | 'json' = 'json';\r\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n\r\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/HorselessContentModel/Tenant/Update/${encodeURIComponent(String(contentCollectionId))}`,\r\n            contentEntitiesTenant,\r\n            {\r\n                context: localVarHttpContext,\r\n                responseType: <any>responseType_,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: localVarHeaders,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","export * from './contentCollection.service';\r\nimport { ContentCollectionService } from './contentCollection.service';\r\nexport * from './contentCollectionREST.service';\r\nimport { ContentCollectionRESTService } from './contentCollectionREST.service';\r\nexport * from './filesystemAsset.service';\r\nimport { FilesystemAssetService } from './filesystemAsset.service';\r\nexport * from './filesystemAssetREST.service';\r\nimport { FilesystemAssetRESTService } from './filesystemAssetREST.service';\r\nexport * from './holonym.service';\r\nimport { HolonymService } from './holonym.service';\r\nexport * from './holonymREST.service';\r\nimport { HolonymRESTService } from './holonymREST.service';\r\nexport * from './horselessContent.service';\r\nimport { HorselessContentService } from './horselessContent.service';\r\nexport * from './horselessSession.service';\r\nimport { HorselessSessionService } from './horselessSession.service';\r\nexport * from './horselessSessionREST.service';\r\nimport { HorselessSessionRESTService } from './horselessSessionREST.service';\r\nexport * from './jSONAsset.service';\r\nimport { JSONAssetService } from './jSONAsset.service';\r\nexport * from './jSONAssetREST.service';\r\nimport { JSONAssetRESTService } from './jSONAssetREST.service';\r\nexport * from './keycloakAuthentication.service';\r\nimport { KeycloakAuthenticationService } from './keycloakAuthentication.service';\r\nexport * from './meronym.service';\r\nimport { MeronymService } from './meronym.service';\r\nexport * from './meronymREST.service';\r\nimport { MeronymRESTService } from './meronymREST.service';\r\nexport * from './metadata.service';\r\nimport { MetadataService } from './metadata.service';\r\nexport * from './mimeTypeREST.service';\r\nimport { MimeTypeRESTService } from './mimeTypeREST.service';\r\nexport * from './navigationMenu.service';\r\nimport { NavigationMenuService } from './navigationMenu.service';\r\nexport * from './navigationMenuItem.service';\r\nimport { NavigationMenuItemService } from './navigationMenuItem.service';\r\nexport * from './navigationMenuItemREST.service';\r\nimport { NavigationMenuItemRESTService } from './navigationMenuItemREST.service';\r\nexport * from './navigationMenuREST.service';\r\nimport { NavigationMenuRESTService } from './navigationMenuREST.service';\r\nexport * from './tenant.service';\r\nimport { TenantService } from './tenant.service';\r\nexport * from './tenantInfoREST.service';\r\nimport { TenantInfoRESTService } from './tenantInfoREST.service';\r\nexport * from './tenantREST.service';\r\nimport { TenantRESTService } from './tenantREST.service';\r\nexport const APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MetadataService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantInfoRESTService, TenantRESTService];\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesACEPermission {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesACEPermissionScope {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesACEPermissionType {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum ContentEntitiesTenantIdentifierStrategyName {\r\n    static = 'STATIC',\r\n    basePath = 'BASE_PATH',\r\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\r\n    dnsHostname = 'DNS_HOSTNAME',\r\n    dnsFqdn = 'DNS_FQDN'\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmContainerElementKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmExpressionKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8,\r\n    NUMBER_9 = 9,\r\n    NUMBER_10 = 10,\r\n    NUMBER_11 = 11,\r\n    NUMBER_12 = 12,\r\n    NUMBER_13 = 13,\r\n    NUMBER_14 = 14,\r\n    NUMBER_15 = 15,\r\n    NUMBER_16 = 16,\r\n    NUMBER_17 = 17,\r\n    NUMBER_18 = 18,\r\n    NUMBER_19 = 19,\r\n    NUMBER_20 = 20,\r\n    NUMBER_21 = 21,\r\n    NUMBER_22 = 22,\r\n    NUMBER_23 = 23,\r\n    NUMBER_24 = 24,\r\n    NUMBER_25 = 25\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmSchemaElementKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum EdmEdmTypeKind {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8,\r\n    NUMBER_9 = 9\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesACEPermission {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5,\r\n    NUMBER_6 = 6,\r\n    NUMBER_7 = 7,\r\n    NUMBER_8 = 8\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesACEPermissionScope {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4,\r\n    NUMBER_5 = 5\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesACEPermissionType {\r\n    NUMBER_0 = 0,\r\n    NUMBER_1 = 1,\r\n    NUMBER_2 = 2,\r\n    NUMBER_3 = 3,\r\n    NUMBER_4 = 4\r\n};\r\n\r\n","/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport enum HostingEntitiesTenantIdentifierStrategyName {\r\n    static = 'STATIC',\r\n    basePath = 'BASE_PATH',\r\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\r\n    dnsHostname = 'DNS_HOSTNAME',\r\n    dnsFqdn = 'DNS_FQDN'\r\n};\r\n\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { Configuration } from './configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ContentCollectionService } from './api/contentCollection.service';\r\nimport { ContentCollectionRESTService } from './api/contentCollectionREST.service';\r\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\r\nimport { FilesystemAssetRESTService } from './api/filesystemAssetREST.service';\r\nimport { HolonymService } from './api/holonym.service';\r\nimport { HolonymRESTService } from './api/holonymREST.service';\r\nimport { HorselessContentService } from './api/horselessContent.service';\r\nimport { HorselessSessionService } from './api/horselessSession.service';\r\nimport { HorselessSessionRESTService } from './api/horselessSessionREST.service';\r\nimport { JSONAssetService } from './api/jSONAsset.service';\r\nimport { JSONAssetRESTService } from './api/jSONAssetREST.service';\r\nimport { KeycloakAuthenticationService } from './api/keycloakAuthentication.service';\r\nimport { MeronymService } from './api/meronym.service';\r\nimport { MeronymRESTService } from './api/meronymREST.service';\r\nimport { MetadataService } from './api/metadata.service';\r\nimport { MimeTypeRESTService } from './api/mimeTypeREST.service';\r\nimport { NavigationMenuService } from './api/navigationMenu.service';\r\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\r\nimport { NavigationMenuItemRESTService } from './api/navigationMenuItemREST.service';\r\nimport { NavigationMenuRESTService } from './api/navigationMenuREST.service';\r\nimport { TenantService } from './api/tenant.service';\r\nimport { TenantInfoRESTService } from './api/tenantInfoREST.service';\r\nimport { TenantRESTService } from './api/tenantREST.service';\r\n\r\n@NgModule({\r\n  imports:      [],\r\n  declarations: [],\r\n  exports:      [],\r\n  providers: []\r\n})\r\nexport class ApiModule {\r\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\r\n        };\r\n    }\r\n\r\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\r\n                 @Optional() http: HttpClient) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n            'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}}}