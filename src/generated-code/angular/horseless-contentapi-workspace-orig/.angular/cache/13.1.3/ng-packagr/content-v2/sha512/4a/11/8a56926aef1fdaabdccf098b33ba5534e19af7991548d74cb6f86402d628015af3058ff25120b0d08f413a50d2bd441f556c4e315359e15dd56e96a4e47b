{"hash":"a4dc6baedea7ea219f9a8c9589f95e0be9f3f0d7","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Optional, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\n\nclass HorselessContentapiLibService {\r\n    constructor() { }\r\n}\r\nHorselessContentapiLibService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentapiLibService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass HorselessContentapiLibComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nHorselessContentapiLibComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nHorselessContentapiLibComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: HorselessContentapiLibComponent, selector: \"lib-horseless-contentapi-lib\", ngImport: i0, template: `\n    <p>\n      horseless-contentapi-lib works!\n    </p>\n  `, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'lib-horseless-contentapi-lib',\r\n                    template: `\n    <p>\n      horseless-contentapi-lib works!\n    </p>\n  `,\r\n                    styles: []\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass HorselessContentapiLibModule {\r\n}\r\nHorselessContentapiLibModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nHorselessContentapiLibModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, declarations: [HorselessContentapiLibComponent], exports: [HorselessContentapiLibComponent] });\r\nHorselessContentapiLibModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        HorselessContentapiLibComponent\r\n                    ],\r\n                    imports: [],\r\n                    exports: [\r\n                        HorselessContentapiLibComponent\r\n                    ]\r\n                }]\r\n        }] });\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ApiModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: i1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/*\r\n * Public API Surface of horseless-contentapi-lib\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ApiModule, HorselessContentapiLibComponent, HorselessContentapiLibModule, HorselessContentapiLibService };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/lib/horseless-contentapi-lib.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/lib/horseless-contentapi-lib.component.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/lib/horseless-contentapi-lib.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/public-api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/wizardcontroller-horseless-contentapi-lib.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentapiLibService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-horseless-contentapi-lib',\n  template: `\n    <p>\n      horseless-contentapi-lib works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class HorselessContentapiLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { HorselessContentapiLibComponent } from './horseless-contentapi-lib.component';\n\n\n\n@NgModule({\n  declarations: [\n    HorselessContentapiLibComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    HorselessContentapiLibComponent\n  ]\n})\nexport class HorselessContentapiLibModule { }\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ContentCollectionService } from './api/contentCollection.service';\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\nimport { HolonymService } from './api/holonym.service';\nimport { HorselessContentService } from './api/horselessContent.service';\nimport { HorselessSessionService } from './api/horselessSession.service';\nimport { JSONAssetService } from './api/jSONAsset.service';\nimport { MeronymService } from './api/meronym.service';\nimport { MimeTypeService } from './api/mimeType.service';\nimport { NavigationMenuService } from './api/navigationMenu.service';\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\nimport { TenantService } from './api/tenant.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/*\n * Public API Surface of horseless-contentapi-lib\n */\n\nexport * from './lib/horseless-contentapi-lib.service';\nexport * from './lib/horseless-contentapi-lib.component';\nexport * from './lib/horseless-contentapi-lib.module';\nexport * from './horseless-contentapi/api.module'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Optional, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\n\nclass HorselessContentapiLibService {\r\n    constructor() { }\r\n}\r\nHorselessContentapiLibService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentapiLibService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass HorselessContentapiLibComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nHorselessContentapiLibComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nHorselessContentapiLibComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: HorselessContentapiLibComponent, selector: \"lib-horseless-contentapi-lib\", ngImport: i0, template: `\n    <p>\n      horseless-contentapi-lib works!\n    </p>\n  `, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'lib-horseless-contentapi-lib',\r\n                    template: `\n    <p>\n      horseless-contentapi-lib works!\n    </p>\n  `,\r\n                    styles: []\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass HorselessContentapiLibModule {\r\n}\r\nHorselessContentapiLibModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nHorselessContentapiLibModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, declarations: [HorselessContentapiLibComponent], exports: [HorselessContentapiLibComponent] });\r\nHorselessContentapiLibModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentapiLibModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        HorselessContentapiLibComponent\r\n                    ],\r\n                    imports: [],\r\n                    exports: [\r\n                        HorselessContentapiLibComponent\r\n                    ]\r\n                }]\r\n        }] });\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: ApiModule, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: SkipSelf\r\n                    }] }, { type: i1.HttpClient, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/*\r\n * Public API Surface of horseless-contentapi-lib\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ApiModule, HorselessContentapiLibComponent, HorselessContentapiLibModule, HorselessContentapiLibService };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/lib/horseless-contentapi-lib.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/lib/horseless-contentapi-lib.component.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/lib/horseless-contentapi-lib.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/public-api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/wizardcontroller-horseless-contentapi-lib.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentapiLibService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-horseless-contentapi-lib',\n  template: `\n    <p>\n      horseless-contentapi-lib works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class HorselessContentapiLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { HorselessContentapiLibComponent } from './horseless-contentapi-lib.component';\n\n\n\n@NgModule({\n  declarations: [\n    HorselessContentapiLibComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    HorselessContentapiLibComponent\n  ]\n})\nexport class HorselessContentapiLibModule { }\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ContentCollectionService } from './api/contentCollection.service';\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\nimport { HolonymService } from './api/holonym.service';\nimport { HorselessContentService } from './api/horselessContent.service';\nimport { HorselessSessionService } from './api/horselessSession.service';\nimport { JSONAssetService } from './api/jSONAsset.service';\nimport { MeronymService } from './api/meronym.service';\nimport { MimeTypeService } from './api/mimeType.service';\nimport { NavigationMenuService } from './api/navigationMenu.service';\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\nimport { TenantService } from './api/tenant.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/*\n * Public API Surface of horseless-contentapi-lib\n */\n\nexport * from './lib/horseless-contentapi-lib.service';\nexport * from './lib/horseless-contentapi-lib.component';\nexport * from './lib/horseless-contentapi-lib.module';\nexport * from './horseless-contentapi/api.module'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}