{"hash":"970e12fe91befbe0c8a730548daae3636fa7c476","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\n\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nclass CustomHttpParameterCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\r\nconst COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n};\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/ContentCollection/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentContentCollectionGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentContentCollectionQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentContentCollectionUpdatePost(contentCollectionId, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentContentCollectionUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/ContentCollection/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentFilesystemAssetGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentFilesystemAssetQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentFilesystemAssetUpdatePost(filesystemAssetId, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        if (filesystemAssetId === null || filesystemAssetId === undefined) {\r\n            throw new Error('Required parameter filesystemAssetId was null or undefined when calling horselessContentFilesystemAssetUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Holonym/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHolonymGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHolonymQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHolonymUpdatePost(holonymId, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        if (holonymId === null || holonymId === undefined) {\r\n            throw new Error('Required parameter holonymId was null or undefined when calling horselessContentHolonymUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Holonym/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentHorselessContentGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/content/HorselessContent`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessContent/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentUpdatePost(horselessContentId, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        if (horselessContentId === null || horselessContentId === undefined) {\r\n            throw new Error('Required parameter horselessContentId was null or undefined when calling horselessContentHorselessContentUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessContent/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessSession/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessSessionGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessSessionQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessSessionUpdatePost(horselessSessionId, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        if (horselessSessionId === null || horselessSessionId === undefined) {\r\n            throw new Error('Required parameter horselessSessionId was null or undefined when calling horselessContentHorselessSessionUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessSession/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/JSONAsset/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentJSONAssetGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentJSONAssetQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentJSONAssetUpdatePost(jsonAssetId, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        if (jsonAssetId === null || jsonAssetId === undefined) {\r\n            throw new Error('Required parameter jsonAssetId was null or undefined when calling horselessContentJSONAssetUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/JSONAsset/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Meronym/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMeronymGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMeronymQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMeronymUpdatePost(meronymId, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        if (meronymId === null || meronymId === undefined) {\r\n            throw new Error('Required parameter meronymId was null or undefined when calling horselessContentMeronymUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Meronym/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/MIMEType/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMIMETypeGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/MIMEType/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMIMETypeQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMIMETypeUpdatePost(mimeTypeId, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        if (mimeTypeId === null || mimeTypeId === undefined) {\r\n            throw new Error('Required parameter mimeTypeId was null or undefined when calling horselessContentMIMETypeUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/MIMEType/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuUpdatePost(navigationMenuId, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        if (navigationMenuId === null || navigationMenuId === undefined) {\r\n            throw new Error('Required parameter navigationMenuId was null or undefined when calling horselessContentNavigationMenuUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuItemGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuItemQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        if (navigationMenuItemId === null || navigationMenuItemId === undefined) {\r\n            throw new Error('Required parameter navigationMenuItemId was null or undefined when calling horselessContentNavigationMenuItemUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentTenant(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantCount(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantUpdatePost(contentCollectionId, theHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentTenantUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant`, theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`, theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessHostingTenantQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\nconst APIS = [ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, JSONAssetService, MeronymService, MimeTypeService, NavigationMenuService, NavigationMenuItemService, TenantService];\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission || (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope || (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType || (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName || (TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ApiModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: i1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, JSONAssetService, MeronymService, MimeTypeService, NavigationMenuItemService, NavigationMenuService, TenantService, TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission, TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope, TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType, TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName, TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission, TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope, TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType, TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/encoder.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/variables.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/contentCollection.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/filesystemAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/holonym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessContent.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessSession.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/jSONAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/meronym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/mimeType.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenu.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuItem.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/tenant.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/microsoftAspNetCoreMvcProblemDetails.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesPrincipal.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentCollectionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentContentCollectionUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param filesystemAssetId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (filesystemAssetId === null || filesystemAssetId === undefined) {\n            throw new Error('Required parameter filesystemAssetId was null or undefined when calling horselessContentFilesystemAssetUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesHolonym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HolonymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Holonym/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Holonym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Holonym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param holonymId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (holonymId === null || holonymId === undefined) {\n            throw new Error('Required parameter holonymId was null or undefined when calling horselessContentHolonymUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Holonym/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection } from '../model/horselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection';\n// @ts-ignore\nimport { MicrosoftAspNetCoreMvcProblemDetails } from '../model/microsoftAspNetCoreMvcProblemDetails';\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentHorselessContentGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>;\n    public contentHorselessContentGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>>;\n    public contentHorselessContentGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>>;\n    public contentHorselessContentGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>(`${this.configuration.basePath}/content/HorselessContent`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param horselessContentId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (horselessContentId === null || horselessContentId === undefined) {\n            throw new Error('Required parameter horselessContentId was null or undefined when calling horselessContentHorselessContentUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessSessionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param horselessSessionId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (horselessSessionId === null || horselessSessionId === undefined) {\n            throw new Error('Required parameter horselessSessionId was null or undefined when calling horselessContentHorselessSessionUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param jsonAssetId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (jsonAssetId === null || jsonAssetId === undefined) {\n            throw new Error('Required parameter jsonAssetId was null or undefined when calling horselessContentJSONAssetUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesMeronym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeronymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Meronym/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Meronym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Meronym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param meronymId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (meronymId === null || meronymId === undefined) {\n            throw new Error('Required parameter meronymId was null or undefined when calling horselessContentMeronymUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Meronym/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MimeTypeService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param mimeTypeId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (mimeTypeId === null || mimeTypeId === undefined) {\n            throw new Error('Required parameter mimeTypeId was null or undefined when calling horselessContentMIMETypeUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param navigationMenuId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (navigationMenuId === null || navigationMenuId === undefined) {\n            throw new Error('Required parameter navigationMenuId was null or undefined when calling horselessContentNavigationMenuUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuItemService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param navigationMenuItemId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (navigationMenuItemId === null || navigationMenuItemId === undefined) {\n            throw new Error('Required parameter navigationMenuItemId was null or undefined when calling horselessContentNavigationMenuItemUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesTenant } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesTenant';\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant } from '../model/theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TenantService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenant(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenant(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenant(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenant(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantCount(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantCount(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantCount(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantCount(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/$count`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentTenantUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`,\n            theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessHostingTenantQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessHostingTenantQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessHostingTenantQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessHostingTenantQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './contentCollection.service';\nimport { ContentCollectionService } from './contentCollection.service';\nexport * from './filesystemAsset.service';\nimport { FilesystemAssetService } from './filesystemAsset.service';\nexport * from './holonym.service';\nimport { HolonymService } from './holonym.service';\nexport * from './horselessContent.service';\nimport { HorselessContentService } from './horselessContent.service';\nexport * from './horselessSession.service';\nimport { HorselessSessionService } from './horselessSession.service';\nexport * from './jSONAsset.service';\nimport { JSONAssetService } from './jSONAsset.service';\nexport * from './meronym.service';\nimport { MeronymService } from './meronym.service';\nexport * from './mimeType.service';\nimport { MimeTypeService } from './mimeType.service';\nexport * from './navigationMenu.service';\nimport { NavigationMenuService } from './navigationMenu.service';\nexport * from './navigationMenuItem.service';\nimport { NavigationMenuItemService } from './navigationMenuItem.service';\nexport * from './tenant.service';\nimport { TenantService } from './tenant.service';\nexport const APIS = [ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, JSONAssetService, MeronymService, MimeTypeService, NavigationMenuService, NavigationMenuItemService, TenantService];\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface MicrosoftAspNetCoreMvcProblemDetails { \n  [key: string]: any | any;\n\n\n    type?: string | null;\n    title?: string | null;\n    status?: number | null;\n    detail?: string | null;\n    instance?: string | null;\n}\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TheHorselessNewspaperSchemasHostingModelHostingEntitiesPrincipal { \n    id?: string;\n    displayName?: string | null;\n    objectId: string;\n    isSoftDeleted?: boolean | null;\n    createdAt?: string | null;\n    iss?: string | null;\n    aud?: string | null;\n    sub?: string | null;\n}\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ContentCollectionService } from './api/contentCollection.service';\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\nimport { HolonymService } from './api/holonym.service';\nimport { HorselessContentService } from './api/horselessContent.service';\nimport { HorselessSessionService } from './api/horselessSession.service';\nimport { JSONAssetService } from './api/jSONAsset.service';\nimport { MeronymService } from './api/meronym.service';\nimport { MimeTypeService } from './api/mimeType.service';\nimport { NavigationMenuService } from './api/navigationMenu.service';\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\nimport { TenantService } from './api/tenant.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;AAEA;;;;MAIa,wBAAwB;IACjC,SAAS,CAAC,CAAS;QACf,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAChC;IACD,WAAW,CAAC,CAAS;QACjB,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAChC;IACD,SAAS,CAAC,CAAS;QACf,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAChC;IACD,WAAW,CAAC,CAAS;QACjB,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAChC;;;MChBQ,SAAS,GAAG,IAAI,cAAc,CAAS,UAAU,EAAE;MACnD,kBAAkB,GAAG;IAC9B,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,GAAG;IACV,OAAO,EAAE,GAAG;;;MCiBH,aAAa;IAqBtB,YAAY,0BAAmD,EAAE;QAC7D,IAAI,CAAC,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC;QAC/D,IAAI,CAAC,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC;QAC/C,IAAI,uBAAuB,CAAC,WAAW,EAAE;YACrC,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC;SAC1D;aACI;YACD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;SACzB;KACJ;;;;;;;;IASM,uBAAuB,CAAE,YAAsB;QAClD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAS,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;IASM,kBAAkB,CAAC,OAAiB;QACvC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAS,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;SACrB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;IAYM,UAAU,CAAC,IAAY;QAC1B,MAAM,QAAQ,GAAW,IAAI,MAAM,CAAC,+DAA+D,EAAE,GAAG,CAAC,CAAC;QAC1G,OAAO,IAAI,KAAK,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,6BAA6B,CAAC,CAAC;KACzG;IAEM,gBAAgB,CAAC,GAAW;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACpC,OAAO,OAAO,KAAK,KAAK,UAAU;cAC5B,KAAK,EAAE;cACP,KAAK,CAAC;KACf;;;ACvHL;;;;;;;;;;;MAgCa,wBAAwB;IAOjC,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,2CAA2C,CAAC,wEAAmJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE3T,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,4CAA4C,EACvG,wEAAwE,EACxE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,iDAAiD,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE/L,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,mDAAmD,EAC7G;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,yCAAyC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEpK,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2CAA2C,EACrG;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,2CAA2C,CAAC,mBAA2B,EAAE,wEAAmJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QACxV,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnE,MAAM,IAAI,KAAK,CAAC,wHAAwH,CAAC,CAAC;SAC7I;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,4CAA4C,EACvG,wEAAwE,EACxE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;qHA3SQ,wBAAwB,4CAOgC,SAAS;yHAPjE,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,sBAAsB;IAO/B,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,yCAAyC,CAAC,sEAA+I,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAErT,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0CAA0C,EACrG,sEAAsE,EACtE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,+CAA+C,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE7L,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iDAAiD,EAC3G;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,uCAAuC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAElK,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,yCAAyC,EACnG;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,yCAAyC,CAAC,iBAAyB,EAAE,sEAA+I,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAChV,IAAI,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,EAAE;YAC/D,MAAM,IAAI,KAAK,CAAC,oHAAoH,CAAC,CAAC;SACzI;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0CAA0C,EACrG,sEAAsE,EACtE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;mHA3SQ,sBAAsB,4CAOkC,SAAS;uHAPjE,sBAAsB,cAFrB,MAAM;2FAEP,sBAAsB;kBAHlC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,cAAc;IAOvB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,iCAAiC,CAAC,8DAA+H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE7R,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kCAAkC,EAC7F,8DAA8D,EAC9D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,uCAAuC,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAErL,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,yCAAyC,EACnG;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,+BAA+B,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE1J,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iCAAiC,EAC3F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,iCAAiC,CAAC,SAAiB,EAAE,8DAA+H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAChT,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,oGAAoG,CAAC,CAAC;SACzH;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kCAAkC,EAC7F,8DAA8D,EAC9D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;2GA3SQ,cAAc,4CAO0C,SAAS;+GAPjE,cAAc,cAFb,MAAM;2FAEP,cAAc;kBAH1B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAoCa,uBAAuB;IAOhC,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IASM,0BAA0B,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAAwE;QAE9J,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa;gBAChC,kBAAkB;aACrB,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAmK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2BAA2B,EAClP;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,0CAA0C,CAAC,uEAAiJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAExT,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2CAA2C,EACtG,uEAAuE,EACvE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,gDAAgD,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE9L,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kDAAkD,EAC5G;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,wCAAwC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEnK,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0CAA0C,EACpG;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,0CAA0C,CAAC,kBAA0B,EAAE,uEAAiJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QACpV,IAAI,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,EAAE;YACjE,MAAM,IAAI,KAAK,CAAC,sHAAsH,CAAC,CAAC;SAC3I;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2CAA2C,EACtG,uEAAuE,EACvE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;oHAzVQ,uBAAuB,4CAOiC,SAAS;wHAPjE,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;AC3C3G;;;;;;;;;;;MAgCa,uBAAuB;IAOhC,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,0CAA0C,CAAC,uEAAiJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAExT,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2CAA2C,EACtG,uEAAuE,EACvE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,gDAAgD,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE9L,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kDAAkD,EAC5G;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,wCAAwC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEnK,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0CAA0C,EACpG;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,0CAA0C,CAAC,kBAA0B,EAAE,uEAAiJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QACpV,IAAI,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,EAAE;YACjE,MAAM,IAAI,KAAK,CAAC,sHAAsH,CAAC,CAAC;SAC3I;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2CAA2C,EACtG,uEAAuE,EACvE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;oHA3SQ,uBAAuB,4CAOiC,SAAS;wHAPjE,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,gBAAgB;IAOzB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,mCAAmC,CAAC,gEAAmI,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEnS,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,oCAAoC,EAC/F,gEAAgE,EAChE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,yCAAyC,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEvL,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,2CAA2C,EACrG;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,iCAAiC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE5J,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,mCAAmC,EAC7F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,mCAAmC,CAAC,WAAmB,EAAE,gEAAmI,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QACxT,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,EAAE;YACnD,MAAM,IAAI,KAAK,CAAC,wGAAwG,CAAC,CAAC;SAC7H;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,oCAAoC,EAC/F,gEAAgE,EAChE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;6GA3SQ,gBAAgB,4CAOwC,SAAS;iHAPjE,gBAAgB,cAFf,MAAM;2FAEP,gBAAgB;kBAH5B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,cAAc;IAOvB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,iCAAiC,CAAC,8DAA+H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE7R,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kCAAkC,EAC7F,8DAA8D,EAC9D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,uCAAuC,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAErL,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,yCAAyC,EACnG;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,+BAA+B,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE1J,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iCAAiC,EAC3F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,iCAAiC,CAAC,SAAiB,EAAE,8DAA+H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAChT,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,oGAAoG,CAAC,CAAC;SACzH;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kCAAkC,EAC7F,8DAA8D,EAC9D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;2GA3SQ,cAAc,4CAO0C,SAAS;+GAPjE,cAAc,cAFb,MAAM;2FAEP,cAAc;kBAH1B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,eAAe;IAOxB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,kCAAkC,CAAC,+DAAiI,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEhS,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,mCAAmC,EAC9F,+DAA+D,EAC/D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,wCAAwC,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEtL,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0CAA0C,EACpG;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,gCAAgC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE3J,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,kCAAkC,EAC5F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,kCAAkC,CAAC,UAAkB,EAAE,+DAAiI,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QACpT,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,EAAE;YACjD,MAAM,IAAI,KAAK,CAAC,sGAAsG,CAAC,CAAC;SAC3H;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,mCAAmC,EAC9F,+DAA+D,EAC/D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;4GA3SQ,eAAe,4CAOyC,SAAS;gHAPjE,eAAe,cAFd,MAAM;2FAEP,eAAe;kBAH3B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,qBAAqB;IAO9B,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,wCAAwC,CAAC,qEAA6I,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAElT,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,yCAAyC,EACpG,qEAAqE,EACrE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,8CAA8C,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE5L,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,gDAAgD,EAC1G;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,sCAAsC,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEjK,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,wCAAwC,EAClG;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,wCAAwC,CAAC,gBAAwB,EAAE,qEAA6I,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAC5U,IAAI,gBAAgB,KAAK,IAAI,IAAI,gBAAgB,KAAK,SAAS,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,kHAAkH,CAAC,CAAC;SACvI;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,yCAAyC,EACpG,qEAAqE,EACrE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;kHA3SQ,qBAAqB,4CAOmC,SAAS;sHAPjE,qBAAqB,cAFpB,MAAM;2FAEP,qBAAqB;kBAHjC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAgCa,yBAAyB;IAOlC,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAUM,4CAA4C,CAAC,yEAAqJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE9T,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,6CAA6C,EACxG,yEAAyE,EACzE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,kDAAkD,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEhM,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,oDAAoD,EAC9G;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,0CAA0C,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAErK,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,4CAA4C,EACtG;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,4CAA4C,CAAC,oBAA4B,EAAE,yEAAqJ,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAC5V,IAAI,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,KAAK,SAAS,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,0HAA0H,CAAC,CAAC;SAC/I;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,6CAA6C,EACxG,yEAAyE,EACzE;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;sHA3SQ,yBAAyB,4CAO+B,SAAS;0HAPjE,yBAAyB,cAFxB,MAAM;2FAEP,yBAAyB;kBAHrC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;ACvC3G;;;;;;;;;;;MAkCa,aAAa;IAOtB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QALlC,aAAQ,GAAG,kBAAkB,CAAC;QACjC,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAIvC,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;SACtC;QACD,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACjD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5B;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,wBAAwB,EAAE,CAAC;KAC/E;IAGO,eAAe,CAAC,UAAsB,EAAE,KAAU,EAAE,GAAY;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;YAC9D,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SACjE;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IAEO,wBAAwB,CAAC,UAAsB,EAAE,KAAW,EAAE,GAAY;QAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,UAAU,CAAC;SACrB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAe,CAAC,OAAO,CAAE,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACxG;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAC9B,IAAI,GAAG,IAAI,IAAI,EAAE;oBACb,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAC7B,KAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpD;qBAAM;oBACJ,MAAM,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACtD;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,CAAC,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CACvE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/D;SACJ;aAAM,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,OAAO,UAAU,CAAC;KACrB;IASM,sBAAsB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEjJ,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0BAA0B,EACpF;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,2BAA2B,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEtJ,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iCAAiC,EAC3F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,gCAAgC,CAAC,6DAA6H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE1R,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iCAAiC,EAC5F,6DAA6D,EAC7D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,sCAAsC,CAAC,QAAiB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEpL,IAAI,uBAAuB,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAC/D,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC9B;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,wCAAwC,EAClG;YACI,OAAO,EAAE,mBAAmB;YAC5B,MAAM,EAAE,uBAAuB;YAC/B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,8BAA8B,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEzJ,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,gCAAgC,EAC1F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,gCAAgC,CAAC,mBAA2B,EAAE,6DAA6H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QACvT,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnE,MAAM,IAAI,KAAK,CAAC,6GAA6G,CAAC,CAAC;SAClI;QAED,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iCAAiC,EAC5F,6DAA6D,EAC7D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,wBAAwB,CAAC,6DAA6H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAElR,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,0BAA0B,EACrF,6DAA6D,EAC7D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAUM,gCAAgC,CAAC,6DAA6H,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAE1R,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;;QAID,MAAM,QAAQ,GAAa;YACvB,8DAA8D;YAC9D,+DAA+D;YAC/D,yCAAyC;YACzC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,2DAA2D;YAC3D,4DAA4D;YAC5D,sCAAsC;YACtC,uCAAuC;YACvC,wCAAwC;YACxC,kBAAkB;YAClB,iBAAiB;YACjB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACxB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,KAAK,SAAS,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClF;QAED,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,iCAAiC,EAC5F,6DAA6D,EAC7D;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IASM,8BAA8B,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK,EAAE,OAA+D;QAEzJ,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1C,IAAI,gCAAgC,GAAuB,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;QAC/F,IAAI,gCAAgC,KAAK,SAAS,EAAE;;YAEhD,MAAM,iBAAiB,GAAa,EACnC,CAAC;YACF,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;SAC/F;QACD,IAAI,gCAAgC,KAAK,SAAS,EAAE;YAChD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;SACrF;QAED,IAAI,mBAAmB,GAA4B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC9E,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACnC,mBAAmB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC3C;QAGD,IAAI,aAAa,GAAoB,MAAM,CAAC;QAC5C,IAAG,gCAAgC,IAAI,gCAAgC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACxF,aAAa,GAAG,MAAM,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,gCAAgC,EAC1F;YACI,OAAO,EAAE,mBAAmB;YAC5B,YAAY,EAAO,aAAa;YAChC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;;0GAhkBQ,aAAa,4CAO2C,SAAS;8GAPjE,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAQkD,QAAQ;;0BAAG,MAAM;2BAAC,SAAS;;0BAAqB,QAAQ;;;MCnB9F,IAAI,GAAG,CAAC,wBAAwB,EAAE,sBAAsB,EAAE,cAAc,EAAE,uBAAuB,EAAE,uBAAuB,EAAE,gBAAgB,EAAE,cAAc,EAAE,eAAe,EAAE,qBAAqB,EAAE,yBAAyB,EAAE,aAAa;;ACtB3P;;;;;;;;;;;;ACAA;;;;;;;;;;;IAaY;AAAZ,WAAY,oEAAoE;IAC5E,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;AAChB,CAAC,EAVW,oEAAoE,KAApE,oEAAoE,QAU/E;AAAA;;ACvBD;;;;;;;;;;;IAaY;AAAZ,WAAY,yEAAyE;IACjF,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;AAChB,CAAC,EAPW,yEAAyE,KAAzE,yEAAyE,QAOpF;AAAA;;ACpBD;;;;;;;;;;;IAaY;AAAZ,WAAY,wEAAwE;IAChF,+KAAY,CAAA;IACZ,+KAAY,CAAA;AAChB,CAAC,EAHW,wEAAwE,KAAxE,wEAAwE,QAGnF;AAAA;;AChBD;;;;;;;;;;;IAaY;AAAZ,WAAY,mFAAmF;IAC3F,wGAAiB,CAAA;IACjB,6GAAsB,CAAA;IACtB,2HAAoC,CAAA;IACpC,mHAA4B,CAAA;IAC5B,2GAAoB,CAAA;AACxB,CAAC,EANW,mFAAmF,KAAnF,mFAAmF,QAM9F;AAAA;;ACnBD;;;;;;;;;;;IAaY;AAAZ,WAAY,oEAAoE;IAC5E,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;IACZ,uKAAY,CAAA;AAChB,CAAC,EAVW,oEAAoE,KAApE,oEAAoE,QAU/E;AAAA;;ACvBD;;;;;;;;;;;IAaY;AAAZ,WAAY,yEAAyE;IACjF,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;IACZ,iLAAY,CAAA;AAChB,CAAC,EAPW,yEAAyE,KAAzE,yEAAyE,QAOpF;AAAA;;ACpBD;;;;;;;;;;;IAaY;AAAZ,WAAY,wEAAwE;IAChF,+KAAY,CAAA;IACZ,+KAAY,CAAA;IACZ,+KAAY,CAAA;IACZ,+KAAY,CAAA;IACZ,+KAAY,CAAA;AAChB,CAAC,EANW,wEAAwE,KAAxE,wEAAwE,QAMnF;AAAA;;ACnBD;;;;;;;;;;;;ACAA;;;;;;;;;;;IAaY;AAAZ,WAAY,mFAAmF;IAC3F,wGAAiB,CAAA;IACjB,6GAAsB,CAAA;IACtB,2HAAoC,CAAA;IACpC,mHAA4B,CAAA;IAC5B,2GAAoB,CAAA;AACxB,CAAC,EANW,mFAAmF,KAAnF,mFAAmF,QAM9F;AAAA;;MCGY,SAAS;IAQlB,YAAqC,YAAuB,EACnC,IAAgB;QACrC,IAAI,YAAY,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;SACvF;QACD,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,+DAA+D;gBAC/E,0DAA0D,CAAC,CAAC;SAC/D;KACJ;IAhBM,OAAO,OAAO,CAAC,oBAAyC;QAC3D,OAAO;YACH,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,oBAAoB,EAAE,CAAE;SAC9E,CAAC;KACL;;sGANQ,SAAS,kBAQiC,SAAS;uGARnD,SAAS;uGAAT,SAAS,aAFT,EAAE,YAHC,EAAE;2FAKL,SAAS;kBANrB,QAAQ;mBAAC;oBACR,OAAO,EAAO,EAAE;oBAChB,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAO,EAAE;oBAChB,SAAS,EAAE,EAAE;iBACd;0DASsD,SAAS;0BAA9C,QAAQ;;0BAAI,QAAQ;;0BACpB,QAAQ;;;AC/B1B;;;;;;"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\n\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nclass CustomHttpParameterCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\r\nconst COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n};\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/ContentCollection/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentContentCollectionGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentContentCollectionQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentContentCollectionUpdatePost(contentCollectionId, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentContentCollectionUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/ContentCollection/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentFilesystemAssetGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentFilesystemAssetQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentFilesystemAssetUpdatePost(filesystemAssetId, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        if (filesystemAssetId === null || filesystemAssetId === undefined) {\r\n            throw new Error('Required parameter filesystemAssetId was null or undefined when calling horselessContentFilesystemAssetUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Holonym/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHolonymGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHolonymQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHolonymUpdatePost(holonymId, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        if (holonymId === null || holonymId === undefined) {\r\n            throw new Error('Required parameter holonymId was null or undefined when calling horselessContentHolonymUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Holonym/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentHorselessContentGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/content/HorselessContent`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessContent/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessContentUpdatePost(horselessContentId, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        if (horselessContentId === null || horselessContentId === undefined) {\r\n            throw new Error('Required parameter horselessContentId was null or undefined when calling horselessContentHorselessContentUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessContent/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessSession/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessSessionGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessSessionQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentHorselessSessionUpdatePost(horselessSessionId, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        if (horselessSessionId === null || horselessSessionId === undefined) {\r\n            throw new Error('Required parameter horselessSessionId was null or undefined when calling horselessContentHorselessSessionUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/HorselessSession/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/JSONAsset/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentJSONAssetGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentJSONAssetQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentJSONAssetUpdatePost(jsonAssetId, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        if (jsonAssetId === null || jsonAssetId === undefined) {\r\n            throw new Error('Required parameter jsonAssetId was null or undefined when calling horselessContentJSONAssetUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/JSONAsset/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Meronym/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMeronymGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMeronymQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMeronymUpdatePost(meronymId, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        if (meronymId === null || meronymId === undefined) {\r\n            throw new Error('Required parameter meronymId was null or undefined when calling horselessContentMeronymUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Meronym/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/MIMEType/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMIMETypeGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/MIMEType/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMIMETypeQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentMIMETypeUpdatePost(mimeTypeId, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        if (mimeTypeId === null || mimeTypeId === undefined) {\r\n            throw new Error('Required parameter mimeTypeId was null or undefined when calling horselessContentMIMETypeUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/MIMEType/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuUpdatePost(navigationMenuId, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        if (navigationMenuId === null || navigationMenuId === undefined) {\r\n            throw new Error('Required parameter navigationMenuId was null or undefined when calling horselessContentNavigationMenuUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuItemGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuItemQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        if (navigationMenuItemId === null || navigationMenuItemId === undefined) {\r\n            throw new Error('Required parameter navigationMenuItemId was null or undefined when calling horselessContentNavigationMenuItemUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentTenant(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantCount(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant/Create`, theHorselessNewspaperSchemasContentModelContentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantGetByObjectIdGet(objectId, observe = 'body', reportProgress = false, options) {\r\n        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });\r\n        if (objectId !== undefined && objectId !== null) {\r\n            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, objectId, 'objectId');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            params: localVarQueryParameters,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenantUpdatePost(contentCollectionId, theHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentTenantUpdatePost.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant/Update`, theHorselessNewspaperSchemasContentModelContentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant`, theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json;odata.metadata=minimal;odata.streaming=true',\r\n            'application/json;odata.metadata=minimal;odata.streaming=false',\r\n            'application/json;odata.metadata=minimal',\r\n            'application/json;odata.metadata=full;odata.streaming=true',\r\n            'application/json;odata.metadata=full;odata.streaming=false',\r\n            'application/json;odata.metadata=full',\r\n            'application/json;odata.metadata=none;odata.streaming=true',\r\n            'application/json;odata.metadata=none;odata.streaming=false',\r\n            'application/json;odata.metadata=none',\r\n            'application/json;odata.streaming=true',\r\n            'application/json;odata.streaming=false',\r\n            'application/json',\r\n            'application/xml',\r\n            'text/plain',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`, theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessHostingTenantQueryGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\nconst APIS = [ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, JSONAssetService, MeronymService, MimeTypeService, NavigationMenuService, NavigationMenuItemService, TenantService];\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission || (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope || (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType || (TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName;\r\n(function (TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName) {\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName || (TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName;\r\n(function (TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName) {\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName || (TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: ApiModule, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: SkipSelf\r\n                    }] }, { type: i1.HttpClient, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, JSONAssetService, MeronymService, MimeTypeService, NavigationMenuItemService, NavigationMenuService, TenantService, TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission, TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope, TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType, TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName, TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission, TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope, TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType, TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/encoder.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/variables.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/contentCollection.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/filesystemAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/holonym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessContent.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessSession.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/jSONAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/meronym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/mimeType.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenu.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuItem.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/tenant.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/theHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentCollectionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentContentCollectionUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection?: TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentContentCollectionUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param filesystemAssetId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentFilesystemAssetUpdatePost(filesystemAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (filesystemAssetId === null || filesystemAssetId === undefined) {\n            throw new Error('Required parameter filesystemAssetId was null or undefined when calling horselessContentFilesystemAssetUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesHolonym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HolonymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Holonym/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Holonym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Holonym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param holonymId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHolonymUpdatePost(holonymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHolonym?: TheHorselessNewspaperSchemasContentModelContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (holonymId === null || holonymId === undefined) {\n            throw new Error('Required parameter holonymId was null or undefined when calling horselessContentHolonymUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Holonym/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection } from '../model/horselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection';\n// @ts-ignore\nimport { MicrosoftAspNetCoreMvcProblemDetails } from '../model/microsoftAspNetCoreMvcProblemDetails';\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentHorselessContentGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>;\n    public contentHorselessContentGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>>;\n    public contentHorselessContentGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>>;\n    public contentHorselessContentGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<HorselessNewspaperCoreInterfacesQueryIHorselessQueryResult1SystemCollectionsGenericList1TheHorselessNewspaperSchemasContentModelContentEntitiesContentCollection>(`${this.configuration.basePath}/content/HorselessContent`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param horselessContentId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessContentUpdatePost(horselessContentId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (horselessContentId === null || horselessContentId === undefined) {\n            throw new Error('Required parameter horselessContentId was null or undefined when calling horselessContentHorselessContentUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessSessionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param horselessSessionId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentHorselessSessionUpdatePost(horselessSessionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession?: TheHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (horselessSessionId === null || horselessSessionId === undefined) {\n            throw new Error('Required parameter horselessSessionId was null or undefined when calling horselessContentHorselessSessionUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param jsonAssetId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentJSONAssetUpdatePost(jsonAssetId: string, theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset?: TheHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (jsonAssetId === null || jsonAssetId === undefined) {\n            throw new Error('Required parameter jsonAssetId was null or undefined when calling horselessContentJSONAssetUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesMeronym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeronymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Meronym/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Meronym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Meronym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param meronymId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMeronymUpdatePost(meronymId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMeronym?: TheHorselessNewspaperSchemasContentModelContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (meronymId === null || meronymId === undefined) {\n            throw new Error('Required parameter meronymId was null or undefined when calling horselessContentMeronymUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Meronym/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MimeTypeService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param mimeTypeId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentMIMETypeUpdatePost(mimeTypeId: string, theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType?: TheHorselessNewspaperSchemasContentModelContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (mimeTypeId === null || mimeTypeId === undefined) {\n            throw new Error('Required parameter mimeTypeId was null or undefined when calling horselessContentMIMETypeUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/MIMEType/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param navigationMenuId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuUpdatePost(navigationMenuId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (navigationMenuId === null || navigationMenuId === undefined) {\n            throw new Error('Required parameter navigationMenuId was null or undefined when calling horselessContentNavigationMenuUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuItemService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param navigationMenuItemId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentNavigationMenuItemUpdatePost(navigationMenuItemId: string, theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem?: TheHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (navigationMenuItemId === null || navigationMenuItemId === undefined) {\n            throw new Error('Required parameter navigationMenuItemId was null or undefined when calling horselessContentNavigationMenuItemUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasContentModelContentEntitiesTenant } from '../model/theHorselessNewspaperSchemasContentModelContentEntitiesTenant';\n// @ts-ignore\nimport { TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant } from '../model/theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TenantService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenant(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenant(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenant(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenant(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantCount(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantCount(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantCount(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantCount(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/$count`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantCreatePost(theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant/Create`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantGetByObjectIdGet(objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarQueryParameters = new HttpParams({encoder: this.encoder});\n        if (objectId !== undefined && objectId !== null) {\n          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,\n            <any>objectId, 'objectId');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                params: localVarQueryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param theHorselessNewspaperSchemasContentModelContentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenantUpdatePost(contentCollectionId: string, theHorselessNewspaperSchemasContentModelContentEntitiesTenant?: TheHorselessNewspaperSchemasContentModelContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentTenantUpdatePost.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant/Update`,\n            theHorselessNewspaperSchemasContentModelContentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessContentTenant_1(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessHostingTenantCreatePost(theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant?: TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json;odata.metadata=minimal;odata.streaming=true',\n            'application/json;odata.metadata=minimal;odata.streaming=false',\n            'application/json;odata.metadata=minimal',\n            'application/json;odata.metadata=full;odata.streaming=true',\n            'application/json;odata.metadata=full;odata.streaming=false',\n            'application/json;odata.metadata=full',\n            'application/json;odata.metadata=none;odata.streaming=true',\n            'application/json;odata.metadata=none;odata.streaming=false',\n            'application/json;odata.metadata=none',\n            'application/json;odata.streaming=true',\n            'application/json;odata.streaming=false',\n            'application/json',\n            'application/xml',\n            'text/plain',\n            'text/json',\n            'application/_*+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`,\n            theHorselessNewspaperSchemasHostingModelHostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessHostingTenantQueryGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public horselessHostingTenantQueryGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public horselessHostingTenantQueryGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public horselessHostingTenantQueryGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './contentCollection.service';\nimport { ContentCollectionService } from './contentCollection.service';\nexport * from './filesystemAsset.service';\nimport { FilesystemAssetService } from './filesystemAsset.service';\nexport * from './holonym.service';\nimport { HolonymService } from './holonym.service';\nexport * from './horselessContent.service';\nimport { HorselessContentService } from './horselessContent.service';\nexport * from './horselessSession.service';\nimport { HorselessSessionService } from './horselessSession.service';\nexport * from './jSONAsset.service';\nimport { JSONAssetService } from './jSONAsset.service';\nexport * from './meronym.service';\nimport { MeronymService } from './meronym.service';\nexport * from './mimeType.service';\nimport { MimeTypeService } from './mimeType.service';\nexport * from './navigationMenu.service';\nimport { NavigationMenuService } from './navigationMenu.service';\nexport * from './navigationMenuItem.service';\nimport { NavigationMenuItemService } from './navigationMenuItem.service';\nexport * from './tenant.service';\nimport { TenantService } from './tenant.service';\nexport const APIS = [ContentCollectionService, FilesystemAssetService, HolonymService, HorselessContentService, HorselessSessionService, JSONAssetService, MeronymService, MimeTypeService, NavigationMenuService, NavigationMenuItemService, TenantService];\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasContentModelContentEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum TheHorselessNewspaperSchemasHostingModelHostingEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ContentCollectionService } from './api/contentCollection.service';\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\nimport { HolonymService } from './api/holonym.service';\nimport { HorselessContentService } from './api/horselessContent.service';\nimport { HorselessSessionService } from './api/horselessSession.service';\nimport { JSONAssetService } from './api/jSONAsset.service';\nimport { MeronymService } from './api/meronym.service';\nimport { MimeTypeService } from './api/mimeType.service';\nimport { NavigationMenuService } from './api/navigationMenu.service';\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\nimport { TenantService } from './api/tenant.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}}}