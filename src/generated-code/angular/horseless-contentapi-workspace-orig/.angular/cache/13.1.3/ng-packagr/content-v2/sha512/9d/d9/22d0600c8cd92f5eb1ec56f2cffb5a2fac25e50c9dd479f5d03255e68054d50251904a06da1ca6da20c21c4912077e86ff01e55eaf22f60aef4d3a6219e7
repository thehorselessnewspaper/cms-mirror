{"hash":"0da4c05d9af8a198457332e48b4d73f3a4cea748","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\n\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nclass CustomHttpParameterCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\r\nconst COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n};\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionRESTControllerCreate(contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/ContentCollection/Create`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling contentCollectionRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/ContentCollection/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerUpdate(contentCollectionId, contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/ContentCollection/Update`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/FilesystemAsset/Create`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/FilesystemAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerUpdate(contentCollectionId, contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/FilesystemAsset/Update`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymRESTControllerCreate(contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Holonym/Create`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/Holonym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerUpdate(contentCollectionId, contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Holonym/Update`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentRESTControllerCreate(contentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContent/Create`, contentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessContentRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContent/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentRESTControllerUpdate(contentCollectionId, contentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContent/Update`, contentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionRESTControllerCreate(contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessSession/Create`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessSession/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerUpdate(contentCollectionId, contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessSession/Update`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetRESTControllerCreate(contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/JSONAsset/Create`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/JSONAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerUpdate(contentCollectionId, contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/JSONAsset/Update`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass KeycloakAuthenticationService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    canConsumeForm(consumes) {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    keycloakAuthenticationControllerSignIn(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/Keycloak/SignIn`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignIn_1(provider, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'multipart/form-data'\r\n        ];\r\n        const canConsumeForm = this.canConsumeForm(consumes);\r\n        let localVarFormParams;\r\n        let localVarUseForm = false;\r\n        let localVarConvertFormParamsToString = false;\r\n        if (localVarUseForm) {\r\n            localVarFormParams = new FormData();\r\n        }\r\n        else {\r\n            localVarFormParams = new HttpParams({ encoder: this.encoder });\r\n        }\r\n        if (provider !== undefined) {\r\n            localVarFormParams = localVarFormParams.append('provider', provider) || localVarFormParams;\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/SignIn`, localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignOutCurrentUser(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/Signout`, null, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nKeycloakAuthenticationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nKeycloakAuthenticationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymRESTControllerCreate(contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Meronym/Create`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/Meronym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerUpdate(contentCollectionId, contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Meronym/Update`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    mimeTypeControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    mimeTypeRESTControllerCreate(contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/MIMEType/Create`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/MIMEType/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerUpdate(contentCollectionId, contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/MIMEType/Update`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenuItem/Create`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/NavigationMenuItem/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenuItem/Update`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenu/Create`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/NavigationMenu/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenu/Update`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_2(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerPost(hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerPost_3(hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantRESTControllerCreate(contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Tenant/Create`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerUpdate(contentCollectionId, contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Tenant/Update`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [BASE_PATH]\r\n                }] }, { type: Configuration, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\nconst APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessContentRESTService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MimeTypeService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantRESTService];\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermission;\r\n(function (ContentEntitiesACEPermission) {\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(ContentEntitiesACEPermission || (ContentEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionScope;\r\n(function (ContentEntitiesACEPermissionScope) {\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(ContentEntitiesACEPermissionScope || (ContentEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionType;\r\n(function (ContentEntitiesACEPermissionType) {\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n})(ContentEntitiesACEPermissionType || (ContentEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesTenantIdentifierStrategyName;\r\n(function (ContentEntitiesTenantIdentifierStrategyName) {\r\n    ContentEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(ContentEntitiesTenantIdentifierStrategyName || (ContentEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermission;\r\n(function (HostingEntitiesACEPermission) {\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(HostingEntitiesACEPermission || (HostingEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionScope;\r\n(function (HostingEntitiesACEPermissionScope) {\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(HostingEntitiesACEPermissionScope || (HostingEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionType;\r\n(function (HostingEntitiesACEPermissionType) {\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(HostingEntitiesACEPermissionType || (HostingEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesTenantIdentifierStrategyName;\r\n(function (HostingEntitiesTenantIdentifierStrategyName) {\r\n    HostingEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(HostingEntitiesTenantIdentifierStrategyName || (HostingEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ApiModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: i1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, ContentCollectionRESTService, ContentCollectionService, ContentEntitiesACEPermission, ContentEntitiesACEPermissionScope, ContentEntitiesACEPermissionType, ContentEntitiesTenantIdentifierStrategyName, FilesystemAssetRESTService, FilesystemAssetService, HolonymRESTService, HolonymService, HorselessContentRESTService, HorselessContentService, HorselessSessionRESTService, HorselessSessionService, HostingEntitiesACEPermission, HostingEntitiesACEPermissionScope, HostingEntitiesACEPermissionType, HostingEntitiesTenantIdentifierStrategyName, JSONAssetRESTService, JSONAssetService, KeycloakAuthenticationService, MeronymRESTService, MeronymService, MimeTypeRESTService, MimeTypeService, NavigationMenuItemRESTService, NavigationMenuItemService, NavigationMenuRESTService, NavigationMenuService, TenantRESTService, TenantService };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/encoder.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/variables.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/contentCollection.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/contentCollectionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/filesystemAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/filesystemAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/holonym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/holonymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessContent.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessContentREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessSession.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessSessionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/jSONAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/jSONAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/keycloakAuthentication.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/meronym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/meronymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/mimeType.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/mimeTypeREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenu.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuItem.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuItemREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/tenant.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/tenantREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesPrincipal.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/mvcProblemDetails.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentCollectionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesContentCollection>>;\n    public contentCollectionControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesContentCollection>>>;\n    public contentCollectionControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesContentCollection>>>;\n    public contentCollectionControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesContentCollection>>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentCollectionRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/ContentCollection/Create`,\n            contentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling contentCollectionRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/ContentCollection/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/ContentCollection/Update`,\n            contentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesFilesystemAsset>>>;\n    public filesystemAssetControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesFilesystemAsset>>>;\n    public filesystemAssetControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesFilesystemAsset>>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemAssetRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/FilesystemAsset/Create`,\n            contentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/FilesystemAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/FilesystemAsset/Update`,\n            contentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HolonymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHolonym>>;\n    public holonymControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHolonym>>>;\n    public holonymControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHolonym>>>;\n    public holonymControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesHolonym>>(`${this.configuration.basePath}/HorselessContent/Holonym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HolonymRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/Holonym/Create`,\n            contentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\n    public holonymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/Holonym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/Holonym/Update`,\n            contentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHorselessContent } from '../model/contentEntitiesHorselessContent';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessContent>>;\n    public horselessContentControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessContent>>>;\n    public horselessContentControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessContent>>>;\n    public horselessContentControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesHorselessContent>>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHorselessContent } from '../model/contentEntitiesHorselessContent';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHorselessContent>;\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHorselessContent>(`${this.configuration.basePath}/api/HorselessContent/Create`,\n            contentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHorselessContent>;\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling horselessContentRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesHorselessContent>(`${this.configuration.basePath}/api/HorselessContent/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHorselessContent>;\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHorselessContent>(`${this.configuration.basePath}/api/HorselessContent/Update`,\n            contentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessSessionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessSession>>;\n    public horselessSessionControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessSession>>>;\n    public horselessSessionControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessSession>>>;\n    public horselessSessionControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesHorselessSession>>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\n// @ts-ignore\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessSessionRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessSession/Create`,\n            contentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessSession/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessSession/Update`,\n            contentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesJSONAsset>>;\n    public jSONAssetControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesJSONAsset>>>;\n    public jSONAssetControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesJSONAsset>>>;\n    public jSONAssetControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesJSONAsset>>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONAssetRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/JSONAsset/Create`,\n            contentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/JSONAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/JSONAsset/Update`,\n            contentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KeycloakAuthenticationService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public keycloakAuthenticationControllerSignIn(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public keycloakAuthenticationControllerSignIn(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public keycloakAuthenticationControllerSignIn(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public keycloakAuthenticationControllerSignIn(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param provider \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let localVarFormParams: { append(param: string, value: any): any; };\n        let localVarUseForm = false;\n        let localVarConvertFormParamsToString = false;\n        if (localVarUseForm) {\n            localVarFormParams = new FormData();\n        } else {\n            localVarFormParams = new HttpParams({encoder: this.encoder});\n        }\n\n        if (provider !== undefined) {\n            localVarFormParams = localVarFormParams.append('provider', <any>provider) as any || localVarFormParams;\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\n            localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/Signout`,\n            null,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeronymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMeronym>>;\n    public meronymControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMeronym>>>;\n    public meronymControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMeronym>>>;\n    public meronymControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesMeronym>>(`${this.configuration.basePath}/HorselessContent/Meronym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeronymRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/Meronym/Create`,\n            contentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\n    public meronymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/Meronym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/Meronym/Update`,\n            contentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MimeTypeService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMIMEType>>;\n    public mimeTypeControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMIMEType>>>;\n    public mimeTypeControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMIMEType>>>;\n    public mimeTypeControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesMIMEType>>(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MimeTypeRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/MIMEType/Create`,\n            contentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/MIMEType/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/MIMEType/Update`,\n            contentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenu>>;\n    public navigationMenuControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenu>>>;\n    public navigationMenuControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenu>>>;\n    public navigationMenuControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenu>>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuItemService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenuItem>>>;\n    public navigationMenuItemControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenuItem>>>;\n    public navigationMenuItemControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenuItem>>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuItemRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/NavigationMenuItem/Create`,\n            contentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/NavigationMenuItem/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/NavigationMenuItem/Update`,\n            contentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\n// @ts-ignore\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/NavigationMenu/Create`,\n            contentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/NavigationMenu/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/NavigationMenu/Update`,\n            contentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesTenant } from '../model/contentEntitiesTenant';\n// @ts-ignore\nimport { HostingEntitiesTenant } from '../model/hostingEntitiesTenant';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TenantService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerGet_2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerGet_2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerGet_2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerGet_2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/$count`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param hostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            hostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param hostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`,\n            hostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesTenant>>;\n    public tenantControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesTenant>>>;\n    public tenantControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesTenant>>>;\n    public tenantControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesTenant>>(`${this.configuration.basePath}/HorselessContent/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesTenant } from '../model/contentEntitiesTenant';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TenantRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/Tenant/Create`,\n            contentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\n    public tenantRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesTenant>(`${this.configuration.basePath}/api/Tenant/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/Tenant/Update`,\n            contentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './contentCollection.service';\nimport { ContentCollectionService } from './contentCollection.service';\nexport * from './contentCollectionREST.service';\nimport { ContentCollectionRESTService } from './contentCollectionREST.service';\nexport * from './filesystemAsset.service';\nimport { FilesystemAssetService } from './filesystemAsset.service';\nexport * from './filesystemAssetREST.service';\nimport { FilesystemAssetRESTService } from './filesystemAssetREST.service';\nexport * from './holonym.service';\nimport { HolonymService } from './holonym.service';\nexport * from './holonymREST.service';\nimport { HolonymRESTService } from './holonymREST.service';\nexport * from './horselessContent.service';\nimport { HorselessContentService } from './horselessContent.service';\nexport * from './horselessContentREST.service';\nimport { HorselessContentRESTService } from './horselessContentREST.service';\nexport * from './horselessSession.service';\nimport { HorselessSessionService } from './horselessSession.service';\nexport * from './horselessSessionREST.service';\nimport { HorselessSessionRESTService } from './horselessSessionREST.service';\nexport * from './jSONAsset.service';\nimport { JSONAssetService } from './jSONAsset.service';\nexport * from './jSONAssetREST.service';\nimport { JSONAssetRESTService } from './jSONAssetREST.service';\nexport * from './keycloakAuthentication.service';\nimport { KeycloakAuthenticationService } from './keycloakAuthentication.service';\nexport * from './meronym.service';\nimport { MeronymService } from './meronym.service';\nexport * from './meronymREST.service';\nimport { MeronymRESTService } from './meronymREST.service';\nexport * from './mimeType.service';\nimport { MimeTypeService } from './mimeType.service';\nexport * from './mimeTypeREST.service';\nimport { MimeTypeRESTService } from './mimeTypeREST.service';\nexport * from './navigationMenu.service';\nimport { NavigationMenuService } from './navigationMenu.service';\nexport * from './navigationMenuItem.service';\nimport { NavigationMenuItemService } from './navigationMenuItem.service';\nexport * from './navigationMenuItemREST.service';\nimport { NavigationMenuItemRESTService } from './navigationMenuItemREST.service';\nexport * from './navigationMenuREST.service';\nimport { NavigationMenuRESTService } from './navigationMenuREST.service';\nexport * from './tenant.service';\nimport { TenantService } from './tenant.service';\nexport * from './tenantREST.service';\nimport { TenantRESTService } from './tenantREST.service';\nexport const APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessContentRESTService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MimeTypeService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantRESTService];\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface HostingEntitiesPrincipal { \n    id?: string;\n    displayName?: string | null;\n    objectId: string;\n    isSoftDeleted?: boolean | null;\n    createdAt?: string | null;\n    iss?: string | null;\n    aud?: string | null;\n    sub?: string | null;\n}\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface MvcProblemDetails { \n  [key: string]: any | any;\n\n\n    type?: string | null;\n    title?: string | null;\n    status?: number | null;\n    detail?: string | null;\n    instance?: string | null;\n}\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ContentCollectionService } from './api/contentCollection.service';\nimport { ContentCollectionRESTService } from './api/contentCollectionREST.service';\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\nimport { FilesystemAssetRESTService } from './api/filesystemAssetREST.service';\nimport { HolonymService } from './api/holonym.service';\nimport { HolonymRESTService } from './api/holonymREST.service';\nimport { HorselessContentService } from './api/horselessContent.service';\nimport { HorselessContentRESTService } from './api/horselessContentREST.service';\nimport { HorselessSessionService } from './api/horselessSession.service';\nimport { HorselessSessionRESTService } from './api/horselessSessionREST.service';\nimport { JSONAssetService } from './api/jSONAsset.service';\nimport { JSONAssetRESTService } from './api/jSONAssetREST.service';\nimport { KeycloakAuthenticationService } from './api/keycloakAuthentication.service';\nimport { MeronymService } from './api/meronym.service';\nimport { MeronymRESTService } from './api/meronymREST.service';\nimport { MimeTypeService } from './api/mimeType.service';\nimport { MimeTypeRESTService } from './api/mimeTypeREST.service';\nimport { NavigationMenuService } from './api/navigationMenu.service';\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\nimport { NavigationMenuItemRESTService } from './api/navigationMenuItemREST.service';\nimport { NavigationMenuRESTService } from './api/navigationMenuREST.service';\nimport { TenantService } from './api/tenant.service';\nimport { TenantRESTService } from './api/tenantREST.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\n\n/**\r\n * Custom HttpParameterCodec\r\n * Workaround for https://github.com/angular/angular/issues/18261\r\n */\r\nclass CustomHttpParameterCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\r\nconst COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n};\n\nclass Configuration {\r\n    constructor(configurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n        this.encoder = configurationParameters.encoder;\r\n        if (configurationParameters.credentials) {\r\n            this.credentials = configurationParameters.credentials;\r\n        }\r\n        else {\r\n            this.credentials = {};\r\n        }\r\n    }\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderContentType(contentTypes) {\r\n        if (contentTypes.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = contentTypes.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    selectHeaderAccept(accepts) {\r\n        if (accepts.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = accepts.find((x) => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n    lookupCredential(key) {\r\n        const value = this.credentials[key];\r\n        return typeof value === 'function'\r\n            ? value()\r\n            : value;\r\n    }\r\n}\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass ContentCollectionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    contentCollectionRESTControllerCreate(contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/ContentCollection/Create`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling contentCollectionRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/ContentCollection/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    contentCollectionRESTControllerUpdate(contentCollectionId, contentEntitiesContentCollection, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/ContentCollection/Update`, contentEntitiesContentCollection, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nContentCollectionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nContentCollectionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ContentCollectionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass FilesystemAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/FilesystemAsset/Create`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/FilesystemAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    filesystemAssetRESTControllerUpdate(contentCollectionId, contentEntitiesFilesystemAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/FilesystemAsset/Update`, contentEntitiesFilesystemAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nFilesystemAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFilesystemAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: FilesystemAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Holonym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HolonymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    holonymRESTControllerCreate(contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Holonym/Create`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/Holonym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    holonymRESTControllerUpdate(contentCollectionId, contentEntitiesHolonym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Holonym/Update`, contentEntitiesHolonym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHolonymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHolonymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HolonymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessContentRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessContentRESTControllerCreate(contentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContent/Create`, contentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessContentRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessContent/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessContentRESTControllerUpdate(contentCollectionId, contentEntitiesHorselessContent, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessContent/Update`, contentEntitiesHorselessContent, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessContentRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessContentRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessContentRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass HorselessSessionRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    horselessSessionRESTControllerCreate(contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessSession/Create`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/HorselessSession/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    horselessSessionRESTControllerUpdate(contentCollectionId, contentEntitiesHorselessSession, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/HorselessSession/Update`, contentEntitiesHorselessSession, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nHorselessSessionRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHorselessSessionRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: HorselessSessionRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass JSONAssetRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    jSONAssetRESTControllerCreate(contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/JSONAsset/Create`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/JSONAsset/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    jSONAssetRESTControllerUpdate(contentCollectionId, contentEntitiesJSONAsset, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/JSONAsset/Update`, contentEntitiesJSONAsset, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nJSONAssetRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nJSONAssetRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: JSONAssetRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass KeycloakAuthenticationService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    canConsumeForm(consumes) {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    keycloakAuthenticationControllerSignIn(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/Keycloak/SignIn`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignIn_1(provider, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'multipart/form-data'\r\n        ];\r\n        const canConsumeForm = this.canConsumeForm(consumes);\r\n        let localVarFormParams;\r\n        let localVarUseForm = false;\r\n        let localVarConvertFormParamsToString = false;\r\n        if (localVarUseForm) {\r\n            localVarFormParams = new FormData();\r\n        }\r\n        else {\r\n            localVarFormParams = new HttpParams({ encoder: this.encoder });\r\n        }\r\n        if (provider !== undefined) {\r\n            localVarFormParams = localVarFormParams.append('provider', provider) || localVarFormParams;\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/SignIn`, localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    keycloakAuthenticationControllerSignOutCurrentUser(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/Keycloak/Signout`, null, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nKeycloakAuthenticationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nKeycloakAuthenticationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: KeycloakAuthenticationService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Meronym/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MeronymRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    meronymRESTControllerCreate(contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Meronym/Create`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/Meronym/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    meronymRESTControllerUpdate(contentCollectionId, contentEntitiesMeronym, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Meronym/Update`, contentEntitiesMeronym, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMeronymRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMeronymRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MeronymRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    mimeTypeControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass MimeTypeRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    mimeTypeRESTControllerCreate(contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/MIMEType/Create`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/MIMEType/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    mimeTypeRESTControllerUpdate(contentCollectionId, contentEntitiesMIMEType, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/MIMEType/Update`, contentEntitiesMIMEType, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nMimeTypeRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMimeTypeRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MimeTypeRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuItemRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenuItem/Create`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/NavigationMenuItem/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuItemRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenuItem, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenuItem/Update`, contentEntitiesNavigationMenuItem, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuItemRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuItemRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuItemRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass NavigationMenuRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenu/Create`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/NavigationMenu/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    navigationMenuRESTControllerUpdate(contentCollectionId, contentEntitiesNavigationMenu, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/NavigationMenu/Update`, contentEntitiesNavigationMenu, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nNavigationMenuRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNavigationMenuRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NavigationMenuRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantControllerGet(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_1(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerGet_2(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/$count`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerPost(hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessContent/Tenant`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerPost_3(hostingEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`, hostingEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantControllerQuery(observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/HorselessContent/Tenant/Query`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nclass TenantRESTService {\r\n    constructor(httpClient, basePath, configuration) {\r\n        this.httpClient = httpClient;\r\n        this.basePath = 'http://localhost';\r\n        this.defaultHeaders = new HttpHeaders();\r\n        this.configuration = new Configuration();\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n        if (typeof this.configuration.basePath !== 'string') {\r\n            if (typeof basePath !== 'string') {\r\n                basePath = this.basePath;\r\n            }\r\n            this.configuration.basePath = basePath;\r\n        }\r\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\r\n    }\r\n    addToHttpParams(httpParams, value, key) {\r\n        if (typeof value === \"object\" && value instanceof Date === false) {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\r\n        }\r\n        else {\r\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\r\n        }\r\n        return httpParams;\r\n    }\r\n    addToHttpParamsRecursive(httpParams, value, key) {\r\n        if (value == null) {\r\n            return httpParams;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\r\n            }\r\n            else if (value instanceof Date) {\r\n                if (key != null) {\r\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\r\n                }\r\n                else {\r\n                    throw Error(\"key may not be null if value is Date\");\r\n                }\r\n            }\r\n            else {\r\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\r\n            }\r\n        }\r\n        else if (key != null) {\r\n            httpParams = httpParams.append(key, value);\r\n        }\r\n        else {\r\n            throw Error(\"key may not be null if value is not object or array\");\r\n        }\r\n        return httpParams;\r\n    }\r\n    tenantRESTControllerCreate(contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Tenant/Create`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerGetByObjectId(objectId, observe = 'body', reportProgress = false, options) {\r\n        if (objectId === null || objectId === undefined) {\r\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.get(`${this.configuration.basePath}/api/Tenant/GetByObjectId`, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n    tenantRESTControllerUpdate(contentCollectionId, contentEntitiesTenant, observe = 'body', reportProgress = false, options) {\r\n        if (contentCollectionId === null || contentCollectionId === undefined) {\r\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\r\n        }\r\n        let localVarHeaders = this.defaultHeaders;\r\n        let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\r\n        if (localVarHttpHeaderAcceptSelected === undefined) {\r\n            // to determine the Accept header\r\n            const httpHeaderAccepts = [\r\n                'application/json;odata.metadata=minimal;odata.streaming=true',\r\n                'application/json;odata.metadata=minimal;odata.streaming=false',\r\n                'application/json;odata.metadata=minimal',\r\n                'application/json;odata.metadata=full;odata.streaming=true',\r\n                'application/json;odata.metadata=full;odata.streaming=false',\r\n                'application/json;odata.metadata=full',\r\n                'application/json;odata.metadata=none;odata.streaming=true',\r\n                'application/json;odata.metadata=none;odata.streaming=false',\r\n                'application/json;odata.metadata=none',\r\n                'application/json;odata.streaming=true',\r\n                'application/json;odata.streaming=false',\r\n                'application/json',\r\n                'application/xml',\r\n                'text/plain',\r\n                'application/octet-stream',\r\n                'text/json'\r\n            ];\r\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        }\r\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\r\n        }\r\n        let localVarHttpContext = options && options.context;\r\n        if (localVarHttpContext === undefined) {\r\n            localVarHttpContext = new HttpContext();\r\n        }\r\n        // to determine the Content-Type header\r\n        const consumes = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected !== undefined) {\r\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n        let responseType_ = 'json';\r\n        if (localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\r\n            responseType_ = 'text';\r\n        }\r\n        return this.httpClient.post(`${this.configuration.basePath}/api/Tenant/Update`, contentEntitiesTenant, {\r\n            context: localVarHttpContext,\r\n            responseType: responseType_,\r\n            withCredentials: this.configuration.withCredentials,\r\n            headers: localVarHeaders,\r\n            observe: observe,\r\n            reportProgress: reportProgress\r\n        });\r\n    }\r\n}\r\nTenantRESTService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, deps: [{ token: i1.HttpClient }, { token: BASE_PATH, optional: true }, { token: Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTenantRESTService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: TenantRESTService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [BASE_PATH]\r\n                    }] }, { type: Configuration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\nconst APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessContentRESTService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MimeTypeService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantRESTService];\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermission;\r\n(function (ContentEntitiesACEPermission) {\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    ContentEntitiesACEPermission[ContentEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(ContentEntitiesACEPermission || (ContentEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionScope;\r\n(function (ContentEntitiesACEPermissionScope) {\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    ContentEntitiesACEPermissionScope[ContentEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(ContentEntitiesACEPermissionScope || (ContentEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesACEPermissionType;\r\n(function (ContentEntitiesACEPermissionType) {\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    ContentEntitiesACEPermissionType[ContentEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n})(ContentEntitiesACEPermissionType || (ContentEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar ContentEntitiesTenantIdentifierStrategyName;\r\n(function (ContentEntitiesTenantIdentifierStrategyName) {\r\n    ContentEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    ContentEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(ContentEntitiesTenantIdentifierStrategyName || (ContentEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermission;\r\n(function (HostingEntitiesACEPermission) {\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_6\"] = 6] = \"NUMBER_6\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_7\"] = 7] = \"NUMBER_7\";\r\n    HostingEntitiesACEPermission[HostingEntitiesACEPermission[\"NUMBER_8\"] = 8] = \"NUMBER_8\";\r\n})(HostingEntitiesACEPermission || (HostingEntitiesACEPermission = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionScope;\r\n(function (HostingEntitiesACEPermissionScope) {\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n    HostingEntitiesACEPermissionScope[HostingEntitiesACEPermissionScope[\"NUMBER_5\"] = 5] = \"NUMBER_5\";\r\n})(HostingEntitiesACEPermissionScope || (HostingEntitiesACEPermissionScope = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesACEPermissionType;\r\n(function (HostingEntitiesACEPermissionType) {\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_0\"] = 0] = \"NUMBER_0\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_1\"] = 1] = \"NUMBER_1\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_2\"] = 2] = \"NUMBER_2\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_3\"] = 3] = \"NUMBER_3\";\r\n    HostingEntitiesACEPermissionType[HostingEntitiesACEPermissionType[\"NUMBER_4\"] = 4] = \"NUMBER_4\";\r\n})(HostingEntitiesACEPermissionType || (HostingEntitiesACEPermissionType = {}));\r\n;\n\n/**\r\n * Horseless Content API\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nvar HostingEntitiesTenantIdentifierStrategyName;\r\n(function (HostingEntitiesTenantIdentifierStrategyName) {\r\n    HostingEntitiesTenantIdentifierStrategyName[\"static\"] = \"STATIC\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"basePath\"] = \"BASE_PATH\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"aspnetcoreRoute\"] = \"ASPNETCORE_ROUTE\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsHostname\"] = \"DNS_HOSTNAME\";\r\n    HostingEntitiesTenantIdentifierStrategyName[\"dnsFqdn\"] = \"DNS_FQDN\";\r\n})(HostingEntitiesTenantIdentifierStrategyName || (HostingEntitiesTenantIdentifierStrategyName = {}));\r\n;\n\nclass ApiModule {\r\n    constructor(parentModule, http) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n                'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n    static forRoot(configurationFactory) {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n        };\r\n    }\r\n}\r\nApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule });\r\nApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, providers: [], imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ApiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [],\r\n                    exports: [],\r\n                    providers: []\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: ApiModule, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: SkipSelf\r\n                    }] }, { type: i1.HttpClient, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, ContentCollectionRESTService, ContentCollectionService, ContentEntitiesACEPermission, ContentEntitiesACEPermissionScope, ContentEntitiesACEPermissionType, ContentEntitiesTenantIdentifierStrategyName, FilesystemAssetRESTService, FilesystemAssetService, HolonymRESTService, HolonymService, HorselessContentRESTService, HorselessContentService, HorselessSessionRESTService, HorselessSessionService, HostingEntitiesACEPermission, HostingEntitiesACEPermissionScope, HostingEntitiesACEPermissionType, HostingEntitiesTenantIdentifierStrategyName, JSONAssetRESTService, JSONAssetService, KeycloakAuthenticationService, MeronymRESTService, MeronymService, MimeTypeRESTService, MimeTypeService, NavigationMenuItemRESTService, NavigationMenuItemService, NavigationMenuRESTService, NavigationMenuService, TenantRESTService, TenantService };\n//# sourceMappingURL=wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs.map\n","map":{"version":3,"file":"wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.mjs","sources":["../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/encoder.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/variables.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/configuration.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/contentCollection.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/contentCollectionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/filesystemAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/filesystemAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/holonym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/holonymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessContent.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessContentREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessSession.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/horselessSessionREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/jSONAsset.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/jSONAssetREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/keycloakAuthentication.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/meronym.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/meronymREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/mimeType.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/mimeTypeREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenu.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuItem.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuItemREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/navigationMenuREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/tenant.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/tenantREST.service.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api/api.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/contentEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesACEPermission.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesACEPermissionScope.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesACEPermissionType.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/model/hostingEntitiesTenantIdentifierStrategyName.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/api.module.ts","../../../../projects/wizardcontroller/horseless-contentapi-lib/src/horseless-contentapi/wizardcontroller-horseless-contentapi-lib-src-horseless-contentapi.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentCollectionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesContentCollection>>;\n    public contentCollectionControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesContentCollection>>>;\n    public contentCollectionControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesContentCollection>>>;\n    public contentCollectionControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesContentCollection>>(`${this.configuration.basePath}/HorselessContent/ContentCollection/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentCollectionRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerCreate(contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/ContentCollection/Create`,\n            contentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling contentCollectionRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/ContentCollection/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesContentCollection \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public contentCollectionRESTControllerUpdate(contentCollectionId: string, contentEntitiesContentCollection?: ContentEntitiesContentCollection, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling contentCollectionRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/ContentCollection/Update`,\n            contentEntitiesContentCollection,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesFilesystemAsset>>>;\n    public filesystemAssetControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesFilesystemAsset>>>;\n    public filesystemAssetControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesFilesystemAsset>>(`${this.configuration.basePath}/HorselessContent/FilesystemAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesFilesystemAsset } from '../model/contentEntitiesFilesystemAsset';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemAssetRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerCreate(contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/FilesystemAsset/Create`,\n            contentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling filesystemAssetRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/FilesystemAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesFilesystemAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesFilesystemAsset>;\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesFilesystemAsset>>;\n    public filesystemAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesFilesystemAsset?: ContentEntitiesFilesystemAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling filesystemAssetRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesFilesystemAsset>(`${this.configuration.basePath}/api/FilesystemAsset/Update`,\n            contentEntitiesFilesystemAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HolonymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHolonym>>;\n    public holonymControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHolonym>>>;\n    public holonymControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHolonym>>>;\n    public holonymControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesHolonym>>(`${this.configuration.basePath}/HorselessContent/Holonym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHolonym } from '../model/contentEntitiesHolonym';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HolonymRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\n    public holonymRESTControllerCreate(contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/Holonym/Create`,\n            contentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\n    public holonymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\n    public holonymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling holonymRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/Holonym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesHolonym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHolonym>;\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHolonym>>;\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHolonym>>;\n    public holonymRESTControllerUpdate(contentCollectionId: string, contentEntitiesHolonym?: ContentEntitiesHolonym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling holonymRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHolonym>(`${this.configuration.basePath}/api/Holonym/Update`,\n            contentEntitiesHolonym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHorselessContent } from '../model/contentEntitiesHorselessContent';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessContent>>;\n    public horselessContentControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessContent>>>;\n    public horselessContentControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessContent>>>;\n    public horselessContentControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesHorselessContent>>(`${this.configuration.basePath}/HorselessContent/HorselessContent/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHorselessContent } from '../model/contentEntitiesHorselessContent';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessContentRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHorselessContent>;\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerCreate(contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHorselessContent>(`${this.configuration.basePath}/api/HorselessContent/Create`,\n            contentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHorselessContent>;\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling horselessContentRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesHorselessContent>(`${this.configuration.basePath}/api/HorselessContent/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesHorselessContent \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesHorselessContent>;\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesHorselessContent>>;\n    public horselessContentRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessContent?: ContentEntitiesHorselessContent, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessContentRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesHorselessContent>(`${this.configuration.basePath}/api/HorselessContent/Update`,\n            contentEntitiesHorselessContent,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessSessionService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesHorselessSession>>;\n    public horselessSessionControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesHorselessSession>>>;\n    public horselessSessionControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesHorselessSession>>>;\n    public horselessSessionControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesHorselessSession>>(`${this.configuration.basePath}/HorselessContent/HorselessSession/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesContentCollection } from '../model/contentEntitiesContentCollection';\n// @ts-ignore\nimport { ContentEntitiesHorselessSession } from '../model/contentEntitiesHorselessSession';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorselessSessionRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerCreate(contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessSession/Create`,\n            contentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling horselessSessionRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessSession/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesHorselessSession \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesContentCollection>;\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesContentCollection>>;\n    public horselessSessionRESTControllerUpdate(contentCollectionId: string, contentEntitiesHorselessSession?: ContentEntitiesHorselessSession, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling horselessSessionRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesContentCollection>(`${this.configuration.basePath}/api/HorselessSession/Update`,\n            contentEntitiesHorselessSession,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONAssetService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesJSONAsset>>;\n    public jSONAssetControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesJSONAsset>>>;\n    public jSONAssetControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesJSONAsset>>>;\n    public jSONAssetControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesJSONAsset>>(`${this.configuration.basePath}/HorselessContent/JSONAsset/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesJSONAsset } from '../model/contentEntitiesJSONAsset';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONAssetRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerCreate(contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/JSONAsset/Create`,\n            contentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling jSONAssetRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/JSONAsset/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesJSONAsset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesJSONAsset>;\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesJSONAsset>>;\n    public jSONAssetRESTControllerUpdate(contentCollectionId: string, contentEntitiesJSONAsset?: ContentEntitiesJSONAsset, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling jSONAssetRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesJSONAsset>(`${this.configuration.basePath}/api/JSONAsset/Update`,\n            contentEntitiesJSONAsset,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KeycloakAuthenticationService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public keycloakAuthenticationControllerSignIn(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public keycloakAuthenticationControllerSignIn(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public keycloakAuthenticationControllerSignIn(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public keycloakAuthenticationControllerSignIn(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param provider \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public keycloakAuthenticationControllerSignIn_1(provider?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let localVarFormParams: { append(param: string, value: any): any; };\n        let localVarUseForm = false;\n        let localVarConvertFormParamsToString = false;\n        if (localVarUseForm) {\n            localVarFormParams = new FormData();\n        } else {\n            localVarFormParams = new HttpParams({encoder: this.encoder});\n        }\n\n        if (provider !== undefined) {\n            localVarFormParams = localVarFormParams.append('provider', <any>provider) as any || localVarFormParams;\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/SignIn`,\n            localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public keycloakAuthenticationControllerSignOutCurrentUser(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/Keycloak/Signout`,\n            null,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeronymService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMeronym>>;\n    public meronymControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMeronym>>>;\n    public meronymControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMeronym>>>;\n    public meronymControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesMeronym>>(`${this.configuration.basePath}/HorselessContent/Meronym/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMeronym } from '../model/contentEntitiesMeronym';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeronymRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\n    public meronymRESTControllerCreate(contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/Meronym/Create`,\n            contentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\n    public meronymRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\n    public meronymRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling meronymRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/Meronym/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesMeronym \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMeronym>;\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMeronym>>;\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMeronym>>;\n    public meronymRESTControllerUpdate(contentCollectionId: string, contentEntitiesMeronym?: ContentEntitiesMeronym, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling meronymRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMeronym>(`${this.configuration.basePath}/api/Meronym/Update`,\n            contentEntitiesMeronym,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MimeTypeService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesMIMEType>>;\n    public mimeTypeControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesMIMEType>>>;\n    public mimeTypeControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesMIMEType>>>;\n    public mimeTypeControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesMIMEType>>(`${this.configuration.basePath}/HorselessContent/MIMEType/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MimeTypeRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerCreate(contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/MIMEType/Create`,\n            contentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling mimeTypeRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/MIMEType/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesMIMEType \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public mimeTypeRESTControllerUpdate(contentCollectionId: string, contentEntitiesMIMEType?: ContentEntitiesMIMEType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling mimeTypeRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/MIMEType/Update`,\n            contentEntitiesMIMEType,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenu>>;\n    public navigationMenuControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenu>>>;\n    public navigationMenuControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenu>>>;\n    public navigationMenuControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenu>>(`${this.configuration.basePath}/HorselessContent/NavigationMenu/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuItemService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<Array<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesNavigationMenuItem>>>;\n    public navigationMenuItemControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesNavigationMenuItem>>>;\n    public navigationMenuItemControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesNavigationMenuItem>>(`${this.configuration.basePath}/HorselessContent/NavigationMenuItem/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesNavigationMenuItem } from '../model/contentEntitiesNavigationMenuItem';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuItemRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerCreate(contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/NavigationMenuItem/Create`,\n            contentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuItemRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/NavigationMenuItem/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesNavigationMenuItem \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesNavigationMenuItem>;\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesNavigationMenuItem>>;\n    public navigationMenuItemRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenuItem?: ContentEntitiesNavigationMenuItem, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuItemRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesNavigationMenuItem>(`${this.configuration.basePath}/api/NavigationMenuItem/Update`,\n            contentEntitiesNavigationMenuItem,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesMIMEType } from '../model/contentEntitiesMIMEType';\n// @ts-ignore\nimport { ContentEntitiesNavigationMenu } from '../model/contentEntitiesNavigationMenu';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationMenuRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerCreate(contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/NavigationMenu/Create`,\n            contentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling navigationMenuRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/NavigationMenu/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesNavigationMenu \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesMIMEType>;\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesMIMEType>>;\n    public navigationMenuRESTControllerUpdate(contentCollectionId: string, contentEntitiesNavigationMenu?: ContentEntitiesNavigationMenu, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling navigationMenuRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesMIMEType>(`${this.configuration.basePath}/api/NavigationMenu/Update`,\n            contentEntitiesNavigationMenu,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesTenant } from '../model/contentEntitiesTenant';\n// @ts-ignore\nimport { HostingEntitiesTenant } from '../model/hostingEntitiesTenant';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TenantService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerGet_1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerGet_1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerGet_1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerGet_1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerGet_2(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerGet_2(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerGet_2(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerGet_2(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/HorselessContent/Tenant/$count`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param hostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerPost(hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessContent/Tenant`,\n            hostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param hostingEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;\n    public tenantControllerPost_3(hostingEntitiesTenant?: HostingEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/HorselessHosting/Tenant/Create`,\n            hostingEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantControllerQuery(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContentEntitiesTenant>>;\n    public tenantControllerQuery(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContentEntitiesTenant>>>;\n    public tenantControllerQuery(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContentEntitiesTenant>>>;\n    public tenantControllerQuery(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<ContentEntitiesTenant>>(`${this.configuration.basePath}/HorselessContent/Tenant/Query`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext \n        }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n// @ts-ignore\nimport { ContentEntitiesTenant } from '../model/contentEntitiesTenant';\n// @ts-ignore\nimport { MvcProblemDetails } from '../model/mvcProblemDetails';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TenantRESTService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param contentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\n    public tenantRESTControllerCreate(contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/Tenant/Create`,\n            contentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param objectId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\n    public tenantRESTControllerGetByObjectId(objectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\n    public tenantRESTControllerGetByObjectId(objectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (objectId === null || objectId === undefined) {\n            throw new Error('Required parameter objectId was null or undefined when calling tenantRESTControllerGetByObjectId.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<ContentEntitiesTenant>(`${this.configuration.basePath}/api/Tenant/GetByObjectId`,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param contentCollectionId \n     * @param contentEntitiesTenant \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<ContentEntitiesTenant>;\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ContentEntitiesTenant>>;\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ContentEntitiesTenant>>;\n    public tenantRESTControllerUpdate(contentCollectionId: string, contentEntitiesTenant?: ContentEntitiesTenant, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;minimal;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;minimal' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;full;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;full' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;true' | 'application/json;odata.metadata&#x3D;none;odata.streaming&#x3D;false' | 'application/json;odata.metadata&#x3D;none' | 'application/json;odata.streaming&#x3D;true' | 'application/json;odata.streaming&#x3D;false' | 'application/json' | 'application/xml' | 'text/plain' | 'application/octet-stream' | 'text/json', context?: HttpContext}): Observable<any> {\n        if (contentCollectionId === null || contentCollectionId === undefined) {\n            throw new Error('Required parameter contentCollectionId was null or undefined when calling tenantRESTControllerUpdate.');\n        }\n\n        let localVarHeaders = this.defaultHeaders;\n\n        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (localVarHttpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json;odata.metadata=minimal;odata.streaming=true',\n                'application/json;odata.metadata=minimal;odata.streaming=false',\n                'application/json;odata.metadata=minimal',\n                'application/json;odata.metadata=full;odata.streaming=true',\n                'application/json;odata.metadata=full;odata.streaming=false',\n                'application/json;odata.metadata=full',\n                'application/json;odata.metadata=none;odata.streaming=true',\n                'application/json;odata.metadata=none;odata.streaming=false',\n                'application/json;odata.metadata=none',\n                'application/json;odata.streaming=true',\n                'application/json;odata.streaming=false',\n                'application/json',\n                'application/xml',\n                'text/plain',\n                'application/octet-stream',\n                'text/json'\n            ];\n            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (localVarHttpHeaderAcceptSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n        }\n\n        let localVarHttpContext: HttpContext | undefined = options && options.context;\n        if (localVarHttpContext === undefined) {\n            localVarHttpContext = new HttpContext();\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ContentEntitiesTenant>(`${this.configuration.basePath}/api/Tenant/Update`,\n            contentEntitiesTenant,\n            {\n                context: localVarHttpContext,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: localVarHeaders,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './contentCollection.service';\nimport { ContentCollectionService } from './contentCollection.service';\nexport * from './contentCollectionREST.service';\nimport { ContentCollectionRESTService } from './contentCollectionREST.service';\nexport * from './filesystemAsset.service';\nimport { FilesystemAssetService } from './filesystemAsset.service';\nexport * from './filesystemAssetREST.service';\nimport { FilesystemAssetRESTService } from './filesystemAssetREST.service';\nexport * from './holonym.service';\nimport { HolonymService } from './holonym.service';\nexport * from './holonymREST.service';\nimport { HolonymRESTService } from './holonymREST.service';\nexport * from './horselessContent.service';\nimport { HorselessContentService } from './horselessContent.service';\nexport * from './horselessContentREST.service';\nimport { HorselessContentRESTService } from './horselessContentREST.service';\nexport * from './horselessSession.service';\nimport { HorselessSessionService } from './horselessSession.service';\nexport * from './horselessSessionREST.service';\nimport { HorselessSessionRESTService } from './horselessSessionREST.service';\nexport * from './jSONAsset.service';\nimport { JSONAssetService } from './jSONAsset.service';\nexport * from './jSONAssetREST.service';\nimport { JSONAssetRESTService } from './jSONAssetREST.service';\nexport * from './keycloakAuthentication.service';\nimport { KeycloakAuthenticationService } from './keycloakAuthentication.service';\nexport * from './meronym.service';\nimport { MeronymService } from './meronym.service';\nexport * from './meronymREST.service';\nimport { MeronymRESTService } from './meronymREST.service';\nexport * from './mimeType.service';\nimport { MimeTypeService } from './mimeType.service';\nexport * from './mimeTypeREST.service';\nimport { MimeTypeRESTService } from './mimeTypeREST.service';\nexport * from './navigationMenu.service';\nimport { NavigationMenuService } from './navigationMenu.service';\nexport * from './navigationMenuItem.service';\nimport { NavigationMenuItemService } from './navigationMenuItem.service';\nexport * from './navigationMenuItemREST.service';\nimport { NavigationMenuItemRESTService } from './navigationMenuItemREST.service';\nexport * from './navigationMenuREST.service';\nimport { NavigationMenuRESTService } from './navigationMenuREST.service';\nexport * from './tenant.service';\nimport { TenantService } from './tenant.service';\nexport * from './tenantREST.service';\nimport { TenantRESTService } from './tenantREST.service';\nexport const APIS = [ContentCollectionService, ContentCollectionRESTService, FilesystemAssetService, FilesystemAssetRESTService, HolonymService, HolonymRESTService, HorselessContentService, HorselessContentRESTService, HorselessSessionService, HorselessSessionRESTService, JSONAssetService, JSONAssetRESTService, KeycloakAuthenticationService, MeronymService, MeronymRESTService, MimeTypeService, MimeTypeRESTService, NavigationMenuService, NavigationMenuItemService, NavigationMenuItemRESTService, NavigationMenuRESTService, TenantService, TenantRESTService];\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum ContentEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesACEPermission {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5,\n    NUMBER_6 = 6,\n    NUMBER_7 = 7,\n    NUMBER_8 = 8\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesACEPermissionScope {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4,\n    NUMBER_5 = 5\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesACEPermissionType {\n    NUMBER_0 = 0,\n    NUMBER_1 = 1,\n    NUMBER_2 = 2,\n    NUMBER_3 = 3,\n    NUMBER_4 = 4\n};\n\n","/**\n * Horseless Content API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport enum HostingEntitiesTenantIdentifierStrategyName {\n    static = 'STATIC',\n    basePath = 'BASE_PATH',\n    aspnetcoreRoute = 'ASPNETCORE_ROUTE',\n    dnsHostname = 'DNS_HOSTNAME',\n    dnsFqdn = 'DNS_FQDN'\n};\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ContentCollectionService } from './api/contentCollection.service';\nimport { ContentCollectionRESTService } from './api/contentCollectionREST.service';\nimport { FilesystemAssetService } from './api/filesystemAsset.service';\nimport { FilesystemAssetRESTService } from './api/filesystemAssetREST.service';\nimport { HolonymService } from './api/holonym.service';\nimport { HolonymRESTService } from './api/holonymREST.service';\nimport { HorselessContentService } from './api/horselessContent.service';\nimport { HorselessContentRESTService } from './api/horselessContentREST.service';\nimport { HorselessSessionService } from './api/horselessSession.service';\nimport { HorselessSessionRESTService } from './api/horselessSessionREST.service';\nimport { JSONAssetService } from './api/jSONAsset.service';\nimport { JSONAssetRESTService } from './api/jSONAssetREST.service';\nimport { KeycloakAuthenticationService } from './api/keycloakAuthentication.service';\nimport { MeronymService } from './api/meronym.service';\nimport { MeronymRESTService } from './api/meronymREST.service';\nimport { MimeTypeService } from './api/mimeType.service';\nimport { MimeTypeRESTService } from './api/mimeTypeREST.service';\nimport { NavigationMenuService } from './api/navigationMenu.service';\nimport { NavigationMenuItemService } from './api/navigationMenuItem.service';\nimport { NavigationMenuItemRESTService } from './api/navigationMenuItemREST.service';\nimport { NavigationMenuRESTService } from './api/navigationMenuREST.service';\nimport { TenantService } from './api/tenant.service';\nimport { TenantRESTService } from './api/tenantREST.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}}}