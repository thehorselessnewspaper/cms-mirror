/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing RoleMapperApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RoleMapperApiTests : IDisposable
    {
        private RoleMapperApi instance;

        public RoleMapperApiTests()
        {
            instance = new RoleMapperApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RoleMapperApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RoleMapperApi
            //Assert.IsType<RoleMapperApi>(instance);
        }

        /// <summary>
        /// Test RealmGroupsIdRoleMappingsGet
        /// </summary>
        [Fact]
        public void RealmGroupsIdRoleMappingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmGroupsIdRoleMappingsGet(realm, id);
            //Assert.IsType<MappingsRepresentation>(response);
        }

        /// <summary>
        /// Test RealmGroupsIdRoleMappingsRealmAvailableGet
        /// </summary>
        [Fact]
        public void RealmGroupsIdRoleMappingsRealmAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmGroupsIdRoleMappingsRealmAvailableGet(realm, id);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmGroupsIdRoleMappingsRealmCompositeGet
        /// </summary>
        [Fact]
        public void RealmGroupsIdRoleMappingsRealmCompositeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //bool? briefRepresentation = null;
            //var response = instance.RealmGroupsIdRoleMappingsRealmCompositeGet(realm, id, briefRepresentation);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmGroupsIdRoleMappingsRealmDelete
        /// </summary>
        [Fact]
        public void RealmGroupsIdRoleMappingsRealmDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //List<RoleRepresentation> roleRepresentation = null;
            //instance.RealmGroupsIdRoleMappingsRealmDelete(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Test RealmGroupsIdRoleMappingsRealmGet
        /// </summary>
        [Fact]
        public void RealmGroupsIdRoleMappingsRealmGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmGroupsIdRoleMappingsRealmGet(realm, id);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmGroupsIdRoleMappingsRealmPost
        /// </summary>
        [Fact]
        public void RealmGroupsIdRoleMappingsRealmPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //List<RoleRepresentation> roleRepresentation = null;
            //instance.RealmGroupsIdRoleMappingsRealmPost(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Test RealmUsersIdRoleMappingsGet
        /// </summary>
        [Fact]
        public void RealmUsersIdRoleMappingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmUsersIdRoleMappingsGet(realm, id);
            //Assert.IsType<MappingsRepresentation>(response);
        }

        /// <summary>
        /// Test RealmUsersIdRoleMappingsRealmAvailableGet
        /// </summary>
        [Fact]
        public void RealmUsersIdRoleMappingsRealmAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmUsersIdRoleMappingsRealmAvailableGet(realm, id);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmUsersIdRoleMappingsRealmCompositeGet
        /// </summary>
        [Fact]
        public void RealmUsersIdRoleMappingsRealmCompositeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //bool? briefRepresentation = null;
            //var response = instance.RealmUsersIdRoleMappingsRealmCompositeGet(realm, id, briefRepresentation);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmUsersIdRoleMappingsRealmDelete
        /// </summary>
        [Fact]
        public void RealmUsersIdRoleMappingsRealmDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //List<RoleRepresentation> roleRepresentation = null;
            //instance.RealmUsersIdRoleMappingsRealmDelete(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Test RealmUsersIdRoleMappingsRealmGet
        /// </summary>
        [Fact]
        public void RealmUsersIdRoleMappingsRealmGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmUsersIdRoleMappingsRealmGet(realm, id);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmUsersIdRoleMappingsRealmPost
        /// </summary>
        [Fact]
        public void RealmUsersIdRoleMappingsRealmPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //List<RoleRepresentation> roleRepresentation = null;
            //instance.RealmUsersIdRoleMappingsRealmPost(realm, id, roleRepresentation);
        }
    }
}
