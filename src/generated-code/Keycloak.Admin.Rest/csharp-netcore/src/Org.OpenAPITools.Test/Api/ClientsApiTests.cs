/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ClientsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ClientsApiTests : IDisposable
    {
        private ClientsApi instance;

        public ClientsApiTests()
        {
            instance = new ClientsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ClientsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ClientsApi
            //Assert.IsType<ClientsApi>(instance);
        }

        /// <summary>
        /// Test RealmClientsGet
        /// </summary>
        [Fact]
        public void RealmClientsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string clientId = null;
            //int? first = null;
            //int? max = null;
            //string q = null;
            //bool? search = null;
            //bool? viewableOnly = null;
            //var response = instance.RealmClientsGet(realm, clientId, first, max, q, search, viewableOnly);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdClientSecretGet
        /// </summary>
        [Fact]
        public void RealmClientsIdClientSecretGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdClientSecretGet(realm, id);
            //Assert.IsType<CredentialRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientsIdClientSecretPost
        /// </summary>
        [Fact]
        public void RealmClientsIdClientSecretPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdClientSecretPost(realm, id);
            //Assert.IsType<CredentialRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientsIdDefaultClientScopesClientScopeIdDelete
        /// </summary>
        [Fact]
        public void RealmClientsIdDefaultClientScopesClientScopeIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string clientScopeId = null;
            //instance.RealmClientsIdDefaultClientScopesClientScopeIdDelete(realm, id, clientScopeId);
        }

        /// <summary>
        /// Test RealmClientsIdDefaultClientScopesClientScopeIdPut
        /// </summary>
        [Fact]
        public void RealmClientsIdDefaultClientScopesClientScopeIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string clientScopeId = null;
            //instance.RealmClientsIdDefaultClientScopesClientScopeIdPut(realm, id, clientScopeId);
        }

        /// <summary>
        /// Test RealmClientsIdDefaultClientScopesGet
        /// </summary>
        [Fact]
        public void RealmClientsIdDefaultClientScopesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdDefaultClientScopesGet(realm, id);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdDelete
        /// </summary>
        [Fact]
        public void RealmClientsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //instance.RealmClientsIdDelete(realm, id);
        }

        /// <summary>
        /// Test RealmClientsIdEvaluateScopesGenerateExampleAccessTokenGet
        /// </summary>
        [Fact]
        public void RealmClientsIdEvaluateScopesGenerateExampleAccessTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string scope = null;
            //string userId = null;
            //var response = instance.RealmClientsIdEvaluateScopesGenerateExampleAccessTokenGet(realm, id, scope, userId);
            //Assert.IsType<AccessToken>(response);
        }

        /// <summary>
        /// Test RealmClientsIdEvaluateScopesGenerateExampleIdTokenGet
        /// </summary>
        [Fact]
        public void RealmClientsIdEvaluateScopesGenerateExampleIdTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string scope = null;
            //string userId = null;
            //var response = instance.RealmClientsIdEvaluateScopesGenerateExampleIdTokenGet(realm, id, scope, userId);
            //Assert.IsType<IDToken>(response);
        }

        /// <summary>
        /// Test RealmClientsIdEvaluateScopesGenerateExampleUserinfoGet
        /// </summary>
        [Fact]
        public void RealmClientsIdEvaluateScopesGenerateExampleUserinfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string scope = null;
            //string userId = null;
            //var response = instance.RealmClientsIdEvaluateScopesGenerateExampleUserinfoGet(realm, id, scope, userId);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdEvaluateScopesProtocolMappersGet
        /// </summary>
        [Fact]
        public void RealmClientsIdEvaluateScopesProtocolMappersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string scope = null;
            //var response = instance.RealmClientsIdEvaluateScopesProtocolMappersGet(realm, id, scope);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet
        /// </summary>
        [Fact]
        public void RealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string roleContainerId = null;
            //string scope = null;
            //var response = instance.RealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(realm, id, roleContainerId, scope);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet
        /// </summary>
        [Fact]
        public void RealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string roleContainerId = null;
            //string scope = null;
            //var response = instance.RealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(realm, id, roleContainerId, scope);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdGet
        /// </summary>
        [Fact]
        public void RealmClientsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdGet(realm, id);
            //Assert.IsType<ClientRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientsIdInstallationProvidersProviderIdGet
        /// </summary>
        [Fact]
        public void RealmClientsIdInstallationProvidersProviderIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string providerId = null;
            //instance.RealmClientsIdInstallationProvidersProviderIdGet(realm, id, providerId);
        }

        /// <summary>
        /// Test RealmClientsIdManagementPermissionsGet
        /// </summary>
        [Fact]
        public void RealmClientsIdManagementPermissionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdManagementPermissionsGet(realm, id);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmClientsIdManagementPermissionsPut
        /// </summary>
        [Fact]
        public void RealmClientsIdManagementPermissionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //ManagementPermissionReference managementPermissionReference = null;
            //var response = instance.RealmClientsIdManagementPermissionsPut(realm, id, managementPermissionReference);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmClientsIdNodesNodeDelete
        /// </summary>
        [Fact]
        public void RealmClientsIdNodesNodeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string node = null;
            //instance.RealmClientsIdNodesNodeDelete(realm, id, node);
        }

        /// <summary>
        /// Test RealmClientsIdNodesPost
        /// </summary>
        [Fact]
        public void RealmClientsIdNodesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmClientsIdNodesPost(realm, id, requestBody);
        }

        /// <summary>
        /// Test RealmClientsIdOfflineSessionCountGet
        /// </summary>
        [Fact]
        public void RealmClientsIdOfflineSessionCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdOfflineSessionCountGet(realm, id);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdOfflineSessionsGet
        /// </summary>
        [Fact]
        public void RealmClientsIdOfflineSessionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //int? first = null;
            //int? max = null;
            //var response = instance.RealmClientsIdOfflineSessionsGet(realm, id, first, max);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdOptionalClientScopesClientScopeIdDelete
        /// </summary>
        [Fact]
        public void RealmClientsIdOptionalClientScopesClientScopeIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string clientScopeId = null;
            //instance.RealmClientsIdOptionalClientScopesClientScopeIdDelete(realm, id, clientScopeId);
        }

        /// <summary>
        /// Test RealmClientsIdOptionalClientScopesClientScopeIdPut
        /// </summary>
        [Fact]
        public void RealmClientsIdOptionalClientScopesClientScopeIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //string clientScopeId = null;
            //instance.RealmClientsIdOptionalClientScopesClientScopeIdPut(realm, id, clientScopeId);
        }

        /// <summary>
        /// Test RealmClientsIdOptionalClientScopesGet
        /// </summary>
        [Fact]
        public void RealmClientsIdOptionalClientScopesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdOptionalClientScopesGet(realm, id);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdPushRevocationPost
        /// </summary>
        [Fact]
        public void RealmClientsIdPushRevocationPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdPushRevocationPost(realm, id);
            //Assert.IsType<GlobalRequestResult>(response);
        }

        /// <summary>
        /// Test RealmClientsIdPut
        /// </summary>
        [Fact]
        public void RealmClientsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //ClientRepresentation clientRepresentation = null;
            //instance.RealmClientsIdPut(realm, id, clientRepresentation);
        }

        /// <summary>
        /// Test RealmClientsIdRegistrationAccessTokenPost
        /// </summary>
        [Fact]
        public void RealmClientsIdRegistrationAccessTokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdRegistrationAccessTokenPost(realm, id);
            //Assert.IsType<ClientRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientsIdServiceAccountUserGet
        /// </summary>
        [Fact]
        public void RealmClientsIdServiceAccountUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdServiceAccountUserGet(realm, id);
            //Assert.IsType<UserRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientsIdSessionCountGet
        /// </summary>
        [Fact]
        public void RealmClientsIdSessionCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdSessionCountGet(realm, id);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RealmClientsIdTestNodesAvailableGet
        /// </summary>
        [Fact]
        public void RealmClientsIdTestNodesAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmClientsIdTestNodesAvailableGet(realm, id);
            //Assert.IsType<GlobalRequestResult>(response);
        }

        /// <summary>
        /// Test RealmClientsIdUserSessionsGet
        /// </summary>
        [Fact]
        public void RealmClientsIdUserSessionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //int? first = null;
            //int? max = null;
            //var response = instance.RealmClientsIdUserSessionsGet(realm, id, first, max);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClientsPost
        /// </summary>
        [Fact]
        public void RealmClientsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //ClientRepresentation clientRepresentation = null;
            //instance.RealmClientsPost(realm, clientRepresentation);
        }
    }
}
