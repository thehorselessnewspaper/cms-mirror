/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AuthenticationManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthenticationManagementApiTests : IDisposable
    {
        private AuthenticationManagementApi instance;

        public AuthenticationManagementApiTests()
        {
            instance = new AuthenticationManagementApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AuthenticationManagementApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AuthenticationManagementApi
            //Assert.IsType<AuthenticationManagementApi>(instance);
        }

        /// <summary>
        /// Test RealmAuthenticationAuthenticatorProvidersGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationAuthenticatorProvidersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationAuthenticatorProvidersGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationClientAuthenticatorProvidersGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationClientAuthenticatorProvidersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationClientAuthenticatorProvidersGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationConfigDescriptionProviderIdGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationConfigDescriptionProviderIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string providerId = null;
            //var response = instance.RealmAuthenticationConfigDescriptionProviderIdGet(realm, providerId);
            //Assert.IsType<AuthenticatorConfigInfoRepresentation>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationConfigIdDelete
        /// </summary>
        [Fact]
        public void RealmAuthenticationConfigIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //instance.RealmAuthenticationConfigIdDelete(realm, id);
        }

        /// <summary>
        /// Test RealmAuthenticationConfigIdGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationConfigIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmAuthenticationConfigIdGet(realm, id);
            //Assert.IsType<AuthenticatorConfigRepresentation>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationConfigIdPut
        /// </summary>
        [Fact]
        public void RealmAuthenticationConfigIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //AuthenticatorConfigRepresentation authenticatorConfigRepresentation = null;
            //instance.RealmAuthenticationConfigIdPut(realm, id, authenticatorConfigRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationExecutionsExecutionIdConfigPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationExecutionsExecutionIdConfigPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string executionId = null;
            //AuthenticatorConfigRepresentation authenticatorConfigRepresentation = null;
            //instance.RealmAuthenticationExecutionsExecutionIdConfigPost(realm, executionId, authenticatorConfigRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationExecutionsExecutionIdDelete
        /// </summary>
        [Fact]
        public void RealmAuthenticationExecutionsExecutionIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string executionId = null;
            //instance.RealmAuthenticationExecutionsExecutionIdDelete(realm, executionId);
        }

        /// <summary>
        /// Test RealmAuthenticationExecutionsExecutionIdGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationExecutionsExecutionIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string executionId = null;
            //instance.RealmAuthenticationExecutionsExecutionIdGet(realm, executionId);
        }

        /// <summary>
        /// Test RealmAuthenticationExecutionsExecutionIdLowerPriorityPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationExecutionsExecutionIdLowerPriorityPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string executionId = null;
            //instance.RealmAuthenticationExecutionsExecutionIdLowerPriorityPost(realm, executionId);
        }

        /// <summary>
        /// Test RealmAuthenticationExecutionsExecutionIdRaisePriorityPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationExecutionsExecutionIdRaisePriorityPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string executionId = null;
            //instance.RealmAuthenticationExecutionsExecutionIdRaisePriorityPost(realm, executionId);
        }

        /// <summary>
        /// Test RealmAuthenticationExecutionsPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationExecutionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //AuthenticationExecutionRepresentation authenticationExecutionRepresentation = null;
            //instance.RealmAuthenticationExecutionsPost(realm, authenticationExecutionRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsFlowAliasCopyPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsFlowAliasCopyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string flowAlias = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmAuthenticationFlowsFlowAliasCopyPost(realm, flowAlias, requestBody);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string flowAlias = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(realm, flowAlias, requestBody);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsFlowAliasExecutionsFlowPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsFlowAliasExecutionsFlowPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string flowAlias = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmAuthenticationFlowsFlowAliasExecutionsFlowPost(realm, flowAlias, requestBody);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsFlowAliasExecutionsGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsFlowAliasExecutionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string flowAlias = null;
            //instance.RealmAuthenticationFlowsFlowAliasExecutionsGet(realm, flowAlias);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsFlowAliasExecutionsPut
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsFlowAliasExecutionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string flowAlias = null;
            //AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation = null;
            //instance.RealmAuthenticationFlowsFlowAliasExecutionsPut(realm, flowAlias, authenticationExecutionInfoRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationFlowsGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsIdDelete
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //instance.RealmAuthenticationFlowsIdDelete(realm, id);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsIdGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //var response = instance.RealmAuthenticationFlowsIdGet(realm, id);
            //Assert.IsType<AuthenticationFlowRepresentation>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsIdPut
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string id = null;
            //AuthenticationFlowRepresentation authenticationFlowRepresentation = null;
            //instance.RealmAuthenticationFlowsIdPut(realm, id, authenticationFlowRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationFlowsPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationFlowsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //AuthenticationFlowRepresentation authenticationFlowRepresentation = null;
            //instance.RealmAuthenticationFlowsPost(realm, authenticationFlowRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationFormActionProvidersGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationFormActionProvidersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationFormActionProvidersGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationFormProvidersGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationFormProvidersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationFormProvidersGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationPerClientConfigDescriptionGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationPerClientConfigDescriptionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationPerClientConfigDescriptionGet(realm);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationRegisterRequiredActionPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationRegisterRequiredActionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmAuthenticationRegisterRequiredActionPost(realm, requestBody);
        }

        /// <summary>
        /// Test RealmAuthenticationRequiredActionsAliasDelete
        /// </summary>
        [Fact]
        public void RealmAuthenticationRequiredActionsAliasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //instance.RealmAuthenticationRequiredActionsAliasDelete(realm, alias);
        }

        /// <summary>
        /// Test RealmAuthenticationRequiredActionsAliasGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationRequiredActionsAliasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //var response = instance.RealmAuthenticationRequiredActionsAliasGet(realm, alias);
            //Assert.IsType<RequiredActionProviderRepresentation>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationRequiredActionsAliasLowerPriorityPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationRequiredActionsAliasLowerPriorityPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //instance.RealmAuthenticationRequiredActionsAliasLowerPriorityPost(realm, alias);
        }

        /// <summary>
        /// Test RealmAuthenticationRequiredActionsAliasPut
        /// </summary>
        [Fact]
        public void RealmAuthenticationRequiredActionsAliasPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //RequiredActionProviderRepresentation requiredActionProviderRepresentation = null;
            //instance.RealmAuthenticationRequiredActionsAliasPut(realm, alias, requiredActionProviderRepresentation);
        }

        /// <summary>
        /// Test RealmAuthenticationRequiredActionsAliasRaisePriorityPost
        /// </summary>
        [Fact]
        public void RealmAuthenticationRequiredActionsAliasRaisePriorityPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //instance.RealmAuthenticationRequiredActionsAliasRaisePriorityPost(realm, alias);
        }

        /// <summary>
        /// Test RealmAuthenticationRequiredActionsGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationRequiredActionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationRequiredActionsGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmAuthenticationUnregisteredRequiredActionsGet
        /// </summary>
        [Fact]
        public void RealmAuthenticationUnregisteredRequiredActionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmAuthenticationUnregisteredRequiredActionsGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }
    }
}
