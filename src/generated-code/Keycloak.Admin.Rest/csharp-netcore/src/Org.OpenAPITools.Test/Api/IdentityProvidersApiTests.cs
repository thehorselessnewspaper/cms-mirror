/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IdentityProvidersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IdentityProvidersApiTests : IDisposable
    {
        private IdentityProvidersApi instance;

        public IdentityProvidersApiTests()
        {
            instance = new IdentityProvidersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IdentityProvidersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IdentityProvidersApi
            //Assert.IsType<IdentityProvidersApi>(instance);
        }

        /// <summary>
        /// Test RealmIdentityProviderImportConfigPost
        /// </summary>
        [Fact]
        public void RealmIdentityProviderImportConfigPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmIdentityProviderImportConfigPost(realm);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasDelete
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //instance.RealmIdentityProviderInstancesAliasDelete(realm, alias);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasExportGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasExportGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //string format = null;
            //instance.RealmIdentityProviderInstancesAliasExportGet(realm, alias, format);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //var response = instance.RealmIdentityProviderInstancesAliasGet(realm, alias);
            //Assert.IsType<IdentityProviderRepresentation>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasManagementPermissionsGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasManagementPermissionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //var response = instance.RealmIdentityProviderInstancesAliasManagementPermissionsGet(realm, alias);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasManagementPermissionsPut
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasManagementPermissionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //ManagementPermissionReference managementPermissionReference = null;
            //var response = instance.RealmIdentityProviderInstancesAliasManagementPermissionsPut(realm, alias, managementPermissionReference);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasMapperTypesGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasMapperTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //instance.RealmIdentityProviderInstancesAliasMapperTypesGet(realm, alias);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasMappersGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasMappersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //var response = instance.RealmIdentityProviderInstancesAliasMappersGet(realm, alias);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasMappersIdDelete
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasMappersIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //string id = null;
            //instance.RealmIdentityProviderInstancesAliasMappersIdDelete(realm, alias, id);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasMappersIdGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasMappersIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //string id = null;
            //var response = instance.RealmIdentityProviderInstancesAliasMappersIdGet(realm, alias, id);
            //Assert.IsType<IdentityProviderMapperRepresentation>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasMappersIdPut
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasMappersIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //string id = null;
            //IdentityProviderMapperRepresentation identityProviderMapperRepresentation = null;
            //instance.RealmIdentityProviderInstancesAliasMappersIdPut(realm, alias, id, identityProviderMapperRepresentation);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasMappersPost
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasMappersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //IdentityProviderMapperRepresentation identityProviderMapperRepresentation = null;
            //instance.RealmIdentityProviderInstancesAliasMappersPost(realm, alias, identityProviderMapperRepresentation);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesAliasPut
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesAliasPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string alias = null;
            //IdentityProviderRepresentation identityProviderRepresentation = null;
            //instance.RealmIdentityProviderInstancesAliasPut(realm, alias, identityProviderRepresentation);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmIdentityProviderInstancesGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmIdentityProviderInstancesPost
        /// </summary>
        [Fact]
        public void RealmIdentityProviderInstancesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //IdentityProviderRepresentation identityProviderRepresentation = null;
            //instance.RealmIdentityProviderInstancesPost(realm, identityProviderRepresentation);
        }

        /// <summary>
        /// Test RealmIdentityProviderProvidersProviderIdGet
        /// </summary>
        [Fact]
        public void RealmIdentityProviderProvidersProviderIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string providerId = null;
            //instance.RealmIdentityProviderProvidersProviderIdGet(realm, providerId);
        }
    }
}
