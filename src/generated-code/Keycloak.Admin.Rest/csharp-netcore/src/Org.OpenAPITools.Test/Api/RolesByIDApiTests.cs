/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing RolesByIDApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RolesByIDApiTests : IDisposable
    {
        private RolesByIDApi instance;

        public RolesByIDApiTests()
        {
            instance = new RolesByIDApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RolesByIDApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RolesByIDApi
            //Assert.IsType<RolesByIDApi>(instance);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdCompositesClientsClientUuidGet
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdCompositesClientsClientUuidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //string clientUuid = null;
            //var response = instance.RealmRolesByIdRoleIdCompositesClientsClientUuidGet(realm, roleId, clientUuid);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdCompositesDelete
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdCompositesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //List<RoleRepresentation> roleRepresentation = null;
            //instance.RealmRolesByIdRoleIdCompositesDelete(realm, roleId, roleRepresentation);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdCompositesGet
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdCompositesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //int? first = null;
            //int? max = null;
            //string search = null;
            //var response = instance.RealmRolesByIdRoleIdCompositesGet(realm, roleId, first, max, search);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdCompositesPost
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdCompositesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //List<RoleRepresentation> roleRepresentation = null;
            //instance.RealmRolesByIdRoleIdCompositesPost(realm, roleId, roleRepresentation);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdCompositesRealmGet
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdCompositesRealmGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //var response = instance.RealmRolesByIdRoleIdCompositesRealmGet(realm, roleId);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdDelete
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //instance.RealmRolesByIdRoleIdDelete(realm, roleId);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdGet
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //var response = instance.RealmRolesByIdRoleIdGet(realm, roleId);
            //Assert.IsType<RoleRepresentation>(response);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdManagementPermissionsGet
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdManagementPermissionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //var response = instance.RealmRolesByIdRoleIdManagementPermissionsGet(realm, roleId);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdManagementPermissionsPut
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdManagementPermissionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //ManagementPermissionReference managementPermissionReference = null;
            //var response = instance.RealmRolesByIdRoleIdManagementPermissionsPut(realm, roleId, managementPermissionReference);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmRolesByIdRoleIdPut
        /// </summary>
        [Fact]
        public void RealmRolesByIdRoleIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string roleId = null;
            //RoleRepresentation roleRepresentation = null;
            //instance.RealmRolesByIdRoleIdPut(realm, roleId, roleRepresentation);
        }
    }
}
