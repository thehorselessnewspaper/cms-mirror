/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MultivaluedHashMap
    /// </summary>
    [DataContract(Name = "MultivaluedHashMap")]
    public partial class MultivaluedHashMap : IEquatable<MultivaluedHashMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultivaluedHashMap" /> class.
        /// </summary>
        /// <param name="empty">empty.</param>
        /// <param name="loadFactor">loadFactor.</param>
        /// <param name="threshold">threshold.</param>
        public MultivaluedHashMap(bool empty = default(bool), float loadFactor = default(float), int threshold = default(int))
        {
            this.Empty = empty;
            this.LoadFactor = loadFactor;
            this.Threshold = threshold;
        }

        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [DataMember(Name = "empty", EmitDefaultValue = true)]
        public bool Empty { get; set; }

        /// <summary>
        /// Gets or Sets LoadFactor
        /// </summary>
        [DataMember(Name = "loadFactor", EmitDefaultValue = false)]
        public float LoadFactor { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name = "threshold", EmitDefaultValue = false)]
        public int Threshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultivaluedHashMap {\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  LoadFactor: ").Append(LoadFactor).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultivaluedHashMap);
        }

        /// <summary>
        /// Returns true if MultivaluedHashMap instances are equal
        /// </summary>
        /// <param name="input">Instance of MultivaluedHashMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultivaluedHashMap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Empty == input.Empty ||
                    this.Empty.Equals(input.Empty)
                ) && 
                (
                    this.LoadFactor == input.LoadFactor ||
                    this.LoadFactor.Equals(input.LoadFactor)
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    this.Threshold.Equals(input.Threshold)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Empty.GetHashCode();
                hashCode = (hashCode * 59) + this.LoadFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.Threshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
