/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RealmEventsConfigRepresentation
    /// </summary>
    [DataContract(Name = "RealmEventsConfigRepresentation")]
    public partial class RealmEventsConfigRepresentation : IEquatable<RealmEventsConfigRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealmEventsConfigRepresentation" /> class.
        /// </summary>
        /// <param name="adminEventsDetailsEnabled">adminEventsDetailsEnabled.</param>
        /// <param name="adminEventsEnabled">adminEventsEnabled.</param>
        /// <param name="enabledEventTypes">enabledEventTypes.</param>
        /// <param name="eventsEnabled">eventsEnabled.</param>
        /// <param name="eventsExpiration">eventsExpiration.</param>
        /// <param name="eventsListeners">eventsListeners.</param>
        public RealmEventsConfigRepresentation(bool adminEventsDetailsEnabled = default(bool), bool adminEventsEnabled = default(bool), List<string> enabledEventTypes = default(List<string>), bool eventsEnabled = default(bool), long eventsExpiration = default(long), List<string> eventsListeners = default(List<string>))
        {
            this.AdminEventsDetailsEnabled = adminEventsDetailsEnabled;
            this.AdminEventsEnabled = adminEventsEnabled;
            this.EnabledEventTypes = enabledEventTypes;
            this.EventsEnabled = eventsEnabled;
            this.EventsExpiration = eventsExpiration;
            this.EventsListeners = eventsListeners;
        }

        /// <summary>
        /// Gets or Sets AdminEventsDetailsEnabled
        /// </summary>
        [DataMember(Name = "adminEventsDetailsEnabled", EmitDefaultValue = true)]
        public bool AdminEventsDetailsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AdminEventsEnabled
        /// </summary>
        [DataMember(Name = "adminEventsEnabled", EmitDefaultValue = true)]
        public bool AdminEventsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EnabledEventTypes
        /// </summary>
        [DataMember(Name = "enabledEventTypes", EmitDefaultValue = false)]
        public List<string> EnabledEventTypes { get; set; }

        /// <summary>
        /// Gets or Sets EventsEnabled
        /// </summary>
        [DataMember(Name = "eventsEnabled", EmitDefaultValue = true)]
        public bool EventsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EventsExpiration
        /// </summary>
        [DataMember(Name = "eventsExpiration", EmitDefaultValue = false)]
        public long EventsExpiration { get; set; }

        /// <summary>
        /// Gets or Sets EventsListeners
        /// </summary>
        [DataMember(Name = "eventsListeners", EmitDefaultValue = false)]
        public List<string> EventsListeners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RealmEventsConfigRepresentation {\n");
            sb.Append("  AdminEventsDetailsEnabled: ").Append(AdminEventsDetailsEnabled).Append("\n");
            sb.Append("  AdminEventsEnabled: ").Append(AdminEventsEnabled).Append("\n");
            sb.Append("  EnabledEventTypes: ").Append(EnabledEventTypes).Append("\n");
            sb.Append("  EventsEnabled: ").Append(EventsEnabled).Append("\n");
            sb.Append("  EventsExpiration: ").Append(EventsExpiration).Append("\n");
            sb.Append("  EventsListeners: ").Append(EventsListeners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealmEventsConfigRepresentation);
        }

        /// <summary>
        /// Returns true if RealmEventsConfigRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of RealmEventsConfigRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmEventsConfigRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdminEventsDetailsEnabled == input.AdminEventsDetailsEnabled ||
                    this.AdminEventsDetailsEnabled.Equals(input.AdminEventsDetailsEnabled)
                ) && 
                (
                    this.AdminEventsEnabled == input.AdminEventsEnabled ||
                    this.AdminEventsEnabled.Equals(input.AdminEventsEnabled)
                ) && 
                (
                    this.EnabledEventTypes == input.EnabledEventTypes ||
                    this.EnabledEventTypes != null &&
                    input.EnabledEventTypes != null &&
                    this.EnabledEventTypes.SequenceEqual(input.EnabledEventTypes)
                ) && 
                (
                    this.EventsEnabled == input.EventsEnabled ||
                    this.EventsEnabled.Equals(input.EventsEnabled)
                ) && 
                (
                    this.EventsExpiration == input.EventsExpiration ||
                    this.EventsExpiration.Equals(input.EventsExpiration)
                ) && 
                (
                    this.EventsListeners == input.EventsListeners ||
                    this.EventsListeners != null &&
                    input.EventsListeners != null &&
                    this.EventsListeners.SequenceEqual(input.EventsListeners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AdminEventsDetailsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AdminEventsEnabled.GetHashCode();
                if (this.EnabledEventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EnabledEventTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.EventsExpiration.GetHashCode();
                if (this.EventsListeners != null)
                {
                    hashCode = (hashCode * 59) + this.EventsListeners.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
