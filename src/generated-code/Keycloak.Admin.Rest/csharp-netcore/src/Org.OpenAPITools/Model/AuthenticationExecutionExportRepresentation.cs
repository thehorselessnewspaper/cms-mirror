/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AuthenticationExecutionExportRepresentation
    /// </summary>
    [DataContract(Name = "AuthenticationExecutionExportRepresentation")]
    public partial class AuthenticationExecutionExportRepresentation : IEquatable<AuthenticationExecutionExportRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationExecutionExportRepresentation" /> class.
        /// </summary>
        /// <param name="authenticator">authenticator.</param>
        /// <param name="authenticatorConfig">authenticatorConfig.</param>
        /// <param name="authenticatorFlow">authenticatorFlow.</param>
        /// <param name="flowAlias">flowAlias.</param>
        /// <param name="priority">priority.</param>
        /// <param name="requirement">requirement.</param>
        /// <param name="userSetupAllowed">userSetupAllowed.</param>
        public AuthenticationExecutionExportRepresentation(string authenticator = default(string), string authenticatorConfig = default(string), bool authenticatorFlow = default(bool), string flowAlias = default(string), int priority = default(int), string requirement = default(string), bool userSetupAllowed = default(bool))
        {
            this.Authenticator = authenticator;
            this.AuthenticatorConfig = authenticatorConfig;
            this.AuthenticatorFlow = authenticatorFlow;
            this.FlowAlias = flowAlias;
            this.Priority = priority;
            this.Requirement = requirement;
            this.UserSetupAllowed = userSetupAllowed;
        }

        /// <summary>
        /// Gets or Sets Authenticator
        /// </summary>
        [DataMember(Name = "authenticator", EmitDefaultValue = false)]
        public string Authenticator { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorConfig
        /// </summary>
        [DataMember(Name = "authenticatorConfig", EmitDefaultValue = false)]
        public string AuthenticatorConfig { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorFlow
        /// </summary>
        [DataMember(Name = "authenticatorFlow", EmitDefaultValue = true)]
        public bool AuthenticatorFlow { get; set; }

        /// <summary>
        /// Gets or Sets FlowAlias
        /// </summary>
        [DataMember(Name = "flowAlias", EmitDefaultValue = false)]
        public string FlowAlias { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        [DataMember(Name = "requirement", EmitDefaultValue = false)]
        public string Requirement { get; set; }

        /// <summary>
        /// Gets or Sets UserSetupAllowed
        /// </summary>
        [DataMember(Name = "userSetupAllowed", EmitDefaultValue = true)]
        public bool UserSetupAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticationExecutionExportRepresentation {\n");
            sb.Append("  Authenticator: ").Append(Authenticator).Append("\n");
            sb.Append("  AuthenticatorConfig: ").Append(AuthenticatorConfig).Append("\n");
            sb.Append("  AuthenticatorFlow: ").Append(AuthenticatorFlow).Append("\n");
            sb.Append("  FlowAlias: ").Append(FlowAlias).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("  UserSetupAllowed: ").Append(UserSetupAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationExecutionExportRepresentation);
        }

        /// <summary>
        /// Returns true if AuthenticationExecutionExportRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationExecutionExportRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationExecutionExportRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Authenticator == input.Authenticator ||
                    (this.Authenticator != null &&
                    this.Authenticator.Equals(input.Authenticator))
                ) && 
                (
                    this.AuthenticatorConfig == input.AuthenticatorConfig ||
                    (this.AuthenticatorConfig != null &&
                    this.AuthenticatorConfig.Equals(input.AuthenticatorConfig))
                ) && 
                (
                    this.AuthenticatorFlow == input.AuthenticatorFlow ||
                    this.AuthenticatorFlow.Equals(input.AuthenticatorFlow)
                ) && 
                (
                    this.FlowAlias == input.FlowAlias ||
                    (this.FlowAlias != null &&
                    this.FlowAlias.Equals(input.FlowAlias))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Requirement == input.Requirement ||
                    (this.Requirement != null &&
                    this.Requirement.Equals(input.Requirement))
                ) && 
                (
                    this.UserSetupAllowed == input.UserSetupAllowed ||
                    this.UserSetupAllowed.Equals(input.UserSetupAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authenticator != null)
                {
                    hashCode = (hashCode * 59) + this.Authenticator.GetHashCode();
                }
                if (this.AuthenticatorConfig != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticatorConfig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthenticatorFlow.GetHashCode();
                if (this.FlowAlias != null)
                {
                    hashCode = (hashCode * 59) + this.FlowAlias.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Requirement != null)
                {
                    hashCode = (hashCode * 59) + this.Requirement.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserSetupAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
