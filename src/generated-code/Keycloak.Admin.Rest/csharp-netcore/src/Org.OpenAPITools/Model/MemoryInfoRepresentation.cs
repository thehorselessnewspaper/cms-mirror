/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MemoryInfoRepresentation
    /// </summary>
    [DataContract(Name = "MemoryInfoRepresentation")]
    public partial class MemoryInfoRepresentation : IEquatable<MemoryInfoRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryInfoRepresentation" /> class.
        /// </summary>
        /// <param name="free">free.</param>
        /// <param name="freeFormated">freeFormated.</param>
        /// <param name="freePercentage">freePercentage.</param>
        /// <param name="total">total.</param>
        /// <param name="totalFormated">totalFormated.</param>
        /// <param name="used">used.</param>
        /// <param name="usedFormated">usedFormated.</param>
        public MemoryInfoRepresentation(long free = default(long), string freeFormated = default(string), long freePercentage = default(long), long total = default(long), string totalFormated = default(string), long used = default(long), string usedFormated = default(string))
        {
            this.Free = free;
            this.FreeFormated = freeFormated;
            this.FreePercentage = freePercentage;
            this.Total = total;
            this.TotalFormated = totalFormated;
            this.Used = used;
            this.UsedFormated = usedFormated;
        }

        /// <summary>
        /// Gets or Sets Free
        /// </summary>
        [DataMember(Name = "free", EmitDefaultValue = false)]
        public long Free { get; set; }

        /// <summary>
        /// Gets or Sets FreeFormated
        /// </summary>
        [DataMember(Name = "freeFormated", EmitDefaultValue = false)]
        public string FreeFormated { get; set; }

        /// <summary>
        /// Gets or Sets FreePercentage
        /// </summary>
        [DataMember(Name = "freePercentage", EmitDefaultValue = false)]
        public long FreePercentage { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public long Total { get; set; }

        /// <summary>
        /// Gets or Sets TotalFormated
        /// </summary>
        [DataMember(Name = "totalFormated", EmitDefaultValue = false)]
        public string TotalFormated { get; set; }

        /// <summary>
        /// Gets or Sets Used
        /// </summary>
        [DataMember(Name = "used", EmitDefaultValue = false)]
        public long Used { get; set; }

        /// <summary>
        /// Gets or Sets UsedFormated
        /// </summary>
        [DataMember(Name = "usedFormated", EmitDefaultValue = false)]
        public string UsedFormated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemoryInfoRepresentation {\n");
            sb.Append("  Free: ").Append(Free).Append("\n");
            sb.Append("  FreeFormated: ").Append(FreeFormated).Append("\n");
            sb.Append("  FreePercentage: ").Append(FreePercentage).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalFormated: ").Append(TotalFormated).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  UsedFormated: ").Append(UsedFormated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemoryInfoRepresentation);
        }

        /// <summary>
        /// Returns true if MemoryInfoRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of MemoryInfoRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemoryInfoRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Free == input.Free ||
                    this.Free.Equals(input.Free)
                ) && 
                (
                    this.FreeFormated == input.FreeFormated ||
                    (this.FreeFormated != null &&
                    this.FreeFormated.Equals(input.FreeFormated))
                ) && 
                (
                    this.FreePercentage == input.FreePercentage ||
                    this.FreePercentage.Equals(input.FreePercentage)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.TotalFormated == input.TotalFormated ||
                    (this.TotalFormated != null &&
                    this.TotalFormated.Equals(input.TotalFormated))
                ) && 
                (
                    this.Used == input.Used ||
                    this.Used.Equals(input.Used)
                ) && 
                (
                    this.UsedFormated == input.UsedFormated ||
                    (this.UsedFormated != null &&
                    this.UsedFormated.Equals(input.UsedFormated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Free.GetHashCode();
                if (this.FreeFormated != null)
                {
                    hashCode = (hashCode * 59) + this.FreeFormated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FreePercentage.GetHashCode();
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                if (this.TotalFormated != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFormated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Used.GetHashCode();
                if (this.UsedFormated != null)
                {
                    hashCode = (hashCode * 59) + this.UsedFormated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
