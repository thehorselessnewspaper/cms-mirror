/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GroupRepresentation
    /// </summary>
    [DataContract(Name = "GroupRepresentation")]
    public partial class GroupRepresentation : IEquatable<GroupRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupRepresentation" /> class.
        /// </summary>
        /// <param name="access">access.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="clientRoles">clientRoles.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="path">path.</param>
        /// <param name="realmRoles">realmRoles.</param>
        /// <param name="subGroups">subGroups.</param>
        public GroupRepresentation(Dictionary<string, Object> access = default(Dictionary<string, Object>), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), Dictionary<string, Object> clientRoles = default(Dictionary<string, Object>), string id = default(string), string name = default(string), string path = default(string), List<string> realmRoles = default(List<string>), List<GroupRepresentation> subGroups = default(List<GroupRepresentation>))
        {
            this.Access = access;
            this.Attributes = attributes;
            this.ClientRoles = clientRoles;
            this.Id = id;
            this.Name = name;
            this.Path = path;
            this.RealmRoles = realmRoles;
            this.SubGroups = subGroups;
        }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = false)]
        public Dictionary<string, Object> Access { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ClientRoles
        /// </summary>
        [DataMember(Name = "clientRoles", EmitDefaultValue = false)]
        public Dictionary<string, Object> ClientRoles { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets RealmRoles
        /// </summary>
        [DataMember(Name = "realmRoles", EmitDefaultValue = false)]
        public List<string> RealmRoles { get; set; }

        /// <summary>
        /// Gets or Sets SubGroups
        /// </summary>
        [DataMember(Name = "subGroups", EmitDefaultValue = false)]
        public List<GroupRepresentation> SubGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupRepresentation {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ClientRoles: ").Append(ClientRoles).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RealmRoles: ").Append(RealmRoles).Append("\n");
            sb.Append("  SubGroups: ").Append(SubGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupRepresentation);
        }

        /// <summary>
        /// Returns true if GroupRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Access == input.Access ||
                    this.Access != null &&
                    input.Access != null &&
                    this.Access.SequenceEqual(input.Access)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ClientRoles == input.ClientRoles ||
                    this.ClientRoles != null &&
                    input.ClientRoles != null &&
                    this.ClientRoles.SequenceEqual(input.ClientRoles)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.RealmRoles == input.RealmRoles ||
                    this.RealmRoles != null &&
                    input.RealmRoles != null &&
                    this.RealmRoles.SequenceEqual(input.RealmRoles)
                ) && 
                (
                    this.SubGroups == input.SubGroups ||
                    this.SubGroups != null &&
                    input.SubGroups != null &&
                    this.SubGroups.SequenceEqual(input.SubGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                {
                    hashCode = (hashCode * 59) + this.Access.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.ClientRoles != null)
                {
                    hashCode = (hashCode * 59) + this.ClientRoles.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.RealmRoles != null)
                {
                    hashCode = (hashCode * 59) + this.RealmRoles.GetHashCode();
                }
                if (this.SubGroups != null)
                {
                    hashCode = (hashCode * 59) + this.SubGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
