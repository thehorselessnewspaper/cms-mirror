/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RealmRepresentation
    /// </summary>
    [DataContract(Name = "RealmRepresentation")]
    public partial class RealmRepresentation : IEquatable<RealmRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealmRepresentation" /> class.
        /// </summary>
        /// <param name="accessCodeLifespan">accessCodeLifespan.</param>
        /// <param name="accessCodeLifespanLogin">accessCodeLifespanLogin.</param>
        /// <param name="accessCodeLifespanUserAction">accessCodeLifespanUserAction.</param>
        /// <param name="accessTokenLifespan">accessTokenLifespan.</param>
        /// <param name="accessTokenLifespanForImplicitFlow">accessTokenLifespanForImplicitFlow.</param>
        /// <param name="accountTheme">accountTheme.</param>
        /// <param name="actionTokenGeneratedByAdminLifespan">actionTokenGeneratedByAdminLifespan.</param>
        /// <param name="actionTokenGeneratedByUserLifespan">actionTokenGeneratedByUserLifespan.</param>
        /// <param name="adminEventsDetailsEnabled">adminEventsDetailsEnabled.</param>
        /// <param name="adminEventsEnabled">adminEventsEnabled.</param>
        /// <param name="adminTheme">adminTheme.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="authenticationFlows">authenticationFlows.</param>
        /// <param name="authenticatorConfig">authenticatorConfig.</param>
        /// <param name="browserFlow">browserFlow.</param>
        /// <param name="browserSecurityHeaders">browserSecurityHeaders.</param>
        /// <param name="bruteForceProtected">bruteForceProtected.</param>
        /// <param name="clientAuthenticationFlow">clientAuthenticationFlow.</param>
        /// <param name="clientOfflineSessionIdleTimeout">clientOfflineSessionIdleTimeout.</param>
        /// <param name="clientOfflineSessionMaxLifespan">clientOfflineSessionMaxLifespan.</param>
        /// <param name="clientPolicies">clientPolicies.</param>
        /// <param name="clientProfiles">clientProfiles.</param>
        /// <param name="clientScopeMappings">clientScopeMappings.</param>
        /// <param name="clientScopes">clientScopes.</param>
        /// <param name="clientSessionIdleTimeout">clientSessionIdleTimeout.</param>
        /// <param name="clientSessionMaxLifespan">clientSessionMaxLifespan.</param>
        /// <param name="clients">clients.</param>
        /// <param name="components">components.</param>
        /// <param name="defaultDefaultClientScopes">defaultDefaultClientScopes.</param>
        /// <param name="defaultGroups">defaultGroups.</param>
        /// <param name="defaultLocale">defaultLocale.</param>
        /// <param name="defaultOptionalClientScopes">defaultOptionalClientScopes.</param>
        /// <param name="defaultRole">defaultRole.</param>
        /// <param name="defaultSignatureAlgorithm">defaultSignatureAlgorithm.</param>
        /// <param name="directGrantFlow">directGrantFlow.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="displayNameHtml">displayNameHtml.</param>
        /// <param name="dockerAuthenticationFlow">dockerAuthenticationFlow.</param>
        /// <param name="duplicateEmailsAllowed">duplicateEmailsAllowed.</param>
        /// <param name="editUsernameAllowed">editUsernameAllowed.</param>
        /// <param name="emailTheme">emailTheme.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="enabledEventTypes">enabledEventTypes.</param>
        /// <param name="eventsEnabled">eventsEnabled.</param>
        /// <param name="eventsExpiration">eventsExpiration.</param>
        /// <param name="eventsListeners">eventsListeners.</param>
        /// <param name="failureFactor">failureFactor.</param>
        /// <param name="federatedUsers">federatedUsers.</param>
        /// <param name="groups">groups.</param>
        /// <param name="id">id.</param>
        /// <param name="identityProviderMappers">identityProviderMappers.</param>
        /// <param name="identityProviders">identityProviders.</param>
        /// <param name="internationalizationEnabled">internationalizationEnabled.</param>
        /// <param name="keycloakVersion">keycloakVersion.</param>
        /// <param name="loginTheme">loginTheme.</param>
        /// <param name="loginWithEmailAllowed">loginWithEmailAllowed.</param>
        /// <param name="maxDeltaTimeSeconds">maxDeltaTimeSeconds.</param>
        /// <param name="maxFailureWaitSeconds">maxFailureWaitSeconds.</param>
        /// <param name="minimumQuickLoginWaitSeconds">minimumQuickLoginWaitSeconds.</param>
        /// <param name="notBefore">notBefore.</param>
        /// <param name="oAuth2DeviceCodeLifespan">oAuth2DeviceCodeLifespan.</param>
        /// <param name="oAuth2DevicePollingInterval">oAuth2DevicePollingInterval.</param>
        /// <param name="oauth2DeviceCodeLifespan">oauth2DeviceCodeLifespan.</param>
        /// <param name="oauth2DevicePollingInterval">oauth2DevicePollingInterval.</param>
        /// <param name="offlineSessionIdleTimeout">offlineSessionIdleTimeout.</param>
        /// <param name="offlineSessionMaxLifespan">offlineSessionMaxLifespan.</param>
        /// <param name="offlineSessionMaxLifespanEnabled">offlineSessionMaxLifespanEnabled.</param>
        /// <param name="otpPolicyAlgorithm">otpPolicyAlgorithm.</param>
        /// <param name="otpPolicyDigits">otpPolicyDigits.</param>
        /// <param name="otpPolicyInitialCounter">otpPolicyInitialCounter.</param>
        /// <param name="otpPolicyLookAheadWindow">otpPolicyLookAheadWindow.</param>
        /// <param name="otpPolicyPeriod">otpPolicyPeriod.</param>
        /// <param name="otpPolicyType">otpPolicyType.</param>
        /// <param name="otpSupportedApplications">otpSupportedApplications.</param>
        /// <param name="passwordPolicy">passwordPolicy.</param>
        /// <param name="permanentLockout">permanentLockout.</param>
        /// <param name="protocolMappers">protocolMappers.</param>
        /// <param name="quickLoginCheckMilliSeconds">quickLoginCheckMilliSeconds.</param>
        /// <param name="realm">realm.</param>
        /// <param name="refreshTokenMaxReuse">refreshTokenMaxReuse.</param>
        /// <param name="registrationAllowed">registrationAllowed.</param>
        /// <param name="registrationEmailAsUsername">registrationEmailAsUsername.</param>
        /// <param name="registrationFlow">registrationFlow.</param>
        /// <param name="rememberMe">rememberMe.</param>
        /// <param name="requiredActions">requiredActions.</param>
        /// <param name="resetCredentialsFlow">resetCredentialsFlow.</param>
        /// <param name="resetPasswordAllowed">resetPasswordAllowed.</param>
        /// <param name="revokeRefreshToken">revokeRefreshToken.</param>
        /// <param name="roles">roles.</param>
        /// <param name="scopeMappings">scopeMappings.</param>
        /// <param name="smtpServer">smtpServer.</param>
        /// <param name="sslRequired">sslRequired.</param>
        /// <param name="ssoSessionIdleTimeout">ssoSessionIdleTimeout.</param>
        /// <param name="ssoSessionIdleTimeoutRememberMe">ssoSessionIdleTimeoutRememberMe.</param>
        /// <param name="ssoSessionMaxLifespan">ssoSessionMaxLifespan.</param>
        /// <param name="ssoSessionMaxLifespanRememberMe">ssoSessionMaxLifespanRememberMe.</param>
        /// <param name="supportedLocales">supportedLocales.</param>
        /// <param name="userFederationMappers">userFederationMappers.</param>
        /// <param name="userFederationProviders">userFederationProviders.</param>
        /// <param name="userManagedAccessAllowed">userManagedAccessAllowed.</param>
        /// <param name="users">users.</param>
        /// <param name="verifyEmail">verifyEmail.</param>
        /// <param name="waitIncrementSeconds">waitIncrementSeconds.</param>
        /// <param name="webAuthnPolicyAcceptableAaguids">webAuthnPolicyAcceptableAaguids.</param>
        /// <param name="webAuthnPolicyAttestationConveyancePreference">webAuthnPolicyAttestationConveyancePreference.</param>
        /// <param name="webAuthnPolicyAuthenticatorAttachment">webAuthnPolicyAuthenticatorAttachment.</param>
        /// <param name="webAuthnPolicyAvoidSameAuthenticatorRegister">webAuthnPolicyAvoidSameAuthenticatorRegister.</param>
        /// <param name="webAuthnPolicyCreateTimeout">webAuthnPolicyCreateTimeout.</param>
        /// <param name="webAuthnPolicyPasswordlessAcceptableAaguids">webAuthnPolicyPasswordlessAcceptableAaguids.</param>
        /// <param name="webAuthnPolicyPasswordlessAttestationConveyancePreference">webAuthnPolicyPasswordlessAttestationConveyancePreference.</param>
        /// <param name="webAuthnPolicyPasswordlessAuthenticatorAttachment">webAuthnPolicyPasswordlessAuthenticatorAttachment.</param>
        /// <param name="webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister">webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister.</param>
        /// <param name="webAuthnPolicyPasswordlessCreateTimeout">webAuthnPolicyPasswordlessCreateTimeout.</param>
        /// <param name="webAuthnPolicyPasswordlessRequireResidentKey">webAuthnPolicyPasswordlessRequireResidentKey.</param>
        /// <param name="webAuthnPolicyPasswordlessRpEntityName">webAuthnPolicyPasswordlessRpEntityName.</param>
        /// <param name="webAuthnPolicyPasswordlessRpId">webAuthnPolicyPasswordlessRpId.</param>
        /// <param name="webAuthnPolicyPasswordlessSignatureAlgorithms">webAuthnPolicyPasswordlessSignatureAlgorithms.</param>
        /// <param name="webAuthnPolicyPasswordlessUserVerificationRequirement">webAuthnPolicyPasswordlessUserVerificationRequirement.</param>
        /// <param name="webAuthnPolicyRequireResidentKey">webAuthnPolicyRequireResidentKey.</param>
        /// <param name="webAuthnPolicyRpEntityName">webAuthnPolicyRpEntityName.</param>
        /// <param name="webAuthnPolicyRpId">webAuthnPolicyRpId.</param>
        /// <param name="webAuthnPolicySignatureAlgorithms">webAuthnPolicySignatureAlgorithms.</param>
        /// <param name="webAuthnPolicyUserVerificationRequirement">webAuthnPolicyUserVerificationRequirement.</param>
        public RealmRepresentation(int accessCodeLifespan = default(int), int accessCodeLifespanLogin = default(int), int accessCodeLifespanUserAction = default(int), int accessTokenLifespan = default(int), int accessTokenLifespanForImplicitFlow = default(int), string accountTheme = default(string), int actionTokenGeneratedByAdminLifespan = default(int), int actionTokenGeneratedByUserLifespan = default(int), bool adminEventsDetailsEnabled = default(bool), bool adminEventsEnabled = default(bool), string adminTheme = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), List<AuthenticationFlowRepresentation> authenticationFlows = default(List<AuthenticationFlowRepresentation>), List<AuthenticatorConfigRepresentation> authenticatorConfig = default(List<AuthenticatorConfigRepresentation>), string browserFlow = default(string), Dictionary<string, Object> browserSecurityHeaders = default(Dictionary<string, Object>), bool bruteForceProtected = default(bool), string clientAuthenticationFlow = default(string), int clientOfflineSessionIdleTimeout = default(int), int clientOfflineSessionMaxLifespan = default(int), JsonNode clientPolicies = default(JsonNode), JsonNode clientProfiles = default(JsonNode), Dictionary<string, Object> clientScopeMappings = default(Dictionary<string, Object>), List<ClientScopeRepresentation> clientScopes = default(List<ClientScopeRepresentation>), int clientSessionIdleTimeout = default(int), int clientSessionMaxLifespan = default(int), List<ClientRepresentation> clients = default(List<ClientRepresentation>), MultivaluedHashMap components = default(MultivaluedHashMap), List<string> defaultDefaultClientScopes = default(List<string>), List<string> defaultGroups = default(List<string>), string defaultLocale = default(string), List<string> defaultOptionalClientScopes = default(List<string>), RoleRepresentation defaultRole = default(RoleRepresentation), string defaultSignatureAlgorithm = default(string), string directGrantFlow = default(string), string displayName = default(string), string displayNameHtml = default(string), string dockerAuthenticationFlow = default(string), bool duplicateEmailsAllowed = default(bool), bool editUsernameAllowed = default(bool), string emailTheme = default(string), bool enabled = default(bool), List<string> enabledEventTypes = default(List<string>), bool eventsEnabled = default(bool), long eventsExpiration = default(long), List<string> eventsListeners = default(List<string>), int failureFactor = default(int), List<UserRepresentation> federatedUsers = default(List<UserRepresentation>), List<GroupRepresentation> groups = default(List<GroupRepresentation>), string id = default(string), List<IdentityProviderMapperRepresentation> identityProviderMappers = default(List<IdentityProviderMapperRepresentation>), List<IdentityProviderRepresentation> identityProviders = default(List<IdentityProviderRepresentation>), bool internationalizationEnabled = default(bool), string keycloakVersion = default(string), string loginTheme = default(string), bool loginWithEmailAllowed = default(bool), int maxDeltaTimeSeconds = default(int), int maxFailureWaitSeconds = default(int), int minimumQuickLoginWaitSeconds = default(int), int notBefore = default(int), int oAuth2DeviceCodeLifespan = default(int), int oAuth2DevicePollingInterval = default(int), int oauth2DeviceCodeLifespan = default(int), int oauth2DevicePollingInterval = default(int), int offlineSessionIdleTimeout = default(int), int offlineSessionMaxLifespan = default(int), bool offlineSessionMaxLifespanEnabled = default(bool), string otpPolicyAlgorithm = default(string), int otpPolicyDigits = default(int), int otpPolicyInitialCounter = default(int), int otpPolicyLookAheadWindow = default(int), int otpPolicyPeriod = default(int), string otpPolicyType = default(string), List<string> otpSupportedApplications = default(List<string>), string passwordPolicy = default(string), bool permanentLockout = default(bool), List<ProtocolMapperRepresentation> protocolMappers = default(List<ProtocolMapperRepresentation>), long quickLoginCheckMilliSeconds = default(long), string realm = default(string), int refreshTokenMaxReuse = default(int), bool registrationAllowed = default(bool), bool registrationEmailAsUsername = default(bool), string registrationFlow = default(string), bool rememberMe = default(bool), List<RequiredActionProviderRepresentation> requiredActions = default(List<RequiredActionProviderRepresentation>), string resetCredentialsFlow = default(string), bool resetPasswordAllowed = default(bool), bool revokeRefreshToken = default(bool), RolesRepresentation roles = default(RolesRepresentation), List<ScopeMappingRepresentation> scopeMappings = default(List<ScopeMappingRepresentation>), Dictionary<string, Object> smtpServer = default(Dictionary<string, Object>), string sslRequired = default(string), int ssoSessionIdleTimeout = default(int), int ssoSessionIdleTimeoutRememberMe = default(int), int ssoSessionMaxLifespan = default(int), int ssoSessionMaxLifespanRememberMe = default(int), List<string> supportedLocales = default(List<string>), List<UserFederationMapperRepresentation> userFederationMappers = default(List<UserFederationMapperRepresentation>), List<UserFederationProviderRepresentation> userFederationProviders = default(List<UserFederationProviderRepresentation>), bool userManagedAccessAllowed = default(bool), List<UserRepresentation> users = default(List<UserRepresentation>), bool verifyEmail = default(bool), int waitIncrementSeconds = default(int), List<string> webAuthnPolicyAcceptableAaguids = default(List<string>), string webAuthnPolicyAttestationConveyancePreference = default(string), string webAuthnPolicyAuthenticatorAttachment = default(string), bool webAuthnPolicyAvoidSameAuthenticatorRegister = default(bool), int webAuthnPolicyCreateTimeout = default(int), List<string> webAuthnPolicyPasswordlessAcceptableAaguids = default(List<string>), string webAuthnPolicyPasswordlessAttestationConveyancePreference = default(string), string webAuthnPolicyPasswordlessAuthenticatorAttachment = default(string), bool webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister = default(bool), int webAuthnPolicyPasswordlessCreateTimeout = default(int), string webAuthnPolicyPasswordlessRequireResidentKey = default(string), string webAuthnPolicyPasswordlessRpEntityName = default(string), string webAuthnPolicyPasswordlessRpId = default(string), List<string> webAuthnPolicyPasswordlessSignatureAlgorithms = default(List<string>), string webAuthnPolicyPasswordlessUserVerificationRequirement = default(string), string webAuthnPolicyRequireResidentKey = default(string), string webAuthnPolicyRpEntityName = default(string), string webAuthnPolicyRpId = default(string), List<string> webAuthnPolicySignatureAlgorithms = default(List<string>), string webAuthnPolicyUserVerificationRequirement = default(string))
        {
            this.AccessCodeLifespan = accessCodeLifespan;
            this.AccessCodeLifespanLogin = accessCodeLifespanLogin;
            this.AccessCodeLifespanUserAction = accessCodeLifespanUserAction;
            this.AccessTokenLifespan = accessTokenLifespan;
            this.AccessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
            this.AccountTheme = accountTheme;
            this.ActionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
            this.ActionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
            this.AdminEventsDetailsEnabled = adminEventsDetailsEnabled;
            this.AdminEventsEnabled = adminEventsEnabled;
            this.AdminTheme = adminTheme;
            this.Attributes = attributes;
            this.AuthenticationFlows = authenticationFlows;
            this.AuthenticatorConfig = authenticatorConfig;
            this.BrowserFlow = browserFlow;
            this.BrowserSecurityHeaders = browserSecurityHeaders;
            this.BruteForceProtected = bruteForceProtected;
            this.ClientAuthenticationFlow = clientAuthenticationFlow;
            this.ClientOfflineSessionIdleTimeout = clientOfflineSessionIdleTimeout;
            this.ClientOfflineSessionMaxLifespan = clientOfflineSessionMaxLifespan;
            this.ClientPolicies = clientPolicies;
            this.ClientProfiles = clientProfiles;
            this.ClientScopeMappings = clientScopeMappings;
            this.ClientScopes = clientScopes;
            this.ClientSessionIdleTimeout = clientSessionIdleTimeout;
            this.ClientSessionMaxLifespan = clientSessionMaxLifespan;
            this.Clients = clients;
            this.Components = components;
            this.DefaultDefaultClientScopes = defaultDefaultClientScopes;
            this.DefaultGroups = defaultGroups;
            this.DefaultLocale = defaultLocale;
            this.DefaultOptionalClientScopes = defaultOptionalClientScopes;
            this.DefaultRole = defaultRole;
            this.DefaultSignatureAlgorithm = defaultSignatureAlgorithm;
            this.DirectGrantFlow = directGrantFlow;
            this.DisplayName = displayName;
            this.DisplayNameHtml = displayNameHtml;
            this.DockerAuthenticationFlow = dockerAuthenticationFlow;
            this.DuplicateEmailsAllowed = duplicateEmailsAllowed;
            this.EditUsernameAllowed = editUsernameAllowed;
            this.EmailTheme = emailTheme;
            this.Enabled = enabled;
            this.EnabledEventTypes = enabledEventTypes;
            this.EventsEnabled = eventsEnabled;
            this.EventsExpiration = eventsExpiration;
            this.EventsListeners = eventsListeners;
            this.FailureFactor = failureFactor;
            this.FederatedUsers = federatedUsers;
            this.Groups = groups;
            this.Id = id;
            this.IdentityProviderMappers = identityProviderMappers;
            this.IdentityProviders = identityProviders;
            this.InternationalizationEnabled = internationalizationEnabled;
            this.KeycloakVersion = keycloakVersion;
            this.LoginTheme = loginTheme;
            this.LoginWithEmailAllowed = loginWithEmailAllowed;
            this.MaxDeltaTimeSeconds = maxDeltaTimeSeconds;
            this.MaxFailureWaitSeconds = maxFailureWaitSeconds;
            this.MinimumQuickLoginWaitSeconds = minimumQuickLoginWaitSeconds;
            this.NotBefore = notBefore;
            this.OAuth2DeviceCodeLifespan = oAuth2DeviceCodeLifespan;
            this.OAuth2DevicePollingInterval = oAuth2DevicePollingInterval;
            this.Oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
            this.Oauth2DevicePollingInterval = oauth2DevicePollingInterval;
            this.OfflineSessionIdleTimeout = offlineSessionIdleTimeout;
            this.OfflineSessionMaxLifespan = offlineSessionMaxLifespan;
            this.OfflineSessionMaxLifespanEnabled = offlineSessionMaxLifespanEnabled;
            this.OtpPolicyAlgorithm = otpPolicyAlgorithm;
            this.OtpPolicyDigits = otpPolicyDigits;
            this.OtpPolicyInitialCounter = otpPolicyInitialCounter;
            this.OtpPolicyLookAheadWindow = otpPolicyLookAheadWindow;
            this.OtpPolicyPeriod = otpPolicyPeriod;
            this.OtpPolicyType = otpPolicyType;
            this.OtpSupportedApplications = otpSupportedApplications;
            this.PasswordPolicy = passwordPolicy;
            this.PermanentLockout = permanentLockout;
            this.ProtocolMappers = protocolMappers;
            this.QuickLoginCheckMilliSeconds = quickLoginCheckMilliSeconds;
            this.Realm = realm;
            this.RefreshTokenMaxReuse = refreshTokenMaxReuse;
            this.RegistrationAllowed = registrationAllowed;
            this.RegistrationEmailAsUsername = registrationEmailAsUsername;
            this.RegistrationFlow = registrationFlow;
            this.RememberMe = rememberMe;
            this.RequiredActions = requiredActions;
            this.ResetCredentialsFlow = resetCredentialsFlow;
            this.ResetPasswordAllowed = resetPasswordAllowed;
            this.RevokeRefreshToken = revokeRefreshToken;
            this.Roles = roles;
            this.ScopeMappings = scopeMappings;
            this.SmtpServer = smtpServer;
            this.SslRequired = sslRequired;
            this.SsoSessionIdleTimeout = ssoSessionIdleTimeout;
            this.SsoSessionIdleTimeoutRememberMe = ssoSessionIdleTimeoutRememberMe;
            this.SsoSessionMaxLifespan = ssoSessionMaxLifespan;
            this.SsoSessionMaxLifespanRememberMe = ssoSessionMaxLifespanRememberMe;
            this.SupportedLocales = supportedLocales;
            this.UserFederationMappers = userFederationMappers;
            this.UserFederationProviders = userFederationProviders;
            this.UserManagedAccessAllowed = userManagedAccessAllowed;
            this.Users = users;
            this.VerifyEmail = verifyEmail;
            this.WaitIncrementSeconds = waitIncrementSeconds;
            this.WebAuthnPolicyAcceptableAaguids = webAuthnPolicyAcceptableAaguids;
            this.WebAuthnPolicyAttestationConveyancePreference = webAuthnPolicyAttestationConveyancePreference;
            this.WebAuthnPolicyAuthenticatorAttachment = webAuthnPolicyAuthenticatorAttachment;
            this.WebAuthnPolicyAvoidSameAuthenticatorRegister = webAuthnPolicyAvoidSameAuthenticatorRegister;
            this.WebAuthnPolicyCreateTimeout = webAuthnPolicyCreateTimeout;
            this.WebAuthnPolicyPasswordlessAcceptableAaguids = webAuthnPolicyPasswordlessAcceptableAaguids;
            this.WebAuthnPolicyPasswordlessAttestationConveyancePreference = webAuthnPolicyPasswordlessAttestationConveyancePreference;
            this.WebAuthnPolicyPasswordlessAuthenticatorAttachment = webAuthnPolicyPasswordlessAuthenticatorAttachment;
            this.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister = webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister;
            this.WebAuthnPolicyPasswordlessCreateTimeout = webAuthnPolicyPasswordlessCreateTimeout;
            this.WebAuthnPolicyPasswordlessRequireResidentKey = webAuthnPolicyPasswordlessRequireResidentKey;
            this.WebAuthnPolicyPasswordlessRpEntityName = webAuthnPolicyPasswordlessRpEntityName;
            this.WebAuthnPolicyPasswordlessRpId = webAuthnPolicyPasswordlessRpId;
            this.WebAuthnPolicyPasswordlessSignatureAlgorithms = webAuthnPolicyPasswordlessSignatureAlgorithms;
            this.WebAuthnPolicyPasswordlessUserVerificationRequirement = webAuthnPolicyPasswordlessUserVerificationRequirement;
            this.WebAuthnPolicyRequireResidentKey = webAuthnPolicyRequireResidentKey;
            this.WebAuthnPolicyRpEntityName = webAuthnPolicyRpEntityName;
            this.WebAuthnPolicyRpId = webAuthnPolicyRpId;
            this.WebAuthnPolicySignatureAlgorithms = webAuthnPolicySignatureAlgorithms;
            this.WebAuthnPolicyUserVerificationRequirement = webAuthnPolicyUserVerificationRequirement;
        }

        /// <summary>
        /// Gets or Sets AccessCodeLifespan
        /// </summary>
        [DataMember(Name = "accessCodeLifespan", EmitDefaultValue = false)]
        public int AccessCodeLifespan { get; set; }

        /// <summary>
        /// Gets or Sets AccessCodeLifespanLogin
        /// </summary>
        [DataMember(Name = "accessCodeLifespanLogin", EmitDefaultValue = false)]
        public int AccessCodeLifespanLogin { get; set; }

        /// <summary>
        /// Gets or Sets AccessCodeLifespanUserAction
        /// </summary>
        [DataMember(Name = "accessCodeLifespanUserAction", EmitDefaultValue = false)]
        public int AccessCodeLifespanUserAction { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenLifespan
        /// </summary>
        [DataMember(Name = "accessTokenLifespan", EmitDefaultValue = false)]
        public int AccessTokenLifespan { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenLifespanForImplicitFlow
        /// </summary>
        [DataMember(Name = "accessTokenLifespanForImplicitFlow", EmitDefaultValue = false)]
        public int AccessTokenLifespanForImplicitFlow { get; set; }

        /// <summary>
        /// Gets or Sets AccountTheme
        /// </summary>
        [DataMember(Name = "accountTheme", EmitDefaultValue = false)]
        public string AccountTheme { get; set; }

        /// <summary>
        /// Gets or Sets ActionTokenGeneratedByAdminLifespan
        /// </summary>
        [DataMember(Name = "actionTokenGeneratedByAdminLifespan", EmitDefaultValue = false)]
        public int ActionTokenGeneratedByAdminLifespan { get; set; }

        /// <summary>
        /// Gets or Sets ActionTokenGeneratedByUserLifespan
        /// </summary>
        [DataMember(Name = "actionTokenGeneratedByUserLifespan", EmitDefaultValue = false)]
        public int ActionTokenGeneratedByUserLifespan { get; set; }

        /// <summary>
        /// Gets or Sets AdminEventsDetailsEnabled
        /// </summary>
        [DataMember(Name = "adminEventsDetailsEnabled", EmitDefaultValue = true)]
        public bool AdminEventsDetailsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AdminEventsEnabled
        /// </summary>
        [DataMember(Name = "adminEventsEnabled", EmitDefaultValue = true)]
        public bool AdminEventsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AdminTheme
        /// </summary>
        [DataMember(Name = "adminTheme", EmitDefaultValue = false)]
        public string AdminTheme { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationFlows
        /// </summary>
        [DataMember(Name = "authenticationFlows", EmitDefaultValue = false)]
        public List<AuthenticationFlowRepresentation> AuthenticationFlows { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorConfig
        /// </summary>
        [DataMember(Name = "authenticatorConfig", EmitDefaultValue = false)]
        public List<AuthenticatorConfigRepresentation> AuthenticatorConfig { get; set; }

        /// <summary>
        /// Gets or Sets BrowserFlow
        /// </summary>
        [DataMember(Name = "browserFlow", EmitDefaultValue = false)]
        public string BrowserFlow { get; set; }

        /// <summary>
        /// Gets or Sets BrowserSecurityHeaders
        /// </summary>
        [DataMember(Name = "browserSecurityHeaders", EmitDefaultValue = false)]
        public Dictionary<string, Object> BrowserSecurityHeaders { get; set; }

        /// <summary>
        /// Gets or Sets BruteForceProtected
        /// </summary>
        [DataMember(Name = "bruteForceProtected", EmitDefaultValue = true)]
        public bool BruteForceProtected { get; set; }

        /// <summary>
        /// Gets or Sets ClientAuthenticationFlow
        /// </summary>
        [DataMember(Name = "clientAuthenticationFlow", EmitDefaultValue = false)]
        public string ClientAuthenticationFlow { get; set; }

        /// <summary>
        /// Gets or Sets ClientOfflineSessionIdleTimeout
        /// </summary>
        [DataMember(Name = "clientOfflineSessionIdleTimeout", EmitDefaultValue = false)]
        public int ClientOfflineSessionIdleTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClientOfflineSessionMaxLifespan
        /// </summary>
        [DataMember(Name = "clientOfflineSessionMaxLifespan", EmitDefaultValue = false)]
        public int ClientOfflineSessionMaxLifespan { get; set; }

        /// <summary>
        /// Gets or Sets ClientPolicies
        /// </summary>
        [DataMember(Name = "clientPolicies", EmitDefaultValue = false)]
        public JsonNode ClientPolicies { get; set; }

        /// <summary>
        /// Gets or Sets ClientProfiles
        /// </summary>
        [DataMember(Name = "clientProfiles", EmitDefaultValue = false)]
        public JsonNode ClientProfiles { get; set; }

        /// <summary>
        /// Gets or Sets ClientScopeMappings
        /// </summary>
        [DataMember(Name = "clientScopeMappings", EmitDefaultValue = false)]
        public Dictionary<string, Object> ClientScopeMappings { get; set; }

        /// <summary>
        /// Gets or Sets ClientScopes
        /// </summary>
        [DataMember(Name = "clientScopes", EmitDefaultValue = false)]
        public List<ClientScopeRepresentation> ClientScopes { get; set; }

        /// <summary>
        /// Gets or Sets ClientSessionIdleTimeout
        /// </summary>
        [DataMember(Name = "clientSessionIdleTimeout", EmitDefaultValue = false)]
        public int ClientSessionIdleTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClientSessionMaxLifespan
        /// </summary>
        [DataMember(Name = "clientSessionMaxLifespan", EmitDefaultValue = false)]
        public int ClientSessionMaxLifespan { get; set; }

        /// <summary>
        /// Gets or Sets Clients
        /// </summary>
        [DataMember(Name = "clients", EmitDefaultValue = false)]
        public List<ClientRepresentation> Clients { get; set; }

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [DataMember(Name = "components", EmitDefaultValue = false)]
        public MultivaluedHashMap Components { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDefaultClientScopes
        /// </summary>
        [DataMember(Name = "defaultDefaultClientScopes", EmitDefaultValue = false)]
        public List<string> DefaultDefaultClientScopes { get; set; }

        /// <summary>
        /// Gets or Sets DefaultGroups
        /// </summary>
        [DataMember(Name = "defaultGroups", EmitDefaultValue = false)]
        public List<string> DefaultGroups { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLocale
        /// </summary>
        [DataMember(Name = "defaultLocale", EmitDefaultValue = false)]
        public string DefaultLocale { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOptionalClientScopes
        /// </summary>
        [DataMember(Name = "defaultOptionalClientScopes", EmitDefaultValue = false)]
        public List<string> DefaultOptionalClientScopes { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRole
        /// </summary>
        [DataMember(Name = "defaultRole", EmitDefaultValue = false)]
        public RoleRepresentation DefaultRole { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSignatureAlgorithm
        /// </summary>
        [DataMember(Name = "defaultSignatureAlgorithm", EmitDefaultValue = false)]
        public string DefaultSignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets DirectGrantFlow
        /// </summary>
        [DataMember(Name = "directGrantFlow", EmitDefaultValue = false)]
        public string DirectGrantFlow { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayNameHtml
        /// </summary>
        [DataMember(Name = "displayNameHtml", EmitDefaultValue = false)]
        public string DisplayNameHtml { get; set; }

        /// <summary>
        /// Gets or Sets DockerAuthenticationFlow
        /// </summary>
        [DataMember(Name = "dockerAuthenticationFlow", EmitDefaultValue = false)]
        public string DockerAuthenticationFlow { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateEmailsAllowed
        /// </summary>
        [DataMember(Name = "duplicateEmailsAllowed", EmitDefaultValue = true)]
        public bool DuplicateEmailsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets EditUsernameAllowed
        /// </summary>
        [DataMember(Name = "editUsernameAllowed", EmitDefaultValue = true)]
        public bool EditUsernameAllowed { get; set; }

        /// <summary>
        /// Gets or Sets EmailTheme
        /// </summary>
        [DataMember(Name = "emailTheme", EmitDefaultValue = false)]
        public string EmailTheme { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EnabledEventTypes
        /// </summary>
        [DataMember(Name = "enabledEventTypes", EmitDefaultValue = false)]
        public List<string> EnabledEventTypes { get; set; }

        /// <summary>
        /// Gets or Sets EventsEnabled
        /// </summary>
        [DataMember(Name = "eventsEnabled", EmitDefaultValue = true)]
        public bool EventsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EventsExpiration
        /// </summary>
        [DataMember(Name = "eventsExpiration", EmitDefaultValue = false)]
        public long EventsExpiration { get; set; }

        /// <summary>
        /// Gets or Sets EventsListeners
        /// </summary>
        [DataMember(Name = "eventsListeners", EmitDefaultValue = false)]
        public List<string> EventsListeners { get; set; }

        /// <summary>
        /// Gets or Sets FailureFactor
        /// </summary>
        [DataMember(Name = "failureFactor", EmitDefaultValue = false)]
        public int FailureFactor { get; set; }

        /// <summary>
        /// Gets or Sets FederatedUsers
        /// </summary>
        [DataMember(Name = "federatedUsers", EmitDefaultValue = false)]
        public List<UserRepresentation> FederatedUsers { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<GroupRepresentation> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdentityProviderMappers
        /// </summary>
        [DataMember(Name = "identityProviderMappers", EmitDefaultValue = false)]
        public List<IdentityProviderMapperRepresentation> IdentityProviderMappers { get; set; }

        /// <summary>
        /// Gets or Sets IdentityProviders
        /// </summary>
        [DataMember(Name = "identityProviders", EmitDefaultValue = false)]
        public List<IdentityProviderRepresentation> IdentityProviders { get; set; }

        /// <summary>
        /// Gets or Sets InternationalizationEnabled
        /// </summary>
        [DataMember(Name = "internationalizationEnabled", EmitDefaultValue = true)]
        public bool InternationalizationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets KeycloakVersion
        /// </summary>
        [DataMember(Name = "keycloakVersion", EmitDefaultValue = false)]
        public string KeycloakVersion { get; set; }

        /// <summary>
        /// Gets or Sets LoginTheme
        /// </summary>
        [DataMember(Name = "loginTheme", EmitDefaultValue = false)]
        public string LoginTheme { get; set; }

        /// <summary>
        /// Gets or Sets LoginWithEmailAllowed
        /// </summary>
        [DataMember(Name = "loginWithEmailAllowed", EmitDefaultValue = true)]
        public bool LoginWithEmailAllowed { get; set; }

        /// <summary>
        /// Gets or Sets MaxDeltaTimeSeconds
        /// </summary>
        [DataMember(Name = "maxDeltaTimeSeconds", EmitDefaultValue = false)]
        public int MaxDeltaTimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MaxFailureWaitSeconds
        /// </summary>
        [DataMember(Name = "maxFailureWaitSeconds", EmitDefaultValue = false)]
        public int MaxFailureWaitSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MinimumQuickLoginWaitSeconds
        /// </summary>
        [DataMember(Name = "minimumQuickLoginWaitSeconds", EmitDefaultValue = false)]
        public int MinimumQuickLoginWaitSeconds { get; set; }

        /// <summary>
        /// Gets or Sets NotBefore
        /// </summary>
        [DataMember(Name = "notBefore", EmitDefaultValue = false)]
        public int NotBefore { get; set; }

        /// <summary>
        /// Gets or Sets OAuth2DeviceCodeLifespan
        /// </summary>
        [DataMember(Name = "oAuth2DeviceCodeLifespan", EmitDefaultValue = false)]
        public int OAuth2DeviceCodeLifespan { get; set; }

        /// <summary>
        /// Gets or Sets OAuth2DevicePollingInterval
        /// </summary>
        [DataMember(Name = "oAuth2DevicePollingInterval", EmitDefaultValue = false)]
        public int OAuth2DevicePollingInterval { get; set; }

        /// <summary>
        /// Gets or Sets Oauth2DeviceCodeLifespan
        /// </summary>
        [DataMember(Name = "oauth2DeviceCodeLifespan", EmitDefaultValue = false)]
        public int Oauth2DeviceCodeLifespan { get; set; }

        /// <summary>
        /// Gets or Sets Oauth2DevicePollingInterval
        /// </summary>
        [DataMember(Name = "oauth2DevicePollingInterval", EmitDefaultValue = false)]
        public int Oauth2DevicePollingInterval { get; set; }

        /// <summary>
        /// Gets or Sets OfflineSessionIdleTimeout
        /// </summary>
        [DataMember(Name = "offlineSessionIdleTimeout", EmitDefaultValue = false)]
        public int OfflineSessionIdleTimeout { get; set; }

        /// <summary>
        /// Gets or Sets OfflineSessionMaxLifespan
        /// </summary>
        [DataMember(Name = "offlineSessionMaxLifespan", EmitDefaultValue = false)]
        public int OfflineSessionMaxLifespan { get; set; }

        /// <summary>
        /// Gets or Sets OfflineSessionMaxLifespanEnabled
        /// </summary>
        [DataMember(Name = "offlineSessionMaxLifespanEnabled", EmitDefaultValue = true)]
        public bool OfflineSessionMaxLifespanEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OtpPolicyAlgorithm
        /// </summary>
        [DataMember(Name = "otpPolicyAlgorithm", EmitDefaultValue = false)]
        public string OtpPolicyAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets OtpPolicyDigits
        /// </summary>
        [DataMember(Name = "otpPolicyDigits", EmitDefaultValue = false)]
        public int OtpPolicyDigits { get; set; }

        /// <summary>
        /// Gets or Sets OtpPolicyInitialCounter
        /// </summary>
        [DataMember(Name = "otpPolicyInitialCounter", EmitDefaultValue = false)]
        public int OtpPolicyInitialCounter { get; set; }

        /// <summary>
        /// Gets or Sets OtpPolicyLookAheadWindow
        /// </summary>
        [DataMember(Name = "otpPolicyLookAheadWindow", EmitDefaultValue = false)]
        public int OtpPolicyLookAheadWindow { get; set; }

        /// <summary>
        /// Gets or Sets OtpPolicyPeriod
        /// </summary>
        [DataMember(Name = "otpPolicyPeriod", EmitDefaultValue = false)]
        public int OtpPolicyPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OtpPolicyType
        /// </summary>
        [DataMember(Name = "otpPolicyType", EmitDefaultValue = false)]
        public string OtpPolicyType { get; set; }

        /// <summary>
        /// Gets or Sets OtpSupportedApplications
        /// </summary>
        [DataMember(Name = "otpSupportedApplications", EmitDefaultValue = false)]
        public List<string> OtpSupportedApplications { get; set; }

        /// <summary>
        /// Gets or Sets PasswordPolicy
        /// </summary>
        [DataMember(Name = "passwordPolicy", EmitDefaultValue = false)]
        public string PasswordPolicy { get; set; }

        /// <summary>
        /// Gets or Sets PermanentLockout
        /// </summary>
        [DataMember(Name = "permanentLockout", EmitDefaultValue = true)]
        public bool PermanentLockout { get; set; }

        /// <summary>
        /// Gets or Sets ProtocolMappers
        /// </summary>
        [DataMember(Name = "protocolMappers", EmitDefaultValue = false)]
        public List<ProtocolMapperRepresentation> ProtocolMappers { get; set; }

        /// <summary>
        /// Gets or Sets QuickLoginCheckMilliSeconds
        /// </summary>
        [DataMember(Name = "quickLoginCheckMilliSeconds", EmitDefaultValue = false)]
        public long QuickLoginCheckMilliSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Realm
        /// </summary>
        [DataMember(Name = "realm", EmitDefaultValue = false)]
        public string Realm { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenMaxReuse
        /// </summary>
        [DataMember(Name = "refreshTokenMaxReuse", EmitDefaultValue = false)]
        public int RefreshTokenMaxReuse { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationAllowed
        /// </summary>
        [DataMember(Name = "registrationAllowed", EmitDefaultValue = true)]
        public bool RegistrationAllowed { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationEmailAsUsername
        /// </summary>
        [DataMember(Name = "registrationEmailAsUsername", EmitDefaultValue = true)]
        public bool RegistrationEmailAsUsername { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationFlow
        /// </summary>
        [DataMember(Name = "registrationFlow", EmitDefaultValue = false)]
        public string RegistrationFlow { get; set; }

        /// <summary>
        /// Gets or Sets RememberMe
        /// </summary>
        [DataMember(Name = "rememberMe", EmitDefaultValue = true)]
        public bool RememberMe { get; set; }

        /// <summary>
        /// Gets or Sets RequiredActions
        /// </summary>
        [DataMember(Name = "requiredActions", EmitDefaultValue = false)]
        public List<RequiredActionProviderRepresentation> RequiredActions { get; set; }

        /// <summary>
        /// Gets or Sets ResetCredentialsFlow
        /// </summary>
        [DataMember(Name = "resetCredentialsFlow", EmitDefaultValue = false)]
        public string ResetCredentialsFlow { get; set; }

        /// <summary>
        /// Gets or Sets ResetPasswordAllowed
        /// </summary>
        [DataMember(Name = "resetPasswordAllowed", EmitDefaultValue = true)]
        public bool ResetPasswordAllowed { get; set; }

        /// <summary>
        /// Gets or Sets RevokeRefreshToken
        /// </summary>
        [DataMember(Name = "revokeRefreshToken", EmitDefaultValue = true)]
        public bool RevokeRefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = false)]
        public RolesRepresentation Roles { get; set; }

        /// <summary>
        /// Gets or Sets ScopeMappings
        /// </summary>
        [DataMember(Name = "scopeMappings", EmitDefaultValue = false)]
        public List<ScopeMappingRepresentation> ScopeMappings { get; set; }

        /// <summary>
        /// Gets or Sets SmtpServer
        /// </summary>
        [DataMember(Name = "smtpServer", EmitDefaultValue = false)]
        public Dictionary<string, Object> SmtpServer { get; set; }

        /// <summary>
        /// Gets or Sets SslRequired
        /// </summary>
        [DataMember(Name = "sslRequired", EmitDefaultValue = false)]
        public string SslRequired { get; set; }

        /// <summary>
        /// Gets or Sets SsoSessionIdleTimeout
        /// </summary>
        [DataMember(Name = "ssoSessionIdleTimeout", EmitDefaultValue = false)]
        public int SsoSessionIdleTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SsoSessionIdleTimeoutRememberMe
        /// </summary>
        [DataMember(Name = "ssoSessionIdleTimeoutRememberMe", EmitDefaultValue = false)]
        public int SsoSessionIdleTimeoutRememberMe { get; set; }

        /// <summary>
        /// Gets or Sets SsoSessionMaxLifespan
        /// </summary>
        [DataMember(Name = "ssoSessionMaxLifespan", EmitDefaultValue = false)]
        public int SsoSessionMaxLifespan { get; set; }

        /// <summary>
        /// Gets or Sets SsoSessionMaxLifespanRememberMe
        /// </summary>
        [DataMember(Name = "ssoSessionMaxLifespanRememberMe", EmitDefaultValue = false)]
        public int SsoSessionMaxLifespanRememberMe { get; set; }

        /// <summary>
        /// Gets or Sets SupportedLocales
        /// </summary>
        [DataMember(Name = "supportedLocales", EmitDefaultValue = false)]
        public List<string> SupportedLocales { get; set; }

        /// <summary>
        /// Gets or Sets UserFederationMappers
        /// </summary>
        [DataMember(Name = "userFederationMappers", EmitDefaultValue = false)]
        public List<UserFederationMapperRepresentation> UserFederationMappers { get; set; }

        /// <summary>
        /// Gets or Sets UserFederationProviders
        /// </summary>
        [DataMember(Name = "userFederationProviders", EmitDefaultValue = false)]
        public List<UserFederationProviderRepresentation> UserFederationProviders { get; set; }

        /// <summary>
        /// Gets or Sets UserManagedAccessAllowed
        /// </summary>
        [DataMember(Name = "userManagedAccessAllowed", EmitDefaultValue = true)]
        public bool UserManagedAccessAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<UserRepresentation> Users { get; set; }

        /// <summary>
        /// Gets or Sets VerifyEmail
        /// </summary>
        [DataMember(Name = "verifyEmail", EmitDefaultValue = true)]
        public bool VerifyEmail { get; set; }

        /// <summary>
        /// Gets or Sets WaitIncrementSeconds
        /// </summary>
        [DataMember(Name = "waitIncrementSeconds", EmitDefaultValue = false)]
        public int WaitIncrementSeconds { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyAcceptableAaguids
        /// </summary>
        [DataMember(Name = "webAuthnPolicyAcceptableAaguids", EmitDefaultValue = false)]
        public List<string> WebAuthnPolicyAcceptableAaguids { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyAttestationConveyancePreference
        /// </summary>
        [DataMember(Name = "webAuthnPolicyAttestationConveyancePreference", EmitDefaultValue = false)]
        public string WebAuthnPolicyAttestationConveyancePreference { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyAuthenticatorAttachment
        /// </summary>
        [DataMember(Name = "webAuthnPolicyAuthenticatorAttachment", EmitDefaultValue = false)]
        public string WebAuthnPolicyAuthenticatorAttachment { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyAvoidSameAuthenticatorRegister
        /// </summary>
        [DataMember(Name = "webAuthnPolicyAvoidSameAuthenticatorRegister", EmitDefaultValue = true)]
        public bool WebAuthnPolicyAvoidSameAuthenticatorRegister { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyCreateTimeout
        /// </summary>
        [DataMember(Name = "webAuthnPolicyCreateTimeout", EmitDefaultValue = false)]
        public int WebAuthnPolicyCreateTimeout { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessAcceptableAaguids
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessAcceptableAaguids", EmitDefaultValue = false)]
        public List<string> WebAuthnPolicyPasswordlessAcceptableAaguids { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessAttestationConveyancePreference
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessAttestationConveyancePreference", EmitDefaultValue = false)]
        public string WebAuthnPolicyPasswordlessAttestationConveyancePreference { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessAuthenticatorAttachment
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessAuthenticatorAttachment", EmitDefaultValue = false)]
        public string WebAuthnPolicyPasswordlessAuthenticatorAttachment { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister", EmitDefaultValue = true)]
        public bool WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessCreateTimeout
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessCreateTimeout", EmitDefaultValue = false)]
        public int WebAuthnPolicyPasswordlessCreateTimeout { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessRequireResidentKey
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessRequireResidentKey", EmitDefaultValue = false)]
        public string WebAuthnPolicyPasswordlessRequireResidentKey { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessRpEntityName
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessRpEntityName", EmitDefaultValue = false)]
        public string WebAuthnPolicyPasswordlessRpEntityName { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessRpId
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessRpId", EmitDefaultValue = false)]
        public string WebAuthnPolicyPasswordlessRpId { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessSignatureAlgorithms
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessSignatureAlgorithms", EmitDefaultValue = false)]
        public List<string> WebAuthnPolicyPasswordlessSignatureAlgorithms { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyPasswordlessUserVerificationRequirement
        /// </summary>
        [DataMember(Name = "webAuthnPolicyPasswordlessUserVerificationRequirement", EmitDefaultValue = false)]
        public string WebAuthnPolicyPasswordlessUserVerificationRequirement { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyRequireResidentKey
        /// </summary>
        [DataMember(Name = "webAuthnPolicyRequireResidentKey", EmitDefaultValue = false)]
        public string WebAuthnPolicyRequireResidentKey { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyRpEntityName
        /// </summary>
        [DataMember(Name = "webAuthnPolicyRpEntityName", EmitDefaultValue = false)]
        public string WebAuthnPolicyRpEntityName { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyRpId
        /// </summary>
        [DataMember(Name = "webAuthnPolicyRpId", EmitDefaultValue = false)]
        public string WebAuthnPolicyRpId { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicySignatureAlgorithms
        /// </summary>
        [DataMember(Name = "webAuthnPolicySignatureAlgorithms", EmitDefaultValue = false)]
        public List<string> WebAuthnPolicySignatureAlgorithms { get; set; }

        /// <summary>
        /// Gets or Sets WebAuthnPolicyUserVerificationRequirement
        /// </summary>
        [DataMember(Name = "webAuthnPolicyUserVerificationRequirement", EmitDefaultValue = false)]
        public string WebAuthnPolicyUserVerificationRequirement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RealmRepresentation {\n");
            sb.Append("  AccessCodeLifespan: ").Append(AccessCodeLifespan).Append("\n");
            sb.Append("  AccessCodeLifespanLogin: ").Append(AccessCodeLifespanLogin).Append("\n");
            sb.Append("  AccessCodeLifespanUserAction: ").Append(AccessCodeLifespanUserAction).Append("\n");
            sb.Append("  AccessTokenLifespan: ").Append(AccessTokenLifespan).Append("\n");
            sb.Append("  AccessTokenLifespanForImplicitFlow: ").Append(AccessTokenLifespanForImplicitFlow).Append("\n");
            sb.Append("  AccountTheme: ").Append(AccountTheme).Append("\n");
            sb.Append("  ActionTokenGeneratedByAdminLifespan: ").Append(ActionTokenGeneratedByAdminLifespan).Append("\n");
            sb.Append("  ActionTokenGeneratedByUserLifespan: ").Append(ActionTokenGeneratedByUserLifespan).Append("\n");
            sb.Append("  AdminEventsDetailsEnabled: ").Append(AdminEventsDetailsEnabled).Append("\n");
            sb.Append("  AdminEventsEnabled: ").Append(AdminEventsEnabled).Append("\n");
            sb.Append("  AdminTheme: ").Append(AdminTheme).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  AuthenticationFlows: ").Append(AuthenticationFlows).Append("\n");
            sb.Append("  AuthenticatorConfig: ").Append(AuthenticatorConfig).Append("\n");
            sb.Append("  BrowserFlow: ").Append(BrowserFlow).Append("\n");
            sb.Append("  BrowserSecurityHeaders: ").Append(BrowserSecurityHeaders).Append("\n");
            sb.Append("  BruteForceProtected: ").Append(BruteForceProtected).Append("\n");
            sb.Append("  ClientAuthenticationFlow: ").Append(ClientAuthenticationFlow).Append("\n");
            sb.Append("  ClientOfflineSessionIdleTimeout: ").Append(ClientOfflineSessionIdleTimeout).Append("\n");
            sb.Append("  ClientOfflineSessionMaxLifespan: ").Append(ClientOfflineSessionMaxLifespan).Append("\n");
            sb.Append("  ClientPolicies: ").Append(ClientPolicies).Append("\n");
            sb.Append("  ClientProfiles: ").Append(ClientProfiles).Append("\n");
            sb.Append("  ClientScopeMappings: ").Append(ClientScopeMappings).Append("\n");
            sb.Append("  ClientScopes: ").Append(ClientScopes).Append("\n");
            sb.Append("  ClientSessionIdleTimeout: ").Append(ClientSessionIdleTimeout).Append("\n");
            sb.Append("  ClientSessionMaxLifespan: ").Append(ClientSessionMaxLifespan).Append("\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  DefaultDefaultClientScopes: ").Append(DefaultDefaultClientScopes).Append("\n");
            sb.Append("  DefaultGroups: ").Append(DefaultGroups).Append("\n");
            sb.Append("  DefaultLocale: ").Append(DefaultLocale).Append("\n");
            sb.Append("  DefaultOptionalClientScopes: ").Append(DefaultOptionalClientScopes).Append("\n");
            sb.Append("  DefaultRole: ").Append(DefaultRole).Append("\n");
            sb.Append("  DefaultSignatureAlgorithm: ").Append(DefaultSignatureAlgorithm).Append("\n");
            sb.Append("  DirectGrantFlow: ").Append(DirectGrantFlow).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayNameHtml: ").Append(DisplayNameHtml).Append("\n");
            sb.Append("  DockerAuthenticationFlow: ").Append(DockerAuthenticationFlow).Append("\n");
            sb.Append("  DuplicateEmailsAllowed: ").Append(DuplicateEmailsAllowed).Append("\n");
            sb.Append("  EditUsernameAllowed: ").Append(EditUsernameAllowed).Append("\n");
            sb.Append("  EmailTheme: ").Append(EmailTheme).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnabledEventTypes: ").Append(EnabledEventTypes).Append("\n");
            sb.Append("  EventsEnabled: ").Append(EventsEnabled).Append("\n");
            sb.Append("  EventsExpiration: ").Append(EventsExpiration).Append("\n");
            sb.Append("  EventsListeners: ").Append(EventsListeners).Append("\n");
            sb.Append("  FailureFactor: ").Append(FailureFactor).Append("\n");
            sb.Append("  FederatedUsers: ").Append(FederatedUsers).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdentityProviderMappers: ").Append(IdentityProviderMappers).Append("\n");
            sb.Append("  IdentityProviders: ").Append(IdentityProviders).Append("\n");
            sb.Append("  InternationalizationEnabled: ").Append(InternationalizationEnabled).Append("\n");
            sb.Append("  KeycloakVersion: ").Append(KeycloakVersion).Append("\n");
            sb.Append("  LoginTheme: ").Append(LoginTheme).Append("\n");
            sb.Append("  LoginWithEmailAllowed: ").Append(LoginWithEmailAllowed).Append("\n");
            sb.Append("  MaxDeltaTimeSeconds: ").Append(MaxDeltaTimeSeconds).Append("\n");
            sb.Append("  MaxFailureWaitSeconds: ").Append(MaxFailureWaitSeconds).Append("\n");
            sb.Append("  MinimumQuickLoginWaitSeconds: ").Append(MinimumQuickLoginWaitSeconds).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  OAuth2DeviceCodeLifespan: ").Append(OAuth2DeviceCodeLifespan).Append("\n");
            sb.Append("  OAuth2DevicePollingInterval: ").Append(OAuth2DevicePollingInterval).Append("\n");
            sb.Append("  Oauth2DeviceCodeLifespan: ").Append(Oauth2DeviceCodeLifespan).Append("\n");
            sb.Append("  Oauth2DevicePollingInterval: ").Append(Oauth2DevicePollingInterval).Append("\n");
            sb.Append("  OfflineSessionIdleTimeout: ").Append(OfflineSessionIdleTimeout).Append("\n");
            sb.Append("  OfflineSessionMaxLifespan: ").Append(OfflineSessionMaxLifespan).Append("\n");
            sb.Append("  OfflineSessionMaxLifespanEnabled: ").Append(OfflineSessionMaxLifespanEnabled).Append("\n");
            sb.Append("  OtpPolicyAlgorithm: ").Append(OtpPolicyAlgorithm).Append("\n");
            sb.Append("  OtpPolicyDigits: ").Append(OtpPolicyDigits).Append("\n");
            sb.Append("  OtpPolicyInitialCounter: ").Append(OtpPolicyInitialCounter).Append("\n");
            sb.Append("  OtpPolicyLookAheadWindow: ").Append(OtpPolicyLookAheadWindow).Append("\n");
            sb.Append("  OtpPolicyPeriod: ").Append(OtpPolicyPeriod).Append("\n");
            sb.Append("  OtpPolicyType: ").Append(OtpPolicyType).Append("\n");
            sb.Append("  OtpSupportedApplications: ").Append(OtpSupportedApplications).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  PermanentLockout: ").Append(PermanentLockout).Append("\n");
            sb.Append("  ProtocolMappers: ").Append(ProtocolMappers).Append("\n");
            sb.Append("  QuickLoginCheckMilliSeconds: ").Append(QuickLoginCheckMilliSeconds).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  RefreshTokenMaxReuse: ").Append(RefreshTokenMaxReuse).Append("\n");
            sb.Append("  RegistrationAllowed: ").Append(RegistrationAllowed).Append("\n");
            sb.Append("  RegistrationEmailAsUsername: ").Append(RegistrationEmailAsUsername).Append("\n");
            sb.Append("  RegistrationFlow: ").Append(RegistrationFlow).Append("\n");
            sb.Append("  RememberMe: ").Append(RememberMe).Append("\n");
            sb.Append("  RequiredActions: ").Append(RequiredActions).Append("\n");
            sb.Append("  ResetCredentialsFlow: ").Append(ResetCredentialsFlow).Append("\n");
            sb.Append("  ResetPasswordAllowed: ").Append(ResetPasswordAllowed).Append("\n");
            sb.Append("  RevokeRefreshToken: ").Append(RevokeRefreshToken).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  ScopeMappings: ").Append(ScopeMappings).Append("\n");
            sb.Append("  SmtpServer: ").Append(SmtpServer).Append("\n");
            sb.Append("  SslRequired: ").Append(SslRequired).Append("\n");
            sb.Append("  SsoSessionIdleTimeout: ").Append(SsoSessionIdleTimeout).Append("\n");
            sb.Append("  SsoSessionIdleTimeoutRememberMe: ").Append(SsoSessionIdleTimeoutRememberMe).Append("\n");
            sb.Append("  SsoSessionMaxLifespan: ").Append(SsoSessionMaxLifespan).Append("\n");
            sb.Append("  SsoSessionMaxLifespanRememberMe: ").Append(SsoSessionMaxLifespanRememberMe).Append("\n");
            sb.Append("  SupportedLocales: ").Append(SupportedLocales).Append("\n");
            sb.Append("  UserFederationMappers: ").Append(UserFederationMappers).Append("\n");
            sb.Append("  UserFederationProviders: ").Append(UserFederationProviders).Append("\n");
            sb.Append("  UserManagedAccessAllowed: ").Append(UserManagedAccessAllowed).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  VerifyEmail: ").Append(VerifyEmail).Append("\n");
            sb.Append("  WaitIncrementSeconds: ").Append(WaitIncrementSeconds).Append("\n");
            sb.Append("  WebAuthnPolicyAcceptableAaguids: ").Append(WebAuthnPolicyAcceptableAaguids).Append("\n");
            sb.Append("  WebAuthnPolicyAttestationConveyancePreference: ").Append(WebAuthnPolicyAttestationConveyancePreference).Append("\n");
            sb.Append("  WebAuthnPolicyAuthenticatorAttachment: ").Append(WebAuthnPolicyAuthenticatorAttachment).Append("\n");
            sb.Append("  WebAuthnPolicyAvoidSameAuthenticatorRegister: ").Append(WebAuthnPolicyAvoidSameAuthenticatorRegister).Append("\n");
            sb.Append("  WebAuthnPolicyCreateTimeout: ").Append(WebAuthnPolicyCreateTimeout).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessAcceptableAaguids: ").Append(WebAuthnPolicyPasswordlessAcceptableAaguids).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessAttestationConveyancePreference: ").Append(WebAuthnPolicyPasswordlessAttestationConveyancePreference).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessAuthenticatorAttachment: ").Append(WebAuthnPolicyPasswordlessAuthenticatorAttachment).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister: ").Append(WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessCreateTimeout: ").Append(WebAuthnPolicyPasswordlessCreateTimeout).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessRequireResidentKey: ").Append(WebAuthnPolicyPasswordlessRequireResidentKey).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessRpEntityName: ").Append(WebAuthnPolicyPasswordlessRpEntityName).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessRpId: ").Append(WebAuthnPolicyPasswordlessRpId).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessSignatureAlgorithms: ").Append(WebAuthnPolicyPasswordlessSignatureAlgorithms).Append("\n");
            sb.Append("  WebAuthnPolicyPasswordlessUserVerificationRequirement: ").Append(WebAuthnPolicyPasswordlessUserVerificationRequirement).Append("\n");
            sb.Append("  WebAuthnPolicyRequireResidentKey: ").Append(WebAuthnPolicyRequireResidentKey).Append("\n");
            sb.Append("  WebAuthnPolicyRpEntityName: ").Append(WebAuthnPolicyRpEntityName).Append("\n");
            sb.Append("  WebAuthnPolicyRpId: ").Append(WebAuthnPolicyRpId).Append("\n");
            sb.Append("  WebAuthnPolicySignatureAlgorithms: ").Append(WebAuthnPolicySignatureAlgorithms).Append("\n");
            sb.Append("  WebAuthnPolicyUserVerificationRequirement: ").Append(WebAuthnPolicyUserVerificationRequirement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealmRepresentation);
        }

        /// <summary>
        /// Returns true if RealmRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of RealmRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessCodeLifespan == input.AccessCodeLifespan ||
                    this.AccessCodeLifespan.Equals(input.AccessCodeLifespan)
                ) && 
                (
                    this.AccessCodeLifespanLogin == input.AccessCodeLifespanLogin ||
                    this.AccessCodeLifespanLogin.Equals(input.AccessCodeLifespanLogin)
                ) && 
                (
                    this.AccessCodeLifespanUserAction == input.AccessCodeLifespanUserAction ||
                    this.AccessCodeLifespanUserAction.Equals(input.AccessCodeLifespanUserAction)
                ) && 
                (
                    this.AccessTokenLifespan == input.AccessTokenLifespan ||
                    this.AccessTokenLifespan.Equals(input.AccessTokenLifespan)
                ) && 
                (
                    this.AccessTokenLifespanForImplicitFlow == input.AccessTokenLifespanForImplicitFlow ||
                    this.AccessTokenLifespanForImplicitFlow.Equals(input.AccessTokenLifespanForImplicitFlow)
                ) && 
                (
                    this.AccountTheme == input.AccountTheme ||
                    (this.AccountTheme != null &&
                    this.AccountTheme.Equals(input.AccountTheme))
                ) && 
                (
                    this.ActionTokenGeneratedByAdminLifespan == input.ActionTokenGeneratedByAdminLifespan ||
                    this.ActionTokenGeneratedByAdminLifespan.Equals(input.ActionTokenGeneratedByAdminLifespan)
                ) && 
                (
                    this.ActionTokenGeneratedByUserLifespan == input.ActionTokenGeneratedByUserLifespan ||
                    this.ActionTokenGeneratedByUserLifespan.Equals(input.ActionTokenGeneratedByUserLifespan)
                ) && 
                (
                    this.AdminEventsDetailsEnabled == input.AdminEventsDetailsEnabled ||
                    this.AdminEventsDetailsEnabled.Equals(input.AdminEventsDetailsEnabled)
                ) && 
                (
                    this.AdminEventsEnabled == input.AdminEventsEnabled ||
                    this.AdminEventsEnabled.Equals(input.AdminEventsEnabled)
                ) && 
                (
                    this.AdminTheme == input.AdminTheme ||
                    (this.AdminTheme != null &&
                    this.AdminTheme.Equals(input.AdminTheme))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.AuthenticationFlows == input.AuthenticationFlows ||
                    this.AuthenticationFlows != null &&
                    input.AuthenticationFlows != null &&
                    this.AuthenticationFlows.SequenceEqual(input.AuthenticationFlows)
                ) && 
                (
                    this.AuthenticatorConfig == input.AuthenticatorConfig ||
                    this.AuthenticatorConfig != null &&
                    input.AuthenticatorConfig != null &&
                    this.AuthenticatorConfig.SequenceEqual(input.AuthenticatorConfig)
                ) && 
                (
                    this.BrowserFlow == input.BrowserFlow ||
                    (this.BrowserFlow != null &&
                    this.BrowserFlow.Equals(input.BrowserFlow))
                ) && 
                (
                    this.BrowserSecurityHeaders == input.BrowserSecurityHeaders ||
                    this.BrowserSecurityHeaders != null &&
                    input.BrowserSecurityHeaders != null &&
                    this.BrowserSecurityHeaders.SequenceEqual(input.BrowserSecurityHeaders)
                ) && 
                (
                    this.BruteForceProtected == input.BruteForceProtected ||
                    this.BruteForceProtected.Equals(input.BruteForceProtected)
                ) && 
                (
                    this.ClientAuthenticationFlow == input.ClientAuthenticationFlow ||
                    (this.ClientAuthenticationFlow != null &&
                    this.ClientAuthenticationFlow.Equals(input.ClientAuthenticationFlow))
                ) && 
                (
                    this.ClientOfflineSessionIdleTimeout == input.ClientOfflineSessionIdleTimeout ||
                    this.ClientOfflineSessionIdleTimeout.Equals(input.ClientOfflineSessionIdleTimeout)
                ) && 
                (
                    this.ClientOfflineSessionMaxLifespan == input.ClientOfflineSessionMaxLifespan ||
                    this.ClientOfflineSessionMaxLifespan.Equals(input.ClientOfflineSessionMaxLifespan)
                ) && 
                (
                    this.ClientPolicies == input.ClientPolicies ||
                    (this.ClientPolicies != null &&
                    this.ClientPolicies.Equals(input.ClientPolicies))
                ) && 
                (
                    this.ClientProfiles == input.ClientProfiles ||
                    (this.ClientProfiles != null &&
                    this.ClientProfiles.Equals(input.ClientProfiles))
                ) && 
                (
                    this.ClientScopeMappings == input.ClientScopeMappings ||
                    this.ClientScopeMappings != null &&
                    input.ClientScopeMappings != null &&
                    this.ClientScopeMappings.SequenceEqual(input.ClientScopeMappings)
                ) && 
                (
                    this.ClientScopes == input.ClientScopes ||
                    this.ClientScopes != null &&
                    input.ClientScopes != null &&
                    this.ClientScopes.SequenceEqual(input.ClientScopes)
                ) && 
                (
                    this.ClientSessionIdleTimeout == input.ClientSessionIdleTimeout ||
                    this.ClientSessionIdleTimeout.Equals(input.ClientSessionIdleTimeout)
                ) && 
                (
                    this.ClientSessionMaxLifespan == input.ClientSessionMaxLifespan ||
                    this.ClientSessionMaxLifespan.Equals(input.ClientSessionMaxLifespan)
                ) && 
                (
                    this.Clients == input.Clients ||
                    this.Clients != null &&
                    input.Clients != null &&
                    this.Clients.SequenceEqual(input.Clients)
                ) && 
                (
                    this.Components == input.Components ||
                    (this.Components != null &&
                    this.Components.Equals(input.Components))
                ) && 
                (
                    this.DefaultDefaultClientScopes == input.DefaultDefaultClientScopes ||
                    this.DefaultDefaultClientScopes != null &&
                    input.DefaultDefaultClientScopes != null &&
                    this.DefaultDefaultClientScopes.SequenceEqual(input.DefaultDefaultClientScopes)
                ) && 
                (
                    this.DefaultGroups == input.DefaultGroups ||
                    this.DefaultGroups != null &&
                    input.DefaultGroups != null &&
                    this.DefaultGroups.SequenceEqual(input.DefaultGroups)
                ) && 
                (
                    this.DefaultLocale == input.DefaultLocale ||
                    (this.DefaultLocale != null &&
                    this.DefaultLocale.Equals(input.DefaultLocale))
                ) && 
                (
                    this.DefaultOptionalClientScopes == input.DefaultOptionalClientScopes ||
                    this.DefaultOptionalClientScopes != null &&
                    input.DefaultOptionalClientScopes != null &&
                    this.DefaultOptionalClientScopes.SequenceEqual(input.DefaultOptionalClientScopes)
                ) && 
                (
                    this.DefaultRole == input.DefaultRole ||
                    (this.DefaultRole != null &&
                    this.DefaultRole.Equals(input.DefaultRole))
                ) && 
                (
                    this.DefaultSignatureAlgorithm == input.DefaultSignatureAlgorithm ||
                    (this.DefaultSignatureAlgorithm != null &&
                    this.DefaultSignatureAlgorithm.Equals(input.DefaultSignatureAlgorithm))
                ) && 
                (
                    this.DirectGrantFlow == input.DirectGrantFlow ||
                    (this.DirectGrantFlow != null &&
                    this.DirectGrantFlow.Equals(input.DirectGrantFlow))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DisplayNameHtml == input.DisplayNameHtml ||
                    (this.DisplayNameHtml != null &&
                    this.DisplayNameHtml.Equals(input.DisplayNameHtml))
                ) && 
                (
                    this.DockerAuthenticationFlow == input.DockerAuthenticationFlow ||
                    (this.DockerAuthenticationFlow != null &&
                    this.DockerAuthenticationFlow.Equals(input.DockerAuthenticationFlow))
                ) && 
                (
                    this.DuplicateEmailsAllowed == input.DuplicateEmailsAllowed ||
                    this.DuplicateEmailsAllowed.Equals(input.DuplicateEmailsAllowed)
                ) && 
                (
                    this.EditUsernameAllowed == input.EditUsernameAllowed ||
                    this.EditUsernameAllowed.Equals(input.EditUsernameAllowed)
                ) && 
                (
                    this.EmailTheme == input.EmailTheme ||
                    (this.EmailTheme != null &&
                    this.EmailTheme.Equals(input.EmailTheme))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.EnabledEventTypes == input.EnabledEventTypes ||
                    this.EnabledEventTypes != null &&
                    input.EnabledEventTypes != null &&
                    this.EnabledEventTypes.SequenceEqual(input.EnabledEventTypes)
                ) && 
                (
                    this.EventsEnabled == input.EventsEnabled ||
                    this.EventsEnabled.Equals(input.EventsEnabled)
                ) && 
                (
                    this.EventsExpiration == input.EventsExpiration ||
                    this.EventsExpiration.Equals(input.EventsExpiration)
                ) && 
                (
                    this.EventsListeners == input.EventsListeners ||
                    this.EventsListeners != null &&
                    input.EventsListeners != null &&
                    this.EventsListeners.SequenceEqual(input.EventsListeners)
                ) && 
                (
                    this.FailureFactor == input.FailureFactor ||
                    this.FailureFactor.Equals(input.FailureFactor)
                ) && 
                (
                    this.FederatedUsers == input.FederatedUsers ||
                    this.FederatedUsers != null &&
                    input.FederatedUsers != null &&
                    this.FederatedUsers.SequenceEqual(input.FederatedUsers)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdentityProviderMappers == input.IdentityProviderMappers ||
                    this.IdentityProviderMappers != null &&
                    input.IdentityProviderMappers != null &&
                    this.IdentityProviderMappers.SequenceEqual(input.IdentityProviderMappers)
                ) && 
                (
                    this.IdentityProviders == input.IdentityProviders ||
                    this.IdentityProviders != null &&
                    input.IdentityProviders != null &&
                    this.IdentityProviders.SequenceEqual(input.IdentityProviders)
                ) && 
                (
                    this.InternationalizationEnabled == input.InternationalizationEnabled ||
                    this.InternationalizationEnabled.Equals(input.InternationalizationEnabled)
                ) && 
                (
                    this.KeycloakVersion == input.KeycloakVersion ||
                    (this.KeycloakVersion != null &&
                    this.KeycloakVersion.Equals(input.KeycloakVersion))
                ) && 
                (
                    this.LoginTheme == input.LoginTheme ||
                    (this.LoginTheme != null &&
                    this.LoginTheme.Equals(input.LoginTheme))
                ) && 
                (
                    this.LoginWithEmailAllowed == input.LoginWithEmailAllowed ||
                    this.LoginWithEmailAllowed.Equals(input.LoginWithEmailAllowed)
                ) && 
                (
                    this.MaxDeltaTimeSeconds == input.MaxDeltaTimeSeconds ||
                    this.MaxDeltaTimeSeconds.Equals(input.MaxDeltaTimeSeconds)
                ) && 
                (
                    this.MaxFailureWaitSeconds == input.MaxFailureWaitSeconds ||
                    this.MaxFailureWaitSeconds.Equals(input.MaxFailureWaitSeconds)
                ) && 
                (
                    this.MinimumQuickLoginWaitSeconds == input.MinimumQuickLoginWaitSeconds ||
                    this.MinimumQuickLoginWaitSeconds.Equals(input.MinimumQuickLoginWaitSeconds)
                ) && 
                (
                    this.NotBefore == input.NotBefore ||
                    this.NotBefore.Equals(input.NotBefore)
                ) && 
                (
                    this.OAuth2DeviceCodeLifespan == input.OAuth2DeviceCodeLifespan ||
                    this.OAuth2DeviceCodeLifespan.Equals(input.OAuth2DeviceCodeLifespan)
                ) && 
                (
                    this.OAuth2DevicePollingInterval == input.OAuth2DevicePollingInterval ||
                    this.OAuth2DevicePollingInterval.Equals(input.OAuth2DevicePollingInterval)
                ) && 
                (
                    this.Oauth2DeviceCodeLifespan == input.Oauth2DeviceCodeLifespan ||
                    this.Oauth2DeviceCodeLifespan.Equals(input.Oauth2DeviceCodeLifespan)
                ) && 
                (
                    this.Oauth2DevicePollingInterval == input.Oauth2DevicePollingInterval ||
                    this.Oauth2DevicePollingInterval.Equals(input.Oauth2DevicePollingInterval)
                ) && 
                (
                    this.OfflineSessionIdleTimeout == input.OfflineSessionIdleTimeout ||
                    this.OfflineSessionIdleTimeout.Equals(input.OfflineSessionIdleTimeout)
                ) && 
                (
                    this.OfflineSessionMaxLifespan == input.OfflineSessionMaxLifespan ||
                    this.OfflineSessionMaxLifespan.Equals(input.OfflineSessionMaxLifespan)
                ) && 
                (
                    this.OfflineSessionMaxLifespanEnabled == input.OfflineSessionMaxLifespanEnabled ||
                    this.OfflineSessionMaxLifespanEnabled.Equals(input.OfflineSessionMaxLifespanEnabled)
                ) && 
                (
                    this.OtpPolicyAlgorithm == input.OtpPolicyAlgorithm ||
                    (this.OtpPolicyAlgorithm != null &&
                    this.OtpPolicyAlgorithm.Equals(input.OtpPolicyAlgorithm))
                ) && 
                (
                    this.OtpPolicyDigits == input.OtpPolicyDigits ||
                    this.OtpPolicyDigits.Equals(input.OtpPolicyDigits)
                ) && 
                (
                    this.OtpPolicyInitialCounter == input.OtpPolicyInitialCounter ||
                    this.OtpPolicyInitialCounter.Equals(input.OtpPolicyInitialCounter)
                ) && 
                (
                    this.OtpPolicyLookAheadWindow == input.OtpPolicyLookAheadWindow ||
                    this.OtpPolicyLookAheadWindow.Equals(input.OtpPolicyLookAheadWindow)
                ) && 
                (
                    this.OtpPolicyPeriod == input.OtpPolicyPeriod ||
                    this.OtpPolicyPeriod.Equals(input.OtpPolicyPeriod)
                ) && 
                (
                    this.OtpPolicyType == input.OtpPolicyType ||
                    (this.OtpPolicyType != null &&
                    this.OtpPolicyType.Equals(input.OtpPolicyType))
                ) && 
                (
                    this.OtpSupportedApplications == input.OtpSupportedApplications ||
                    this.OtpSupportedApplications != null &&
                    input.OtpSupportedApplications != null &&
                    this.OtpSupportedApplications.SequenceEqual(input.OtpSupportedApplications)
                ) && 
                (
                    this.PasswordPolicy == input.PasswordPolicy ||
                    (this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(input.PasswordPolicy))
                ) && 
                (
                    this.PermanentLockout == input.PermanentLockout ||
                    this.PermanentLockout.Equals(input.PermanentLockout)
                ) && 
                (
                    this.ProtocolMappers == input.ProtocolMappers ||
                    this.ProtocolMappers != null &&
                    input.ProtocolMappers != null &&
                    this.ProtocolMappers.SequenceEqual(input.ProtocolMappers)
                ) && 
                (
                    this.QuickLoginCheckMilliSeconds == input.QuickLoginCheckMilliSeconds ||
                    this.QuickLoginCheckMilliSeconds.Equals(input.QuickLoginCheckMilliSeconds)
                ) && 
                (
                    this.Realm == input.Realm ||
                    (this.Realm != null &&
                    this.Realm.Equals(input.Realm))
                ) && 
                (
                    this.RefreshTokenMaxReuse == input.RefreshTokenMaxReuse ||
                    this.RefreshTokenMaxReuse.Equals(input.RefreshTokenMaxReuse)
                ) && 
                (
                    this.RegistrationAllowed == input.RegistrationAllowed ||
                    this.RegistrationAllowed.Equals(input.RegistrationAllowed)
                ) && 
                (
                    this.RegistrationEmailAsUsername == input.RegistrationEmailAsUsername ||
                    this.RegistrationEmailAsUsername.Equals(input.RegistrationEmailAsUsername)
                ) && 
                (
                    this.RegistrationFlow == input.RegistrationFlow ||
                    (this.RegistrationFlow != null &&
                    this.RegistrationFlow.Equals(input.RegistrationFlow))
                ) && 
                (
                    this.RememberMe == input.RememberMe ||
                    this.RememberMe.Equals(input.RememberMe)
                ) && 
                (
                    this.RequiredActions == input.RequiredActions ||
                    this.RequiredActions != null &&
                    input.RequiredActions != null &&
                    this.RequiredActions.SequenceEqual(input.RequiredActions)
                ) && 
                (
                    this.ResetCredentialsFlow == input.ResetCredentialsFlow ||
                    (this.ResetCredentialsFlow != null &&
                    this.ResetCredentialsFlow.Equals(input.ResetCredentialsFlow))
                ) && 
                (
                    this.ResetPasswordAllowed == input.ResetPasswordAllowed ||
                    this.ResetPasswordAllowed.Equals(input.ResetPasswordAllowed)
                ) && 
                (
                    this.RevokeRefreshToken == input.RevokeRefreshToken ||
                    this.RevokeRefreshToken.Equals(input.RevokeRefreshToken)
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                ) && 
                (
                    this.ScopeMappings == input.ScopeMappings ||
                    this.ScopeMappings != null &&
                    input.ScopeMappings != null &&
                    this.ScopeMappings.SequenceEqual(input.ScopeMappings)
                ) && 
                (
                    this.SmtpServer == input.SmtpServer ||
                    this.SmtpServer != null &&
                    input.SmtpServer != null &&
                    this.SmtpServer.SequenceEqual(input.SmtpServer)
                ) && 
                (
                    this.SslRequired == input.SslRequired ||
                    (this.SslRequired != null &&
                    this.SslRequired.Equals(input.SslRequired))
                ) && 
                (
                    this.SsoSessionIdleTimeout == input.SsoSessionIdleTimeout ||
                    this.SsoSessionIdleTimeout.Equals(input.SsoSessionIdleTimeout)
                ) && 
                (
                    this.SsoSessionIdleTimeoutRememberMe == input.SsoSessionIdleTimeoutRememberMe ||
                    this.SsoSessionIdleTimeoutRememberMe.Equals(input.SsoSessionIdleTimeoutRememberMe)
                ) && 
                (
                    this.SsoSessionMaxLifespan == input.SsoSessionMaxLifespan ||
                    this.SsoSessionMaxLifespan.Equals(input.SsoSessionMaxLifespan)
                ) && 
                (
                    this.SsoSessionMaxLifespanRememberMe == input.SsoSessionMaxLifespanRememberMe ||
                    this.SsoSessionMaxLifespanRememberMe.Equals(input.SsoSessionMaxLifespanRememberMe)
                ) && 
                (
                    this.SupportedLocales == input.SupportedLocales ||
                    this.SupportedLocales != null &&
                    input.SupportedLocales != null &&
                    this.SupportedLocales.SequenceEqual(input.SupportedLocales)
                ) && 
                (
                    this.UserFederationMappers == input.UserFederationMappers ||
                    this.UserFederationMappers != null &&
                    input.UserFederationMappers != null &&
                    this.UserFederationMappers.SequenceEqual(input.UserFederationMappers)
                ) && 
                (
                    this.UserFederationProviders == input.UserFederationProviders ||
                    this.UserFederationProviders != null &&
                    input.UserFederationProviders != null &&
                    this.UserFederationProviders.SequenceEqual(input.UserFederationProviders)
                ) && 
                (
                    this.UserManagedAccessAllowed == input.UserManagedAccessAllowed ||
                    this.UserManagedAccessAllowed.Equals(input.UserManagedAccessAllowed)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.VerifyEmail == input.VerifyEmail ||
                    this.VerifyEmail.Equals(input.VerifyEmail)
                ) && 
                (
                    this.WaitIncrementSeconds == input.WaitIncrementSeconds ||
                    this.WaitIncrementSeconds.Equals(input.WaitIncrementSeconds)
                ) && 
                (
                    this.WebAuthnPolicyAcceptableAaguids == input.WebAuthnPolicyAcceptableAaguids ||
                    this.WebAuthnPolicyAcceptableAaguids != null &&
                    input.WebAuthnPolicyAcceptableAaguids != null &&
                    this.WebAuthnPolicyAcceptableAaguids.SequenceEqual(input.WebAuthnPolicyAcceptableAaguids)
                ) && 
                (
                    this.WebAuthnPolicyAttestationConveyancePreference == input.WebAuthnPolicyAttestationConveyancePreference ||
                    (this.WebAuthnPolicyAttestationConveyancePreference != null &&
                    this.WebAuthnPolicyAttestationConveyancePreference.Equals(input.WebAuthnPolicyAttestationConveyancePreference))
                ) && 
                (
                    this.WebAuthnPolicyAuthenticatorAttachment == input.WebAuthnPolicyAuthenticatorAttachment ||
                    (this.WebAuthnPolicyAuthenticatorAttachment != null &&
                    this.WebAuthnPolicyAuthenticatorAttachment.Equals(input.WebAuthnPolicyAuthenticatorAttachment))
                ) && 
                (
                    this.WebAuthnPolicyAvoidSameAuthenticatorRegister == input.WebAuthnPolicyAvoidSameAuthenticatorRegister ||
                    this.WebAuthnPolicyAvoidSameAuthenticatorRegister.Equals(input.WebAuthnPolicyAvoidSameAuthenticatorRegister)
                ) && 
                (
                    this.WebAuthnPolicyCreateTimeout == input.WebAuthnPolicyCreateTimeout ||
                    this.WebAuthnPolicyCreateTimeout.Equals(input.WebAuthnPolicyCreateTimeout)
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessAcceptableAaguids == input.WebAuthnPolicyPasswordlessAcceptableAaguids ||
                    this.WebAuthnPolicyPasswordlessAcceptableAaguids != null &&
                    input.WebAuthnPolicyPasswordlessAcceptableAaguids != null &&
                    this.WebAuthnPolicyPasswordlessAcceptableAaguids.SequenceEqual(input.WebAuthnPolicyPasswordlessAcceptableAaguids)
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessAttestationConveyancePreference == input.WebAuthnPolicyPasswordlessAttestationConveyancePreference ||
                    (this.WebAuthnPolicyPasswordlessAttestationConveyancePreference != null &&
                    this.WebAuthnPolicyPasswordlessAttestationConveyancePreference.Equals(input.WebAuthnPolicyPasswordlessAttestationConveyancePreference))
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessAuthenticatorAttachment == input.WebAuthnPolicyPasswordlessAuthenticatorAttachment ||
                    (this.WebAuthnPolicyPasswordlessAuthenticatorAttachment != null &&
                    this.WebAuthnPolicyPasswordlessAuthenticatorAttachment.Equals(input.WebAuthnPolicyPasswordlessAuthenticatorAttachment))
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister == input.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister ||
                    this.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister.Equals(input.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister)
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessCreateTimeout == input.WebAuthnPolicyPasswordlessCreateTimeout ||
                    this.WebAuthnPolicyPasswordlessCreateTimeout.Equals(input.WebAuthnPolicyPasswordlessCreateTimeout)
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessRequireResidentKey == input.WebAuthnPolicyPasswordlessRequireResidentKey ||
                    (this.WebAuthnPolicyPasswordlessRequireResidentKey != null &&
                    this.WebAuthnPolicyPasswordlessRequireResidentKey.Equals(input.WebAuthnPolicyPasswordlessRequireResidentKey))
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessRpEntityName == input.WebAuthnPolicyPasswordlessRpEntityName ||
                    (this.WebAuthnPolicyPasswordlessRpEntityName != null &&
                    this.WebAuthnPolicyPasswordlessRpEntityName.Equals(input.WebAuthnPolicyPasswordlessRpEntityName))
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessRpId == input.WebAuthnPolicyPasswordlessRpId ||
                    (this.WebAuthnPolicyPasswordlessRpId != null &&
                    this.WebAuthnPolicyPasswordlessRpId.Equals(input.WebAuthnPolicyPasswordlessRpId))
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessSignatureAlgorithms == input.WebAuthnPolicyPasswordlessSignatureAlgorithms ||
                    this.WebAuthnPolicyPasswordlessSignatureAlgorithms != null &&
                    input.WebAuthnPolicyPasswordlessSignatureAlgorithms != null &&
                    this.WebAuthnPolicyPasswordlessSignatureAlgorithms.SequenceEqual(input.WebAuthnPolicyPasswordlessSignatureAlgorithms)
                ) && 
                (
                    this.WebAuthnPolicyPasswordlessUserVerificationRequirement == input.WebAuthnPolicyPasswordlessUserVerificationRequirement ||
                    (this.WebAuthnPolicyPasswordlessUserVerificationRequirement != null &&
                    this.WebAuthnPolicyPasswordlessUserVerificationRequirement.Equals(input.WebAuthnPolicyPasswordlessUserVerificationRequirement))
                ) && 
                (
                    this.WebAuthnPolicyRequireResidentKey == input.WebAuthnPolicyRequireResidentKey ||
                    (this.WebAuthnPolicyRequireResidentKey != null &&
                    this.WebAuthnPolicyRequireResidentKey.Equals(input.WebAuthnPolicyRequireResidentKey))
                ) && 
                (
                    this.WebAuthnPolicyRpEntityName == input.WebAuthnPolicyRpEntityName ||
                    (this.WebAuthnPolicyRpEntityName != null &&
                    this.WebAuthnPolicyRpEntityName.Equals(input.WebAuthnPolicyRpEntityName))
                ) && 
                (
                    this.WebAuthnPolicyRpId == input.WebAuthnPolicyRpId ||
                    (this.WebAuthnPolicyRpId != null &&
                    this.WebAuthnPolicyRpId.Equals(input.WebAuthnPolicyRpId))
                ) && 
                (
                    this.WebAuthnPolicySignatureAlgorithms == input.WebAuthnPolicySignatureAlgorithms ||
                    this.WebAuthnPolicySignatureAlgorithms != null &&
                    input.WebAuthnPolicySignatureAlgorithms != null &&
                    this.WebAuthnPolicySignatureAlgorithms.SequenceEqual(input.WebAuthnPolicySignatureAlgorithms)
                ) && 
                (
                    this.WebAuthnPolicyUserVerificationRequirement == input.WebAuthnPolicyUserVerificationRequirement ||
                    (this.WebAuthnPolicyUserVerificationRequirement != null &&
                    this.WebAuthnPolicyUserVerificationRequirement.Equals(input.WebAuthnPolicyUserVerificationRequirement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccessCodeLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessCodeLifespanLogin.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessCodeLifespanUserAction.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessTokenLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessTokenLifespanForImplicitFlow.GetHashCode();
                if (this.AccountTheme != null)
                {
                    hashCode = (hashCode * 59) + this.AccountTheme.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActionTokenGeneratedByAdminLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.ActionTokenGeneratedByUserLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.AdminEventsDetailsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AdminEventsEnabled.GetHashCode();
                if (this.AdminTheme != null)
                {
                    hashCode = (hashCode * 59) + this.AdminTheme.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.AuthenticationFlows != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationFlows.GetHashCode();
                }
                if (this.AuthenticatorConfig != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticatorConfig.GetHashCode();
                }
                if (this.BrowserFlow != null)
                {
                    hashCode = (hashCode * 59) + this.BrowserFlow.GetHashCode();
                }
                if (this.BrowserSecurityHeaders != null)
                {
                    hashCode = (hashCode * 59) + this.BrowserSecurityHeaders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BruteForceProtected.GetHashCode();
                if (this.ClientAuthenticationFlow != null)
                {
                    hashCode = (hashCode * 59) + this.ClientAuthenticationFlow.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientOfflineSessionIdleTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientOfflineSessionMaxLifespan.GetHashCode();
                if (this.ClientPolicies != null)
                {
                    hashCode = (hashCode * 59) + this.ClientPolicies.GetHashCode();
                }
                if (this.ClientProfiles != null)
                {
                    hashCode = (hashCode * 59) + this.ClientProfiles.GetHashCode();
                }
                if (this.ClientScopeMappings != null)
                {
                    hashCode = (hashCode * 59) + this.ClientScopeMappings.GetHashCode();
                }
                if (this.ClientScopes != null)
                {
                    hashCode = (hashCode * 59) + this.ClientScopes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientSessionIdleTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientSessionMaxLifespan.GetHashCode();
                if (this.Clients != null)
                {
                    hashCode = (hashCode * 59) + this.Clients.GetHashCode();
                }
                if (this.Components != null)
                {
                    hashCode = (hashCode * 59) + this.Components.GetHashCode();
                }
                if (this.DefaultDefaultClientScopes != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultDefaultClientScopes.GetHashCode();
                }
                if (this.DefaultGroups != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultGroups.GetHashCode();
                }
                if (this.DefaultLocale != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultLocale.GetHashCode();
                }
                if (this.DefaultOptionalClientScopes != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultOptionalClientScopes.GetHashCode();
                }
                if (this.DefaultRole != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultRole.GetHashCode();
                }
                if (this.DefaultSignatureAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultSignatureAlgorithm.GetHashCode();
                }
                if (this.DirectGrantFlow != null)
                {
                    hashCode = (hashCode * 59) + this.DirectGrantFlow.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.DisplayNameHtml != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayNameHtml.GetHashCode();
                }
                if (this.DockerAuthenticationFlow != null)
                {
                    hashCode = (hashCode * 59) + this.DockerAuthenticationFlow.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DuplicateEmailsAllowed.GetHashCode();
                hashCode = (hashCode * 59) + this.EditUsernameAllowed.GetHashCode();
                if (this.EmailTheme != null)
                {
                    hashCode = (hashCode * 59) + this.EmailTheme.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.EnabledEventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EnabledEventTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.EventsExpiration.GetHashCode();
                if (this.EventsListeners != null)
                {
                    hashCode = (hashCode * 59) + this.EventsListeners.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailureFactor.GetHashCode();
                if (this.FederatedUsers != null)
                {
                    hashCode = (hashCode * 59) + this.FederatedUsers.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.IdentityProviderMappers != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityProviderMappers.GetHashCode();
                }
                if (this.IdentityProviders != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityProviders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InternationalizationEnabled.GetHashCode();
                if (this.KeycloakVersion != null)
                {
                    hashCode = (hashCode * 59) + this.KeycloakVersion.GetHashCode();
                }
                if (this.LoginTheme != null)
                {
                    hashCode = (hashCode * 59) + this.LoginTheme.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LoginWithEmailAllowed.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxDeltaTimeSeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxFailureWaitSeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumQuickLoginWaitSeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.NotBefore.GetHashCode();
                hashCode = (hashCode * 59) + this.OAuth2DeviceCodeLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.OAuth2DevicePollingInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.Oauth2DeviceCodeLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.Oauth2DevicePollingInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.OfflineSessionIdleTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.OfflineSessionMaxLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.OfflineSessionMaxLifespanEnabled.GetHashCode();
                if (this.OtpPolicyAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.OtpPolicyAlgorithm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OtpPolicyDigits.GetHashCode();
                hashCode = (hashCode * 59) + this.OtpPolicyInitialCounter.GetHashCode();
                hashCode = (hashCode * 59) + this.OtpPolicyLookAheadWindow.GetHashCode();
                hashCode = (hashCode * 59) + this.OtpPolicyPeriod.GetHashCode();
                if (this.OtpPolicyType != null)
                {
                    hashCode = (hashCode * 59) + this.OtpPolicyType.GetHashCode();
                }
                if (this.OtpSupportedApplications != null)
                {
                    hashCode = (hashCode * 59) + this.OtpSupportedApplications.GetHashCode();
                }
                if (this.PasswordPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordPolicy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PermanentLockout.GetHashCode();
                if (this.ProtocolMappers != null)
                {
                    hashCode = (hashCode * 59) + this.ProtocolMappers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuickLoginCheckMilliSeconds.GetHashCode();
                if (this.Realm != null)
                {
                    hashCode = (hashCode * 59) + this.Realm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RefreshTokenMaxReuse.GetHashCode();
                hashCode = (hashCode * 59) + this.RegistrationAllowed.GetHashCode();
                hashCode = (hashCode * 59) + this.RegistrationEmailAsUsername.GetHashCode();
                if (this.RegistrationFlow != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationFlow.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RememberMe.GetHashCode();
                if (this.RequiredActions != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredActions.GetHashCode();
                }
                if (this.ResetCredentialsFlow != null)
                {
                    hashCode = (hashCode * 59) + this.ResetCredentialsFlow.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResetPasswordAllowed.GetHashCode();
                hashCode = (hashCode * 59) + this.RevokeRefreshToken.GetHashCode();
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                if (this.ScopeMappings != null)
                {
                    hashCode = (hashCode * 59) + this.ScopeMappings.GetHashCode();
                }
                if (this.SmtpServer != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpServer.GetHashCode();
                }
                if (this.SslRequired != null)
                {
                    hashCode = (hashCode * 59) + this.SslRequired.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SsoSessionIdleTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoSessionIdleTimeoutRememberMe.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoSessionMaxLifespan.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoSessionMaxLifespanRememberMe.GetHashCode();
                if (this.SupportedLocales != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedLocales.GetHashCode();
                }
                if (this.UserFederationMappers != null)
                {
                    hashCode = (hashCode * 59) + this.UserFederationMappers.GetHashCode();
                }
                if (this.UserFederationProviders != null)
                {
                    hashCode = (hashCode * 59) + this.UserFederationProviders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserManagedAccessAllowed.GetHashCode();
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VerifyEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitIncrementSeconds.GetHashCode();
                if (this.WebAuthnPolicyAcceptableAaguids != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyAcceptableAaguids.GetHashCode();
                }
                if (this.WebAuthnPolicyAttestationConveyancePreference != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyAttestationConveyancePreference.GetHashCode();
                }
                if (this.WebAuthnPolicyAuthenticatorAttachment != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyAuthenticatorAttachment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WebAuthnPolicyAvoidSameAuthenticatorRegister.GetHashCode();
                hashCode = (hashCode * 59) + this.WebAuthnPolicyCreateTimeout.GetHashCode();
                if (this.WebAuthnPolicyPasswordlessAcceptableAaguids != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessAcceptableAaguids.GetHashCode();
                }
                if (this.WebAuthnPolicyPasswordlessAttestationConveyancePreference != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessAttestationConveyancePreference.GetHashCode();
                }
                if (this.WebAuthnPolicyPasswordlessAuthenticatorAttachment != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessAuthenticatorAttachment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister.GetHashCode();
                hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessCreateTimeout.GetHashCode();
                if (this.WebAuthnPolicyPasswordlessRequireResidentKey != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessRequireResidentKey.GetHashCode();
                }
                if (this.WebAuthnPolicyPasswordlessRpEntityName != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessRpEntityName.GetHashCode();
                }
                if (this.WebAuthnPolicyPasswordlessRpId != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessRpId.GetHashCode();
                }
                if (this.WebAuthnPolicyPasswordlessSignatureAlgorithms != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessSignatureAlgorithms.GetHashCode();
                }
                if (this.WebAuthnPolicyPasswordlessUserVerificationRequirement != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyPasswordlessUserVerificationRequirement.GetHashCode();
                }
                if (this.WebAuthnPolicyRequireResidentKey != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyRequireResidentKey.GetHashCode();
                }
                if (this.WebAuthnPolicyRpEntityName != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyRpEntityName.GetHashCode();
                }
                if (this.WebAuthnPolicyRpId != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyRpId.GetHashCode();
                }
                if (this.WebAuthnPolicySignatureAlgorithms != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicySignatureAlgorithms.GetHashCode();
                }
                if (this.WebAuthnPolicyUserVerificationRequirement != null)
                {
                    hashCode = (hashCode * 59) + this.WebAuthnPolicyUserVerificationRequirement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
