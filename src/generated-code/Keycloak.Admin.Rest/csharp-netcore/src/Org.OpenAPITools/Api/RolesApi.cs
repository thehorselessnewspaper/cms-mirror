/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdRolesGet(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string));

        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesGetWithHttpInfo(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string));
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdRolesPost(string realm, string id, RoleRepresentation roleRepresentation);

        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdRolesPostWithHttpInfo(string realm, string id, RoleRepresentation roleRepresentation);
        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet(string realm, string id, string roleName, string clientUuid);

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(string realm, string id, string roleName, string clientUuid);
        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns></returns>
        void RealmClientsIdRolesRoleNameCompositesDelete(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdRolesRoleNameCompositesDeleteWithHttpInfo(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameCompositesGet(string realm, string id, string roleName);

        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesGetWithHttpInfo(string realm, string id, string roleName);
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdRolesRoleNameCompositesPost(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdRolesRoleNameCompositesPostWithHttpInfo(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameCompositesRealmGet(string realm, string id, string roleName);

        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfo(string realm, string id, string roleName);
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns></returns>
        void RealmClientsIdRolesRoleNameDelete(string realm, string id, string roleName);

        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdRolesRoleNameDeleteWithHttpInfo(string realm, string id, string roleName);
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>RoleRepresentation</returns>
        RoleRepresentation RealmClientsIdRolesRoleNameGet(string realm, string id, string roleName);

        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of RoleRepresentation</returns>
        ApiResponse<RoleRepresentation> RealmClientsIdRolesRoleNameGetWithHttpInfo(string realm, string id, string roleName);
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameGroupsGet(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?));

        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameGroupsGetWithHttpInfo(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?));
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <returns>ManagementPermissionReference</returns>
        ManagementPermissionReference RealmClientsIdRolesRoleNameManagementPermissionsGet(string realm, string id, string roleName);

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        ApiResponse<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfo(string realm, string id, string roleName);
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ManagementPermissionReference</returns>
        ManagementPermissionReference RealmClientsIdRolesRoleNameManagementPermissionsPut(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference);

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        ApiResponse<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfo(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference);
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdRolesRoleNamePut(string realm, string id, string roleName, RoleRepresentation roleRepresentation);

        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdRolesRoleNamePutWithHttpInfo(string realm, string id, string roleName, RoleRepresentation roleRepresentation);
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameUsersGet(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?));

        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameUsersGetWithHttpInfo(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?));
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmRolesGet(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string));

        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmRolesGetWithHttpInfo(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string));
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmRolesPost(string realm, RoleRepresentation roleRepresentation);

        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmRolesPostWithHttpInfo(string realm, RoleRepresentation roleRepresentation);
        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmRolesRoleNameCompositesClientsClientUuidGet(string realm, string roleName, string clientUuid);

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(string realm, string roleName, string clientUuid);
        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns></returns>
        void RealmRolesRoleNameCompositesDelete(string realm, string roleName, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmRolesRoleNameCompositesDeleteWithHttpInfo(string realm, string roleName, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmRolesRoleNameCompositesGet(string realm, string roleName);

        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesGetWithHttpInfo(string realm, string roleName);
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmRolesRoleNameCompositesPost(string realm, string roleName, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmRolesRoleNameCompositesPostWithHttpInfo(string realm, string roleName, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmRolesRoleNameCompositesRealmGet(string realm, string roleName);

        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesRealmGetWithHttpInfo(string realm, string roleName);
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns></returns>
        void RealmRolesRoleNameDelete(string realm, string roleName);

        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmRolesRoleNameDeleteWithHttpInfo(string realm, string roleName);
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>RoleRepresentation</returns>
        RoleRepresentation RealmRolesRoleNameGet(string realm, string roleName);

        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of RoleRepresentation</returns>
        ApiResponse<RoleRepresentation> RealmRolesRoleNameGetWithHttpInfo(string realm, string roleName);
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmRolesRoleNameGroupsGet(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?));

        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameGroupsGetWithHttpInfo(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?));
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <returns>ManagementPermissionReference</returns>
        ManagementPermissionReference RealmRolesRoleNameManagementPermissionsGet(string realm, string roleName);

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        ApiResponse<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsGetWithHttpInfo(string realm, string roleName);
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ManagementPermissionReference</returns>
        ManagementPermissionReference RealmRolesRoleNameManagementPermissionsPut(string realm, string roleName, ManagementPermissionReference managementPermissionReference);

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        ApiResponse<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsPutWithHttpInfo(string realm, string roleName, ManagementPermissionReference managementPermissionReference);
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmRolesRoleNamePut(string realm, string roleName, RoleRepresentation roleRepresentation);

        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmRolesRoleNamePutWithHttpInfo(string realm, string roleName, RoleRepresentation roleRepresentation);
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmRolesRoleNameUsersGet(string realm, string roleName, int? first = default(int?), int? max = default(int?));

        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameUsersGetWithHttpInfo(string realm, string roleName, int? first = default(int?), int? max = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesGetAsync(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesGetWithHttpInfoAsync(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdRolesPostAsync(string realm, string id, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdRolesPostWithHttpInfoAsync(string realm, string id, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetAsync(string realm, string id, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetWithHttpInfoAsync(string realm, string id, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdRolesRoleNameCompositesDeleteAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdRolesRoleNameCompositesDeleteWithHttpInfoAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameCompositesGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdRolesRoleNameCompositesPostAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdRolesRoleNameCompositesPostWithHttpInfoAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesRealmGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdRolesRoleNameDeleteAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdRolesRoleNameDeleteWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleRepresentation</returns>
        System.Threading.Tasks.Task<RoleRepresentation> RealmClientsIdRolesRoleNameGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleRepresentation>> RealmClientsIdRolesRoleNameGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameGroupsGetAsync(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameGroupsGetWithHttpInfoAsync(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        System.Threading.Tasks.Task<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementPermissionReference>> RealmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        System.Threading.Tasks.Task<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsPutAsync(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementPermissionReference>> RealmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfoAsync(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdRolesRoleNamePutAsync(string realm, string id, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdRolesRoleNamePutWithHttpInfoAsync(string realm, string id, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameUsersGetAsync(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameUsersGetWithHttpInfoAsync(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesGetAsync(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmRolesGetWithHttpInfoAsync(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmRolesPostAsync(string realm, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmRolesPostWithHttpInfoAsync(string realm, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesClientsClientUuidGetAsync(string realm, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfoAsync(string realm, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmRolesRoleNameCompositesDeleteAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove roles from the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmRolesRoleNameCompositesDeleteWithHttpInfoAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameCompositesGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmRolesRoleNameCompositesPostAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmRolesRoleNameCompositesPostWithHttpInfoAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesRealmGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm-level roles of the role’s composite
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameCompositesRealmGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmRolesRoleNameDeleteAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmRolesRoleNameDeleteWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleRepresentation</returns>
        System.Threading.Tasks.Task<RoleRepresentation> RealmRolesRoleNameGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleRepresentation>> RealmRolesRoleNameGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameGroupsGetAsync(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameGroupsGetWithHttpInfoAsync(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        System.Threading.Tasks.Task<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementPermissionReference>> RealmRolesRoleNameManagementPermissionsGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        System.Threading.Tasks.Task<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsPutAsync(string realm, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementPermissionReference>> RealmRolesRoleNameManagementPermissionsPutWithHttpInfoAsync(string realm, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmRolesRoleNamePutAsync(string realm, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmRolesRoleNamePutWithHttpInfoAsync(string realm, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameUsersGetAsync(string realm, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameUsersGetWithHttpInfoAsync(string realm, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdRolesGet(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdRolesGetWithHttpInfo(realm, id, briefRepresentation, first, max, search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesGetWithHttpInfo(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesGetAsync(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdRolesGetWithHttpInfoAsync(realm, id, briefRepresentation, first, max, search, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesGetWithHttpInfoAsync(string realm, string id, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdRolesPost(string realm, string id, RoleRepresentation roleRepresentation)
        {
            RealmClientsIdRolesPostWithHttpInfo(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmClientsIdRolesPostWithHttpInfo(string realm, string id, RoleRepresentation roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clients/{id}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdRolesPostAsync(string realm, string id, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdRolesPostWithHttpInfoAsync(realm, id, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmClientsIdRolesPostWithHttpInfoAsync(string realm, string id, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clients/{id}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet(string realm, string id, string roleName, string clientUuid)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(realm, id, roleName, clientUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(string realm, string id, string roleName, string clientUuid)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'clientUuid' is set
            if (clientUuid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientUuid' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientUuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientUuid)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetAsync(string realm, string id, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetWithHttpInfoAsync(realm, id, roleName, clientUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameCompositesClientsClientUuidGetWithHttpInfoAsync(string realm, string id, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'clientUuid' is set
            if (clientUuid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientUuid' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientUuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientUuid)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesClientsClientUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns></returns>
        public void RealmClientsIdRolesRoleNameCompositesDelete(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientsIdRolesRoleNameCompositesDeleteWithHttpInfo(realm, id, roleName, roleRepresentation);
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmClientsIdRolesRoleNameCompositesDeleteWithHttpInfo(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/clients/{id}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdRolesRoleNameCompositesDeleteAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdRolesRoleNameCompositesDeleteWithHttpInfoAsync(realm, id, roleName, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmClientsIdRolesRoleNameCompositesDeleteWithHttpInfoAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/clients/{id}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameCompositesGet(string realm, string id, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdRolesRoleNameCompositesGetWithHttpInfo(realm, id, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesGetWithHttpInfo(string realm, string id, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdRolesRoleNameCompositesGetWithHttpInfoAsync(realm, id, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameCompositesGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdRolesRoleNameCompositesPost(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientsIdRolesRoleNameCompositesPostWithHttpInfo(realm, id, roleName, roleRepresentation);
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmClientsIdRolesRoleNameCompositesPostWithHttpInfo(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clients/{id}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdRolesRoleNameCompositesPostAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdRolesRoleNameCompositesPostWithHttpInfoAsync(realm, id, roleName, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmClientsIdRolesRoleNameCompositesPostWithHttpInfoAsync(string realm, string id, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clients/{id}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameCompositesRealmGet(string realm, string id, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfo(realm, id, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfo(string realm, string id, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesRealmGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesRealmGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesRealmGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/composites/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameCompositesRealmGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfoAsync(realm, id, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameCompositesRealmGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesRealmGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesRealmGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameCompositesRealmGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/composites/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameCompositesRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns></returns>
        public void RealmClientsIdRolesRoleNameDelete(string realm, string id, string roleName)
        {
            RealmClientsIdRolesRoleNameDeleteWithHttpInfo(realm, id, roleName);
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmClientsIdRolesRoleNameDeleteWithHttpInfo(string realm, string id, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/clients/{id}/roles/{role-name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdRolesRoleNameDeleteAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdRolesRoleNameDeleteWithHttpInfoAsync(realm, id, roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmClientsIdRolesRoleNameDeleteWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/clients/{id}/roles/{role-name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>RoleRepresentation</returns>
        public RoleRepresentation RealmClientsIdRolesRoleNameGet(string realm, string id, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<RoleRepresentation> localVarResponse = RealmClientsIdRolesRoleNameGetWithHttpInfo(realm, id, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of RoleRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<RoleRepresentation> RealmClientsIdRolesRoleNameGetWithHttpInfo(string realm, string id, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoleRepresentation>("/{realm}/clients/{id}/roles/{role-name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleRepresentation</returns>
        public async System.Threading.Tasks.Task<RoleRepresentation> RealmClientsIdRolesRoleNameGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RoleRepresentation> localVarResponse = await RealmClientsIdRolesRoleNameGetWithHttpInfoAsync(realm, id, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RoleRepresentation>> RealmClientsIdRolesRoleNameGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleRepresentation>("/{realm}/clients/{id}/roles/{role-name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameGroupsGet(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdRolesRoleNameGroupsGetWithHttpInfo(realm, id, roleName, briefRepresentation, first, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameGroupsGetWithHttpInfo(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameGroupsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameGroupsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameGroupsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameGroupsGetAsync(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdRolesRoleNameGroupsGetWithHttpInfoAsync(realm, id, roleName, briefRepresentation, first, max, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameGroupsGetWithHttpInfoAsync(string realm, string id, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameGroupsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameGroupsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameGroupsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <returns>ManagementPermissionReference</returns>
        public ManagementPermissionReference RealmClientsIdRolesRoleNameManagementPermissionsGet(string realm, string id, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = RealmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfo(realm, id, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfo(string realm, string id, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementPermissionReference>("/{realm}/clients/{id}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameManagementPermissionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        public async System.Threading.Tasks.Task<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsGetAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = await RealmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfoAsync(realm, id, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference>> RealmClientsIdRolesRoleNameManagementPermissionsGetWithHttpInfoAsync(string realm, string id, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementPermissionReference>("/{realm}/clients/{id}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameManagementPermissionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ManagementPermissionReference</returns>
        public ManagementPermissionReference RealmClientsIdRolesRoleNameManagementPermissionsPut(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference)
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = RealmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfo(realm, id, roleName, managementPermissionReference);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfo(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'managementPermissionReference' is set
            if (managementPermissionReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'managementPermissionReference' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = managementPermissionReference;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementPermissionReference>("/{realm}/clients/{id}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameManagementPermissionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        public async System.Threading.Tasks.Task<ManagementPermissionReference> RealmClientsIdRolesRoleNameManagementPermissionsPutAsync(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = await RealmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfoAsync(realm, id, roleName, managementPermissionReference, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference>> RealmClientsIdRolesRoleNameManagementPermissionsPutWithHttpInfoAsync(string realm, string id, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'managementPermissionReference' is set
            if (managementPermissionReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'managementPermissionReference' when calling RolesApi->RealmClientsIdRolesRoleNameManagementPermissionsPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = managementPermissionReference;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementPermissionReference>("/{realm}/clients/{id}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameManagementPermissionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdRolesRoleNamePut(string realm, string id, string roleName, RoleRepresentation roleRepresentation)
        {
            RealmClientsIdRolesRoleNamePutWithHttpInfo(realm, id, roleName, roleRepresentation);
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmClientsIdRolesRoleNamePutWithHttpInfo(string realm, string id, string roleName, RoleRepresentation roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/clients/{id}/roles/{role-name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdRolesRoleNamePutAsync(string realm, string id, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdRolesRoleNamePutWithHttpInfoAsync(realm, id, roleName, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmClientsIdRolesRoleNamePutWithHttpInfoAsync(string realm, string id, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmClientsIdRolesRoleNamePut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/clients/{id}/roles/{role-name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdRolesRoleNameUsersGet(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdRolesRoleNameUsersGetWithHttpInfo(realm, id, roleName, first, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameUsersGetWithHttpInfo(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameUsersGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameUsersGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameUsersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameUsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdRolesRoleNameUsersGetAsync(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdRolesRoleNameUsersGetWithHttpInfoAsync(realm, id, roleName, first, max, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdRolesRoleNameUsersGetWithHttpInfoAsync(string realm, string id, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmClientsIdRolesRoleNameUsersGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling RolesApi->RealmClientsIdRolesRoleNameUsersGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmClientsIdRolesRoleNameUsersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/roles/{role-name}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdRolesRoleNameUsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmRolesGet(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmRolesGetWithHttpInfo(realm, briefRepresentation, first, max, search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmRolesGetWithHttpInfo(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesGetAsync(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmRolesGetWithHttpInfoAsync(realm, briefRepresentation, first, max, search, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmRolesGetWithHttpInfoAsync(string realm, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), string search = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmRolesPost(string realm, RoleRepresentation roleRepresentation)
        {
            RealmRolesPostWithHttpInfo(realm, roleRepresentation);
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmRolesPostWithHttpInfo(string realm, RoleRepresentation roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmRolesPostAsync(string realm, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmRolesPostWithHttpInfoAsync(realm, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new role for the realm or client 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmRolesPostWithHttpInfoAsync(string realm, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmRolesRoleNameCompositesClientsClientUuidGet(string realm, string roleName, string clientUuid)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(realm, roleName, clientUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(string realm, string roleName, string clientUuid)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'clientUuid' is set
            if (clientUuid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientUuid' when calling RolesApi->RealmRolesRoleNameCompositesClientsClientUuidGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientUuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientUuid)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/composites/clients/{clientUuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesClientsClientUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesClientsClientUuidGetAsync(string realm, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfoAsync(realm, roleName, clientUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level roles for the client that are in the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="clientUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfoAsync(string realm, string roleName, string clientUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesClientsClientUuidGet");
            }

            // verify the required parameter 'clientUuid' is set
            if (clientUuid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientUuid' when calling RolesApi->RealmRolesRoleNameCompositesClientsClientUuidGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientUuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientUuid)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/composites/clients/{clientUuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesClientsClientUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns></returns>
        public void RealmRolesRoleNameCompositesDelete(string realm, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            RealmRolesRoleNameCompositesDeleteWithHttpInfo(realm, roleName, roleRepresentation);
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmRolesRoleNameCompositesDeleteWithHttpInfo(string realm, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesRoleNameCompositesDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmRolesRoleNameCompositesDeleteAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmRolesRoleNameCompositesDeleteWithHttpInfoAsync(realm, roleName, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove roles from the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation">roles to remove</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmRolesRoleNameCompositesDeleteWithHttpInfoAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesRoleNameCompositesDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmRolesRoleNameCompositesGet(string realm, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmRolesRoleNameCompositesGetWithHttpInfo(realm, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesGetWithHttpInfo(string realm, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmRolesRoleNameCompositesGetWithHttpInfoAsync(realm, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get composites of the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameCompositesGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmRolesRoleNameCompositesPost(string realm, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            RealmRolesRoleNameCompositesPostWithHttpInfo(realm, roleName, roleRepresentation);
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmRolesRoleNameCompositesPostWithHttpInfo(string realm, string roleName, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesRoleNameCompositesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmRolesRoleNameCompositesPostAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmRolesRoleNameCompositesPostWithHttpInfoAsync(realm, roleName, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a composite to the role 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmRolesRoleNameCompositesPostWithHttpInfoAsync(string realm, string roleName, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesRoleNameCompositesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/roles/{role-name}/composites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmRolesRoleNameCompositesRealmGet(string realm, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmRolesRoleNameCompositesRealmGetWithHttpInfo(realm, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesRealmGetWithHttpInfo(string realm, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesRealmGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesRealmGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/composites/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameCompositesRealmGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmRolesRoleNameCompositesRealmGetWithHttpInfoAsync(realm, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles of the role’s composite 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameCompositesRealmGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameCompositesRealmGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameCompositesRealmGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/composites/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameCompositesRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns></returns>
        public void RealmRolesRoleNameDelete(string realm, string roleName)
        {
            RealmRolesRoleNameDeleteWithHttpInfo(realm, roleName);
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmRolesRoleNameDeleteWithHttpInfo(string realm, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/roles/{role-name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmRolesRoleNameDeleteAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmRolesRoleNameDeleteWithHttpInfoAsync(realm, roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmRolesRoleNameDeleteWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/roles/{role-name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>RoleRepresentation</returns>
        public RoleRepresentation RealmRolesRoleNameGet(string realm, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<RoleRepresentation> localVarResponse = RealmRolesRoleNameGetWithHttpInfo(realm, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <returns>ApiResponse of RoleRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<RoleRepresentation> RealmRolesRoleNameGetWithHttpInfo(string realm, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoleRepresentation>("/{realm}/roles/{role-name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleRepresentation</returns>
        public async System.Threading.Tasks.Task<RoleRepresentation> RealmRolesRoleNameGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RoleRepresentation> localVarResponse = await RealmRolesRoleNameGetWithHttpInfoAsync(realm, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RoleRepresentation>> RealmRolesRoleNameGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleRepresentation>("/{realm}/roles/{role-name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmRolesRoleNameGroupsGet(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmRolesRoleNameGroupsGetWithHttpInfo(realm, roleName, briefRepresentation, first, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameGroupsGetWithHttpInfo(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameGroupsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameGroupsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameGroupsGetAsync(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmRolesRoleNameGroupsGetWithHttpInfoAsync(realm, roleName, briefRepresentation, first, max, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of groups that have the specified role name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects. (optional)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameGroupsGetWithHttpInfoAsync(string realm, string roleName, bool? briefRepresentation = default(bool?), int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameGroupsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameGroupsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <returns>ManagementPermissionReference</returns>
        public ManagementPermissionReference RealmRolesRoleNameManagementPermissionsGet(string realm, string roleName)
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = RealmRolesRoleNameManagementPermissionsGetWithHttpInfo(realm, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsGetWithHttpInfo(string realm, string roleName)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameManagementPermissionsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameManagementPermissionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementPermissionReference>("/{realm}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameManagementPermissionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        public async System.Threading.Tasks.Task<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsGetAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = await RealmRolesRoleNameManagementPermissionsGetWithHttpInfoAsync(realm, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference>> RealmRolesRoleNameManagementPermissionsGetWithHttpInfoAsync(string realm, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameManagementPermissionsGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameManagementPermissionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementPermissionReference>("/{realm}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameManagementPermissionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ManagementPermissionReference</returns>
        public ManagementPermissionReference RealmRolesRoleNameManagementPermissionsPut(string realm, string roleName, ManagementPermissionReference managementPermissionReference)
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = RealmRolesRoleNameManagementPermissionsPutWithHttpInfo(realm, roleName, managementPermissionReference);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsPutWithHttpInfo(string realm, string roleName, ManagementPermissionReference managementPermissionReference)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'managementPermissionReference' is set
            if (managementPermissionReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'managementPermissionReference' when calling RolesApi->RealmRolesRoleNameManagementPermissionsPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = managementPermissionReference;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementPermissionReference>("/{realm}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameManagementPermissionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        public async System.Threading.Tasks.Task<ManagementPermissionReference> RealmRolesRoleNameManagementPermissionsPutAsync(string realm, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference> localVarResponse = await RealmRolesRoleNameManagementPermissionsPutWithHttpInfoAsync(realm, roleName, managementPermissionReference, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName"></param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManagementPermissionReference>> RealmRolesRoleNameManagementPermissionsPutWithHttpInfoAsync(string realm, string roleName, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameManagementPermissionsPut");
            }

            // verify the required parameter 'managementPermissionReference' is set
            if (managementPermissionReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'managementPermissionReference' when calling RolesApi->RealmRolesRoleNameManagementPermissionsPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = managementPermissionReference;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementPermissionReference>("/{realm}/roles/{role-name}/management/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameManagementPermissionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmRolesRoleNamePut(string realm, string roleName, RoleRepresentation roleRepresentation)
        {
            RealmRolesRoleNamePutWithHttpInfo(realm, roleName, roleRepresentation);
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmRolesRoleNamePutWithHttpInfo(string realm, string roleName, RoleRepresentation roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNamePut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNamePut");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesRoleNamePut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/roles/{role-name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmRolesRoleNamePutAsync(string realm, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmRolesRoleNamePutWithHttpInfoAsync(realm, roleName, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a role by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">role’s name (not id!)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmRolesRoleNamePutWithHttpInfoAsync(string realm, string roleName, RoleRepresentation roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNamePut");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNamePut");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling RolesApi->RealmRolesRoleNamePut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/roles/{role-name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmRolesRoleNameUsersGet(string realm, string roleName, int? first = default(int?), int? max = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmRolesRoleNameUsersGetWithHttpInfo(realm, roleName, first, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmRolesRoleNameUsersGetWithHttpInfo(string realm, string roleName, int? first = default(int?), int? max = default(int?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameUsersGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameUsersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameUsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmRolesRoleNameUsersGetAsync(string realm, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmRolesRoleNameUsersGetWithHttpInfoAsync(realm, roleName, first, max, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a stream of users that have the specified role name. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="roleName">the role name.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmRolesRoleNameUsersGetWithHttpInfoAsync(string realm, string roleName, int? first = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling RolesApi->RealmRolesRoleNameUsersGet");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RealmRolesRoleNameUsersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("role-name", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/roles/{role-name}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmRolesRoleNameUsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
