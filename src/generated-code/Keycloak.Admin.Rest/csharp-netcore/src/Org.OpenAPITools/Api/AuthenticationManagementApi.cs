/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationAuthenticatorProvidersGet(string realm);

        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationAuthenticatorProvidersGetWithHttpInfo(string realm);
        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationClientAuthenticatorProvidersGet(string realm);

        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(string realm);
        /// <summary>
        /// Get authenticator provider’s configuration description
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <returns>AuthenticatorConfigInfoRepresentation</returns>
        AuthenticatorConfigInfoRepresentation RealmAuthenticationConfigDescriptionProviderIdGet(string realm, string providerId);

        /// <summary>
        /// Get authenticator provider’s configuration description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of AuthenticatorConfigInfoRepresentation</returns>
        ApiResponse<AuthenticatorConfigInfoRepresentation> RealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(string realm, string providerId);
        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns></returns>
        void RealmAuthenticationConfigIdDelete(string realm, string id);

        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationConfigIdDeleteWithHttpInfo(string realm, string id);
        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns>AuthenticatorConfigRepresentation</returns>
        AuthenticatorConfigRepresentation RealmAuthenticationConfigIdGet(string realm, string id);

        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns>ApiResponse of AuthenticatorConfigRepresentation</returns>
        ApiResponse<AuthenticatorConfigRepresentation> RealmAuthenticationConfigIdGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <returns></returns>
        void RealmAuthenticationConfigIdPut(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation);

        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationConfigIdPutWithHttpInfo(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation);
        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <returns></returns>
        void RealmAuthenticationExecutionsExecutionIdConfigPost(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation);

        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation);
        /// <summary>
        /// Delete execution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        void RealmAuthenticationExecutionsExecutionIdDelete(string realm, string executionId);

        /// <summary>
        /// Delete execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(string realm, string executionId);
        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        void RealmAuthenticationExecutionsExecutionIdGet(string realm, string executionId);

        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdGetWithHttpInfo(string realm, string executionId);
        /// <summary>
        /// Lower execution’s priority
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        void RealmAuthenticationExecutionsExecutionIdLowerPriorityPost(string realm, string executionId);

        /// <summary>
        /// Lower execution’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(string realm, string executionId);
        /// <summary>
        /// Raise execution’s priority
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        void RealmAuthenticationExecutionsExecutionIdRaisePriorityPost(string realm, string executionId);

        /// <summary>
        /// Raise execution’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(string realm, string executionId);
        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <returns></returns>
        void RealmAuthenticationExecutionsPost(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation);

        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationExecutionsPostWithHttpInfo(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation);
        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsFlowAliasCopyPost(string realm, string flowAlias, Dictionary<string, Object> requestBody);

        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(string realm, string flowAlias, Dictionary<string, Object> requestBody);
        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(string realm, string flowAlias, Dictionary<string, Object> requestBody);

        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(string realm, string flowAlias, Dictionary<string, Object> requestBody);
        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsFlowAliasExecutionsFlowPost(string realm, string flowAlias, Dictionary<string, Object> requestBody);

        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(string realm, string flowAlias, Dictionary<string, Object> requestBody);
        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsFlowAliasExecutionsGet(string realm, string flowAlias);

        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(string realm, string flowAlias);
        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsFlowAliasExecutionsPut(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation);

        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation);
        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationFlowsGet(string realm);

        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationFlowsGetWithHttpInfo(string realm);
        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsIdDelete(string realm, string id);

        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsIdDeleteWithHttpInfo(string realm, string id);
        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns>AuthenticationFlowRepresentation</returns>
        AuthenticationFlowRepresentation RealmAuthenticationFlowsIdGet(string realm, string id);

        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns>ApiResponse of AuthenticationFlowRepresentation</returns>
        ApiResponse<AuthenticationFlowRepresentation> RealmAuthenticationFlowsIdGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsIdPut(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation);

        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsIdPutWithHttpInfo(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation);
        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns></returns>
        void RealmAuthenticationFlowsPost(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation);

        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationFlowsPostWithHttpInfo(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation);
        /// <summary>
        /// Get form action providers   Returns a stream of form action providers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationFormActionProvidersGet(string realm);

        /// <summary>
        /// Get form action providers   Returns a stream of form action providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationFormActionProvidersGetWithHttpInfo(string realm);
        /// <summary>
        /// Get form providers   Returns a stream of form providers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationFormProvidersGet(string realm);

        /// <summary>
        /// Get form providers   Returns a stream of form providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationFormProvidersGetWithHttpInfo(string realm);
        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RealmAuthenticationPerClientConfigDescriptionGet(string realm);

        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RealmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(string realm);
        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <returns></returns>
        void RealmAuthenticationRegisterRequiredActionPost(string realm, Dictionary<string, Object> requestBody);

        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationRegisterRequiredActionPostWithHttpInfo(string realm, Dictionary<string, Object> requestBody);
        /// <summary>
        /// Delete required action
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns></returns>
        void RealmAuthenticationRequiredActionsAliasDelete(string realm, string alias);

        /// <summary>
        /// Delete required action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(string realm, string alias);
        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>RequiredActionProviderRepresentation</returns>
        RequiredActionProviderRepresentation RealmAuthenticationRequiredActionsAliasGet(string realm, string alias);

        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of RequiredActionProviderRepresentation</returns>
        ApiResponse<RequiredActionProviderRepresentation> RealmAuthenticationRequiredActionsAliasGetWithHttpInfo(string realm, string alias);
        /// <summary>
        /// Lower required action’s priority
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns></returns>
        void RealmAuthenticationRequiredActionsAliasLowerPriorityPost(string realm, string alias);

        /// <summary>
        /// Lower required action’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(string realm, string alias);
        /// <summary>
        /// Update required action
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <returns></returns>
        void RealmAuthenticationRequiredActionsAliasPut(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation);

        /// <summary>
        /// Update required action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationRequiredActionsAliasPutWithHttpInfo(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation);
        /// <summary>
        /// Raise required action’s priority
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns></returns>
        void RealmAuthenticationRequiredActionsAliasRaisePriorityPost(string realm, string alias);

        /// <summary>
        /// Raise required action’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(string realm, string alias);
        /// <summary>
        /// Get required actions   Returns a stream of required actions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationRequiredActionsGet(string realm);

        /// <summary>
        /// Get required actions   Returns a stream of required actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationRequiredActionsGetWithHttpInfo(string realm);
        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAuthenticationUnregisteredRequiredActionsGet(string realm);

        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(string realm);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationAuthenticatorProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationAuthenticatorProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationClientAuthenticatorProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get authenticator provider’s configuration description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticatorConfigInfoRepresentation</returns>
        System.Threading.Tasks.Task<AuthenticatorConfigInfoRepresentation> RealmAuthenticationConfigDescriptionProviderIdGetAsync(string realm, string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get authenticator provider’s configuration description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticatorConfigInfoRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticatorConfigInfoRepresentation>> RealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfoAsync(string realm, string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationConfigIdDeleteAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationConfigIdDeleteWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticatorConfigRepresentation</returns>
        System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> RealmAuthenticationConfigIdGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticatorConfigRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticatorConfigRepresentation>> RealmAuthenticationConfigIdGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationConfigIdPutAsync(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationConfigIdPutWithHttpInfoAsync(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdConfigPostAsync(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfoAsync(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdDeleteAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdGetAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdGetWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lower execution’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdLowerPriorityPostAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lower execution’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Raise execution’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdRaisePriorityPostAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Raise execution’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationExecutionsPostAsync(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationExecutionsPostWithHttpInfoAsync(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasCopyPostAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfoAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfoAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsFlowPostAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfoAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsGetAsync(string realm, string flowAlias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfoAsync(string realm, string flowAlias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsPutAsync(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfoAsync(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationFlowsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationFlowsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsIdDeleteAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsIdDeleteWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationFlowRepresentation</returns>
        System.Threading.Tasks.Task<AuthenticationFlowRepresentation> RealmAuthenticationFlowsIdGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationFlowRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationFlowRepresentation>> RealmAuthenticationFlowsIdGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsIdPutAsync(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsIdPutWithHttpInfoAsync(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationFlowsPostAsync(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationFlowsPostWithHttpInfoAsync(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get form action providers   Returns a stream of form action providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationFormActionProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get form action providers   Returns a stream of form action providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationFormActionProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get form providers   Returns a stream of form providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationFormProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get form providers   Returns a stream of form providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationFormProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RealmAuthenticationPerClientConfigDescriptionGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RealmAuthenticationPerClientConfigDescriptionGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationRegisterRequiredActionPostAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationRegisterRequiredActionPostWithHttpInfoAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete required action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasDeleteAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete required action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasDeleteWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequiredActionProviderRepresentation</returns>
        System.Threading.Tasks.Task<RequiredActionProviderRepresentation> RealmAuthenticationRequiredActionsAliasGetAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequiredActionProviderRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequiredActionProviderRepresentation>> RealmAuthenticationRequiredActionsAliasGetWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lower required action’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasLowerPriorityPostAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lower required action’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update required action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasPutAsync(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update required action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasPutWithHttpInfoAsync(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Raise required action’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasRaisePriorityPostAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Raise required action’s priority
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get required actions   Returns a stream of required actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationRequiredActionsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get required actions   Returns a stream of required actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationRequiredActionsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationUnregisteredRequiredActionsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationManagementApi : IAuthenticationManagementApiSync, IAuthenticationManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationManagementApi : IAuthenticationManagementApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationManagementApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationManagementApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticationManagementApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationAuthenticatorProvidersGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationAuthenticatorProvidersGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationAuthenticatorProvidersGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationAuthenticatorProvidersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/authenticator-providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationAuthenticatorProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationAuthenticatorProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationAuthenticatorProvidersGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authenticator providers   Returns a stream of authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationAuthenticatorProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationAuthenticatorProvidersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/authenticator-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationAuthenticatorProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationClientAuthenticatorProvidersGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationClientAuthenticatorProvidersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/client-authenticator-providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationClientAuthenticatorProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationClientAuthenticatorProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client authenticator providers   Returns a stream of client authenticator providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationClientAuthenticatorProvidersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/client-authenticator-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationClientAuthenticatorProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authenticator provider’s configuration description 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <returns>AuthenticatorConfigInfoRepresentation</returns>
        public AuthenticatorConfigInfoRepresentation RealmAuthenticationConfigDescriptionProviderIdGet(string realm, string providerId)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigInfoRepresentation> localVarResponse = RealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(realm, providerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authenticator provider’s configuration description 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of AuthenticatorConfigInfoRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigInfoRepresentation> RealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(string realm, string providerId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigDescriptionProviderIdGet");
            }

            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerId' when calling AuthenticationManagementApi->RealmAuthenticationConfigDescriptionProviderIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticatorConfigInfoRepresentation>("/{realm}/authentication/config-description/{providerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigDescriptionProviderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authenticator provider’s configuration description 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticatorConfigInfoRepresentation</returns>
        public async System.Threading.Tasks.Task<AuthenticatorConfigInfoRepresentation> RealmAuthenticationConfigDescriptionProviderIdGetAsync(string realm, string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigInfoRepresentation> localVarResponse = await RealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfoAsync(realm, providerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authenticator provider’s configuration description 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticatorConfigInfoRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigInfoRepresentation>> RealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfoAsync(string realm, string providerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigDescriptionProviderIdGet");
            }

            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'providerId' when calling AuthenticationManagementApi->RealmAuthenticationConfigDescriptionProviderIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("providerId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(providerId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticatorConfigInfoRepresentation>("/{realm}/authentication/config-description/{providerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigDescriptionProviderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns></returns>
        public void RealmAuthenticationConfigIdDelete(string realm, string id)
        {
            RealmAuthenticationConfigIdDeleteWithHttpInfo(realm, id);
        }

        /// <summary>
        /// Delete authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationConfigIdDeleteWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/authentication/config/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationConfigIdDeleteAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationConfigIdDeleteWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationConfigIdDeleteWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/authentication/config/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns>AuthenticatorConfigRepresentation</returns>
        public AuthenticatorConfigRepresentation RealmAuthenticationConfigIdGet(string realm, string id)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigRepresentation> localVarResponse = RealmAuthenticationConfigIdGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <returns>ApiResponse of AuthenticatorConfigRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigRepresentation> RealmAuthenticationConfigIdGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticatorConfigRepresentation>("/{realm}/authentication/config/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticatorConfigRepresentation</returns>
        public async System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> RealmAuthenticationConfigIdGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigRepresentation> localVarResponse = await RealmAuthenticationConfigIdGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticatorConfigRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthenticatorConfigRepresentation>> RealmAuthenticationConfigIdGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticatorConfigRepresentation>("/{realm}/authentication/config/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <returns></returns>
        public void RealmAuthenticationConfigIdPut(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation)
        {
            RealmAuthenticationConfigIdPutWithHttpInfo(realm, id, authenticatorConfigRepresentation);
        }

        /// <summary>
        /// Update authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationConfigIdPutWithHttpInfo(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdPut");
            }

            // verify the required parameter 'authenticatorConfigRepresentation' is set
            if (authenticatorConfigRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticatorConfigRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = authenticatorConfigRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/authentication/config/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationConfigIdPutAsync(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationConfigIdPutWithHttpInfoAsync(realm, id, authenticatorConfigRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update authenticator configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Configuration id</param>
        /// <param name="authenticatorConfigRepresentation">JSON describing new state of authenticator configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationConfigIdPutWithHttpInfoAsync(string realm, string id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdPut");
            }

            // verify the required parameter 'authenticatorConfigRepresentation' is set
            if (authenticatorConfigRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticatorConfigRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationConfigIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = authenticatorConfigRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/authentication/config/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationConfigIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update execution with new configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <returns></returns>
        public void RealmAuthenticationExecutionsExecutionIdConfigPost(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation)
        {
            RealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(realm, executionId, authenticatorConfigRepresentation);
        }

        /// <summary>
        /// Update execution with new configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdConfigPost");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdConfigPost");
            }

            // verify the required parameter 'authenticatorConfigRepresentation' is set
            if (authenticatorConfigRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticatorConfigRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdConfigPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter
            localVarRequestOptions.Data = authenticatorConfigRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/executions/{executionId}/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdConfigPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update execution with new configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdConfigPostAsync(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfoAsync(realm, executionId, authenticatorConfigRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update execution with new configuration 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="authenticatorConfigRepresentation">JSON with new configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfoAsync(string realm, string executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdConfigPost");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdConfigPost");
            }

            // verify the required parameter 'authenticatorConfigRepresentation' is set
            if (authenticatorConfigRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticatorConfigRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdConfigPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter
            localVarRequestOptions.Data = authenticatorConfigRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/executions/{executionId}/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdConfigPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        public void RealmAuthenticationExecutionsExecutionIdDelete(string realm, string executionId)
        {
            RealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(realm, executionId);
        }

        /// <summary>
        /// Delete execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(string realm, string executionId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdDelete");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/authentication/executions/{executionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdDeleteAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfoAsync(realm, executionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdDelete");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/authentication/executions/{executionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        public void RealmAuthenticationExecutionsExecutionIdGet(string realm, string executionId)
        {
            RealmAuthenticationExecutionsExecutionIdGetWithHttpInfo(realm, executionId);
        }

        /// <summary>
        /// Get Single Execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdGetWithHttpInfo(string realm, string executionId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdGet");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{realm}/authentication/executions/{executionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdGetAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationExecutionsExecutionIdGetWithHttpInfoAsync(realm, executionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Single Execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdGetWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdGet");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{realm}/authentication/executions/{executionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lower execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        public void RealmAuthenticationExecutionsExecutionIdLowerPriorityPost(string realm, string executionId)
        {
            RealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(realm, executionId);
        }

        /// <summary>
        /// Lower execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(string realm, string executionId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdLowerPriorityPost");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdLowerPriorityPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/executions/{executionId}/lower-priority", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdLowerPriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lower execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdLowerPriorityPostAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfoAsync(realm, executionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lower execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdLowerPriorityPost");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdLowerPriorityPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/executions/{executionId}/lower-priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdLowerPriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raise execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns></returns>
        public void RealmAuthenticationExecutionsExecutionIdRaisePriorityPost(string realm, string executionId)
        {
            RealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(realm, executionId);
        }

        /// <summary>
        /// Raise execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(string realm, string executionId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdRaisePriorityPost");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdRaisePriorityPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/executions/{executionId}/raise-priority", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdRaisePriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raise execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationExecutionsExecutionIdRaisePriorityPostAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfoAsync(realm, executionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Raise execution’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="executionId">Execution id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfoAsync(string realm, string executionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdRaisePriorityPost");
            }

            // verify the required parameter 'executionId' is set
            if (executionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'executionId' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsExecutionIdRaisePriorityPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("executionId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(executionId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/executions/{executionId}/raise-priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsExecutionIdRaisePriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new authentication execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <returns></returns>
        public void RealmAuthenticationExecutionsPost(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation)
        {
            RealmAuthenticationExecutionsPostWithHttpInfo(realm, authenticationExecutionRepresentation);
        }

        /// <summary>
        /// Add new authentication execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationExecutionsPostWithHttpInfo(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsPost");
            }

            // verify the required parameter 'authenticationExecutionRepresentation' is set
            if (authenticationExecutionRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationExecutionRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = authenticationExecutionRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/executions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new authentication execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationExecutionsPostAsync(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationExecutionsPostWithHttpInfoAsync(realm, authenticationExecutionRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add new authentication execution 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationExecutionRepresentation">JSON model describing authentication execution</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationExecutionsPostWithHttpInfoAsync(string realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsPost");
            }

            // verify the required parameter 'authenticationExecutionRepresentation' is set
            if (authenticationExecutionRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationExecutionRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationExecutionsPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = authenticationExecutionRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/executions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationExecutionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsFlowAliasCopyPost(string realm, string flowAlias, Dictionary<string, Object> requestBody)
        {
            RealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(realm, flowAlias, requestBody);
        }

        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(string realm, string flowAlias, Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasCopyPost");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasCopyPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasCopyPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/flows/{flowAlias}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasCopyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasCopyPostAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfoAsync(realm, flowAlias, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Name of the existing authentication flow</param>
        /// <param name="requestBody">JSON containing &#39;newName&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfoAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasCopyPost");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasCopyPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasCopyPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/flows/{flowAlias}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasCopyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new authentication execution to a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(string realm, string flowAlias, Dictionary<string, Object> requestBody)
        {
            RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(realm, flowAlias, requestBody);
        }

        /// <summary>
        /// Add new authentication execution to a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(string realm, string flowAlias, Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/flows/{flowAlias}/executions/execution", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new authentication execution to a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfoAsync(realm, flowAlias, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add new authentication execution to a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="requestBody">New execution JSON data containing &#39;provider&#39; attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfoAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/flows/{flowAlias}/executions/execution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsExecutionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new flow with new execution to existing flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsFlowAliasExecutionsFlowPost(string realm, string flowAlias, Dictionary<string, Object> requestBody)
        {
            RealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(realm, flowAlias, requestBody);
        }

        /// <summary>
        /// Add new flow with new execution to existing flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(string realm, string flowAlias, Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsFlowPost");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsFlowPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsFlowPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/flows/{flowAlias}/executions/flow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsFlowPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new flow with new execution to existing flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsFlowPostAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfoAsync(realm, flowAlias, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add new flow with new execution to existing flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="requestBody">New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfoAsync(string realm, string flowAlias, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsFlowPost");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsFlowPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsFlowPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/flows/{flowAlias}/executions/flow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsFlowPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authentication executions for a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsFlowAliasExecutionsGet(string realm, string flowAlias)
        {
            RealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(realm, flowAlias);
        }

        /// <summary>
        /// Get authentication executions for a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(string realm, string flowAlias)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsGet");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{realm}/authentication/flows/{flowAlias}/executions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authentication executions for a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsGetAsync(string realm, string flowAlias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfoAsync(realm, flowAlias, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get authentication executions for a flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfoAsync(string realm, string flowAlias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsGet");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{realm}/authentication/flows/{flowAlias}/executions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update authentication executions of a Flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsFlowAliasExecutionsPut(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation)
        {
            RealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(realm, flowAlias, authenticationExecutionInfoRepresentation);
        }

        /// <summary>
        /// Update authentication executions of a Flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsPut");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsPut");
            }

            // verify the required parameter 'authenticationExecutionInfoRepresentation' is set
            if (authenticationExecutionInfoRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationExecutionInfoRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = authenticationExecutionInfoRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/authentication/flows/{flowAlias}/executions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update authentication executions of a Flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsFlowAliasExecutionsPutAsync(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfoAsync(realm, flowAlias, authenticationExecutionInfoRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update authentication executions of a Flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="authenticationExecutionInfoRepresentation">AuthenticationExecutionInfoRepresentation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfoAsync(string realm, string flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsPut");
            }

            // verify the required parameter 'flowAlias' is set
            if (flowAlias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'flowAlias' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsPut");
            }

            // verify the required parameter 'authenticationExecutionInfoRepresentation' is set
            if (authenticationExecutionInfoRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationExecutionInfoRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationFlowsFlowAliasExecutionsPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("flowAlias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(flowAlias)); // path parameter
            localVarRequestOptions.Data = authenticationExecutionInfoRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/authentication/flows/{flowAlias}/executions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsFlowAliasExecutionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationFlowsGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationFlowsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationFlowsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/flows", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationFlowsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationFlowsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authentication flows   Returns a stream of authentication flows. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationFlowsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/flows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsIdDelete(string realm, string id)
        {
            RealmAuthenticationFlowsIdDeleteWithHttpInfo(realm, id);
        }

        /// <summary>
        /// Delete an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsIdDeleteWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/authentication/flows/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsIdDeleteAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsIdDeleteWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsIdDeleteWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/authentication/flows/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authentication flow for id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns>AuthenticationFlowRepresentation</returns>
        public AuthenticationFlowRepresentation RealmAuthenticationFlowsIdGet(string realm, string id)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticationFlowRepresentation> localVarResponse = RealmAuthenticationFlowsIdGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authentication flow for id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <returns>ApiResponse of AuthenticationFlowRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthenticationFlowRepresentation> RealmAuthenticationFlowsIdGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticationFlowRepresentation>("/{realm}/authentication/flows/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get authentication flow for id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationFlowRepresentation</returns>
        public async System.Threading.Tasks.Task<AuthenticationFlowRepresentation> RealmAuthenticationFlowsIdGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthenticationFlowRepresentation> localVarResponse = await RealmAuthenticationFlowsIdGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get authentication flow for id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationFlowRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthenticationFlowRepresentation>> RealmAuthenticationFlowsIdGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationFlowRepresentation>("/{realm}/authentication/flows/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsIdPut(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation)
        {
            RealmAuthenticationFlowsIdPutWithHttpInfo(realm, id, authenticationFlowRepresentation);
        }

        /// <summary>
        /// Update an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsIdPutWithHttpInfo(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdPut");
            }

            // verify the required parameter 'authenticationFlowRepresentation' is set
            if (authenticationFlowRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationFlowRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = authenticationFlowRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/authentication/flows/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsIdPutAsync(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsIdPutWithHttpInfoAsync(realm, id, authenticationFlowRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">Flow id</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsIdPutWithHttpInfoAsync(string realm, string id, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdPut");
            }

            // verify the required parameter 'authenticationFlowRepresentation' is set
            if (authenticationFlowRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationFlowRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationFlowsIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = authenticationFlowRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/authentication/flows/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns></returns>
        public void RealmAuthenticationFlowsPost(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation)
        {
            RealmAuthenticationFlowsPostWithHttpInfo(realm, authenticationFlowRepresentation);
        }

        /// <summary>
        /// Create a new authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationFlowsPostWithHttpInfo(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsPost");
            }

            // verify the required parameter 'authenticationFlowRepresentation' is set
            if (authenticationFlowRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationFlowRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationFlowsPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = authenticationFlowRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/flows", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationFlowsPostAsync(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationFlowsPostWithHttpInfoAsync(realm, authenticationFlowRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new authentication flow 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authenticationFlowRepresentation">Authentication flow representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationFlowsPostWithHttpInfoAsync(string realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFlowsPost");
            }

            // verify the required parameter 'authenticationFlowRepresentation' is set
            if (authenticationFlowRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authenticationFlowRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationFlowsPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = authenticationFlowRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/flows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFlowsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get form action providers   Returns a stream of form action providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationFormActionProvidersGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationFormActionProvidersGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get form action providers   Returns a stream of form action providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationFormActionProvidersGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFormActionProvidersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/form-action-providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFormActionProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get form action providers   Returns a stream of form action providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationFormActionProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationFormActionProvidersGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get form action providers   Returns a stream of form action providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationFormActionProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFormActionProvidersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/form-action-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFormActionProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get form providers   Returns a stream of form providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationFormProvidersGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationFormProvidersGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get form providers   Returns a stream of form providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationFormProvidersGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFormProvidersGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/form-providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFormProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get form providers   Returns a stream of form providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationFormProvidersGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationFormProvidersGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get form providers   Returns a stream of form providers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationFormProvidersGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationFormProvidersGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/form-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationFormProvidersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get configuration descriptions for all clients 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RealmAuthenticationPerClientConfigDescriptionGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = RealmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get configuration descriptions for all clients 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> RealmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationPerClientConfigDescriptionGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, Object>>("/{realm}/authentication/per-client-config-description", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationPerClientConfigDescriptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get configuration descriptions for all clients 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RealmAuthenticationPerClientConfigDescriptionGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await RealmAuthenticationPerClientConfigDescriptionGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get configuration descriptions for all clients 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>>> RealmAuthenticationPerClientConfigDescriptionGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationPerClientConfigDescriptionGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, Object>>("/{realm}/authentication/per-client-config-description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationPerClientConfigDescriptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new required actions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <returns></returns>
        public void RealmAuthenticationRegisterRequiredActionPost(string realm, Dictionary<string, Object> requestBody)
        {
            RealmAuthenticationRegisterRequiredActionPostWithHttpInfo(realm, requestBody);
        }

        /// <summary>
        /// Register a new required actions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationRegisterRequiredActionPostWithHttpInfo(string realm, Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRegisterRequiredActionPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationRegisterRequiredActionPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/register-required-action", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRegisterRequiredActionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new required actions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationRegisterRequiredActionPostAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationRegisterRequiredActionPostWithHttpInfoAsync(realm, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register a new required actions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody">JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationRegisterRequiredActionPostWithHttpInfoAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRegisterRequiredActionPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AuthenticationManagementApi->RealmAuthenticationRegisterRequiredActionPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/register-required-action", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRegisterRequiredActionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns></returns>
        public void RealmAuthenticationRequiredActionsAliasDelete(string realm, string alias)
        {
            RealmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(realm, alias);
        }

        /// <summary>
        /// Delete required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(string realm, string alias)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasDelete");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/authentication/required-actions/{alias}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasDeleteAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationRequiredActionsAliasDeleteWithHttpInfoAsync(realm, alias, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasDeleteWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasDelete");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/authentication/required-actions/{alias}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get required action for alias 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>RequiredActionProviderRepresentation</returns>
        public RequiredActionProviderRepresentation RealmAuthenticationRequiredActionsAliasGet(string realm, string alias)
        {
            Org.OpenAPITools.Client.ApiResponse<RequiredActionProviderRepresentation> localVarResponse = RealmAuthenticationRequiredActionsAliasGetWithHttpInfo(realm, alias);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get required action for alias 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of RequiredActionProviderRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<RequiredActionProviderRepresentation> RealmAuthenticationRequiredActionsAliasGetWithHttpInfo(string realm, string alias)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasGet");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RequiredActionProviderRepresentation>("/{realm}/authentication/required-actions/{alias}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get required action for alias 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequiredActionProviderRepresentation</returns>
        public async System.Threading.Tasks.Task<RequiredActionProviderRepresentation> RealmAuthenticationRequiredActionsAliasGetAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RequiredActionProviderRepresentation> localVarResponse = await RealmAuthenticationRequiredActionsAliasGetWithHttpInfoAsync(realm, alias, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get required action for alias 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequiredActionProviderRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RequiredActionProviderRepresentation>> RealmAuthenticationRequiredActionsAliasGetWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasGet");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequiredActionProviderRepresentation>("/{realm}/authentication/required-actions/{alias}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lower required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns></returns>
        public void RealmAuthenticationRequiredActionsAliasLowerPriorityPost(string realm, string alias)
        {
            RealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(realm, alias);
        }

        /// <summary>
        /// Lower required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(string realm, string alias)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasLowerPriorityPost");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasLowerPriorityPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/required-actions/{alias}/lower-priority", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasLowerPriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lower required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasLowerPriorityPostAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfoAsync(realm, alias, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lower required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasLowerPriorityPost");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasLowerPriorityPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/required-actions/{alias}/lower-priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasLowerPriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <returns></returns>
        public void RealmAuthenticationRequiredActionsAliasPut(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation)
        {
            RealmAuthenticationRequiredActionsAliasPutWithHttpInfo(realm, alias, requiredActionProviderRepresentation);
        }

        /// <summary>
        /// Update required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationRequiredActionsAliasPutWithHttpInfo(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasPut");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasPut");
            }

            // verify the required parameter 'requiredActionProviderRepresentation' is set
            if (requiredActionProviderRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requiredActionProviderRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter
            localVarRequestOptions.Data = requiredActionProviderRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/authentication/required-actions/{alias}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasPutAsync(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationRequiredActionsAliasPutWithHttpInfoAsync(realm, alias, requiredActionProviderRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update required action 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="requiredActionProviderRepresentation">JSON describing new state of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasPutWithHttpInfoAsync(string realm, string alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasPut");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasPut");
            }

            // verify the required parameter 'requiredActionProviderRepresentation' is set
            if (requiredActionProviderRepresentation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requiredActionProviderRepresentation' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter
            localVarRequestOptions.Data = requiredActionProviderRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/authentication/required-actions/{alias}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raise required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns></returns>
        public void RealmAuthenticationRequiredActionsAliasRaisePriorityPost(string realm, string alias)
        {
            RealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(realm, alias);
        }

        /// <summary>
        /// Raise required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> RealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(string realm, string alias)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasRaisePriorityPost");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasRaisePriorityPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/authentication/required-actions/{alias}/raise-priority", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasRaisePriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raise required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAuthenticationRequiredActionsAliasRaisePriorityPostAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfoAsync(realm, alias, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Raise required action’s priority 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="alias">Alias of required action</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> RealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfoAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasRaisePriorityPost");
            }

            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'alias' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsAliasRaisePriorityPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias", Org.OpenAPITools.Client.ClientUtils.ParameterToString(alias)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/authentication/required-actions/{alias}/raise-priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsAliasRaisePriorityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get required actions   Returns a stream of required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationRequiredActionsGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationRequiredActionsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get required actions   Returns a stream of required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationRequiredActionsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/required-actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get required actions   Returns a stream of required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationRequiredActionsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationRequiredActionsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get required actions   Returns a stream of required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationRequiredActionsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationRequiredActionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/required-actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationRequiredActionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAuthenticationUnregisteredRequiredActionsGet(string realm)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationUnregisteredRequiredActionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/authentication/unregistered-required-actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationUnregisteredRequiredActionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAuthenticationUnregisteredRequiredActionsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unregistered required actions   Returns a stream of unregistered required actions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling AuthenticationManagementApi->RealmAuthenticationUnregisteredRequiredActionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/authentication/unregistered-required-actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAuthenticationUnregisteredRequiredActionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
