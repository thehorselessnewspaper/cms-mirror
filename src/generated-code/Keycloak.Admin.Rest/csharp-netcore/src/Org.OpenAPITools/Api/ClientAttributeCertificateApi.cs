/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientAttributeCertificateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>byte[]</returns>
        byte[] RealmClientsIdCertificatesAttrDownloadPost(string realm, string id, string attr, KeyStoreConfig keyStoreConfig);

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> RealmClientsIdCertificatesAttrDownloadPostWithHttpInfo(string realm, string id, string attr, KeyStoreConfig keyStoreConfig);
        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>byte[]</returns>
        byte[] RealmClientsIdCertificatesAttrGenerateAndDownloadPost(string realm, string id, string attr, KeyStoreConfig keyStoreConfig);

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> RealmClientsIdCertificatesAttrGenerateAndDownloadPostWithHttpInfo(string realm, string id, string attr, KeyStoreConfig keyStoreConfig);
        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        CertificateRepresentation RealmClientsIdCertificatesAttrGeneratePost(string realm, string id, string attr);

        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrGeneratePostWithHttpInfo(string realm, string id, string attr);
        /// <summary>
        /// Get key info
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        CertificateRepresentation RealmClientsIdCertificatesAttrGet(string realm, string id, string attr);

        /// <summary>
        /// Get key info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrGetWithHttpInfo(string realm, string id, string attr);
        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        CertificateRepresentation RealmClientsIdCertificatesAttrUploadCertificatePost(string realm, string id, string attr);

        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadCertificatePostWithHttpInfo(string realm, string id, string attr);
        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        CertificateRepresentation RealmClientsIdCertificatesAttrUploadPost(string realm, string id, string attr);

        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadPostWithHttpInfo(string realm, string id, string attr);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientAttributeCertificateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> RealmClientsIdCertificatesAttrDownloadPostAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> RealmClientsIdCertificatesAttrDownloadPostWithHttpInfoAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> RealmClientsIdCertificatesAttrGenerateAndDownloadPostAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> RealmClientsIdCertificatesAttrGenerateAndDownloadPostWithHttpInfoAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrGeneratePostAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrGeneratePostWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get key info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrGetAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get key info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrGetWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadCertificatePostAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrUploadCertificatePostWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadPostAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrUploadPostWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientAttributeCertificateApi : IClientAttributeCertificateApiSync, IClientAttributeCertificateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientAttributeCertificateApi : IClientAttributeCertificateApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAttributeCertificateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientAttributeCertificateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAttributeCertificateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientAttributeCertificateApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAttributeCertificateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientAttributeCertificateApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAttributeCertificateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientAttributeCertificateApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>byte[]</returns>
        public byte[] RealmClientsIdCertificatesAttrDownloadPost(string realm, string id, string attr, KeyStoreConfig keyStoreConfig)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = RealmClientsIdCertificatesAttrDownloadPostWithHttpInfo(realm, id, attr, keyStoreConfig);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> RealmClientsIdCertificatesAttrDownloadPostWithHttpInfo(string realm, string id, string attr, KeyStoreConfig keyStoreConfig)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            // verify the required parameter 'keyStoreConfig' is set
            if (keyStoreConfig == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'keyStoreConfig' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter
            localVarRequestOptions.Data = keyStoreConfig;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<byte[]>("/{realm}/clients/{id}/certificates/{attr}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrDownloadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> RealmClientsIdCertificatesAttrDownloadPostAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await RealmClientsIdCertificatesAttrDownloadPostWithHttpInfoAsync(realm, id, attr, keyStoreConfig, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> RealmClientsIdCertificatesAttrDownloadPostWithHttpInfoAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }

            // verify the required parameter 'keyStoreConfig' is set
            if (keyStoreConfig == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'keyStoreConfig' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrDownloadPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter
            localVarRequestOptions.Data = keyStoreConfig;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<byte[]>("/{realm}/clients/{id}/certificates/{attr}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrDownloadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>byte[]</returns>
        public byte[] RealmClientsIdCertificatesAttrGenerateAndDownloadPost(string realm, string id, string attr, KeyStoreConfig keyStoreConfig)
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = RealmClientsIdCertificatesAttrGenerateAndDownloadPostWithHttpInfo(realm, id, attr, keyStoreConfig);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Org.OpenAPITools.Client.ApiResponse<byte[]> RealmClientsIdCertificatesAttrGenerateAndDownloadPostWithHttpInfo(string realm, string id, string attr, KeyStoreConfig keyStoreConfig)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            // verify the required parameter 'keyStoreConfig' is set
            if (keyStoreConfig == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'keyStoreConfig' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter
            localVarRequestOptions.Data = keyStoreConfig;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<byte[]>("/{realm}/clients/{id}/certificates/{attr}/generate-and-download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrGenerateAndDownloadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> RealmClientsIdCertificatesAttrGenerateAndDownloadPostAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<byte[]> localVarResponse = await RealmClientsIdCertificatesAttrGenerateAndDownloadPostWithHttpInfoAsync(realm, id, attr, keyStoreConfig, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="keyStoreConfig">Keystore configuration as JSON</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<byte[]>> RealmClientsIdCertificatesAttrGenerateAndDownloadPostWithHttpInfoAsync(string realm, string id, string attr, KeyStoreConfig keyStoreConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }

            // verify the required parameter 'keyStoreConfig' is set
            if (keyStoreConfig == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'keyStoreConfig' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGenerateAndDownloadPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter
            localVarRequestOptions.Data = keyStoreConfig;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<byte[]>("/{realm}/clients/{id}/certificates/{attr}/generate-and-download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrGenerateAndDownloadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a new certificate with new key pair 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        public CertificateRepresentation RealmClientsIdCertificatesAttrGeneratePost(string realm, string id, string attr)
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = RealmClientsIdCertificatesAttrGeneratePostWithHttpInfo(realm, id, attr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new certificate with new key pair 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrGeneratePostWithHttpInfo(string realm, string id, string attr)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGeneratePost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGeneratePost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGeneratePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a new certificate with new key pair 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        public async System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrGeneratePostAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = await RealmClientsIdCertificatesAttrGeneratePostWithHttpInfoAsync(realm, id, attr, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new certificate with new key pair 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrGeneratePostWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGeneratePost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGeneratePost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGeneratePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get key info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        public CertificateRepresentation RealmClientsIdCertificatesAttrGet(string realm, string id, string attr)
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = RealmClientsIdCertificatesAttrGetWithHttpInfo(realm, id, attr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get key info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrGetWithHttpInfo(string realm, string id, string attr)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGet");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get key info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        public async System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrGetAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = await RealmClientsIdCertificatesAttrGetWithHttpInfoAsync(realm, id, attr, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get key info 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrGetWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGet");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload only certificate, not private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        public CertificateRepresentation RealmClientsIdCertificatesAttrUploadCertificatePost(string realm, string id, string attr)
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = RealmClientsIdCertificatesAttrUploadCertificatePostWithHttpInfo(realm, id, attr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload only certificate, not private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadCertificatePostWithHttpInfo(string realm, string id, string attr)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadCertificatePost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadCertificatePost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadCertificatePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}/upload-certificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrUploadCertificatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload only certificate, not private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        public async System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadCertificatePostAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = await RealmClientsIdCertificatesAttrUploadCertificatePostWithHttpInfoAsync(realm, id, attr, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload only certificate, not private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrUploadCertificatePostWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadCertificatePost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadCertificatePost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadCertificatePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}/upload-certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrUploadCertificatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload certificate and eventually private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>CertificateRepresentation</returns>
        public CertificateRepresentation RealmClientsIdCertificatesAttrUploadPost(string realm, string id, string attr)
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = RealmClientsIdCertificatesAttrUploadPostWithHttpInfo(realm, id, attr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload certificate and eventually private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <returns>ApiResponse of CertificateRepresentation</returns>
        public Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadPostWithHttpInfo(string realm, string id, string attr)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadPost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload certificate and eventually private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateRepresentation</returns>
        public async System.Threading.Tasks.Task<CertificateRepresentation> RealmClientsIdCertificatesAttrUploadPostAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation> localVarResponse = await RealmClientsIdCertificatesAttrUploadPostWithHttpInfoAsync(realm, id, attr, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload certificate and eventually private key 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="attr"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateRepresentation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CertificateRepresentation>> RealmClientsIdCertificatesAttrUploadPostWithHttpInfoAsync(string realm, string id, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadPost");
            }

            // verify the required parameter 'attr' is set
            if (attr == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attr' when calling ClientAttributeCertificateApi->RealmClientsIdCertificatesAttrUploadPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attr", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attr)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CertificateRepresentation>("/{realm}/clients/{id}/certificates/{attr}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdCertificatesAttrUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
