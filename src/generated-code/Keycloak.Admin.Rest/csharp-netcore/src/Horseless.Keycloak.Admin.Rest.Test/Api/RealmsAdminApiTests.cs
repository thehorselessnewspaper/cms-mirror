/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Horseless.Keycloak.Admin.Rest.Client;
using Horseless.Keycloak.Admin.Rest.Api;
// uncomment below to import models
//using Horseless.Keycloak.Admin.Rest.Model;

namespace Horseless.Keycloak.Admin.Rest.Test.Api
{
    /// <summary>
    ///  Class for testing RealmsAdminApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RealmsAdminApiTests : IDisposable
    {
        private RealmsAdminApi instance;

        public RealmsAdminApiTests()
        {
            instance = new RealmsAdminApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RealmsAdminApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RealmsAdminApi
            //Assert.IsType<RealmsAdminApi>(instance);
        }

        /// <summary>
        /// Test RealmAdminEventsDelete
        /// </summary>
        [Fact]
        public void RealmAdminEventsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmAdminEventsDelete(realm);
        }

        /// <summary>
        /// Test RealmAdminEventsGet
        /// </summary>
        [Fact]
        public void RealmAdminEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string authClient = null;
            //string authIpAddress = null;
            //string authRealm = null;
            //string authUser = null;
            //string dateFrom = null;
            //string dateTo = null;
            //int? first = null;
            //int? max = null;
            //List<string> operationTypes = null;
            //string resourcePath = null;
            //List<string> resourceTypes = null;
            //var response = instance.RealmAdminEventsGet(realm, authClient, authIpAddress, authRealm, authUser, dateFrom, dateTo, first, max, operationTypes, resourcePath, resourceTypes);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmClearKeysCachePost
        /// </summary>
        [Fact]
        public void RealmClearKeysCachePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmClearKeysCachePost(realm);
        }

        /// <summary>
        /// Test RealmClearRealmCachePost
        /// </summary>
        [Fact]
        public void RealmClearRealmCachePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmClearRealmCachePost(realm);
        }

        /// <summary>
        /// Test RealmClearUserCachePost
        /// </summary>
        [Fact]
        public void RealmClearUserCachePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmClearUserCachePost(realm);
        }

        /// <summary>
        /// Test RealmClientDescriptionConverterPost
        /// </summary>
        [Fact]
        public void RealmClientDescriptionConverterPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string body = null;
            //var response = instance.RealmClientDescriptionConverterPost(realm, body);
            //Assert.IsType<ClientRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientPoliciesPoliciesGet
        /// </summary>
        [Fact]
        public void RealmClientPoliciesPoliciesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmClientPoliciesPoliciesGet(realm);
            //Assert.IsType<ClientPoliciesRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientPoliciesPoliciesPut
        /// </summary>
        [Fact]
        public void RealmClientPoliciesPoliciesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //ClientPoliciesRepresentation clientPoliciesRepresentation = null;
            //instance.RealmClientPoliciesPoliciesPut(realm, clientPoliciesRepresentation);
        }

        /// <summary>
        /// Test RealmClientPoliciesProfilesGet
        /// </summary>
        [Fact]
        public void RealmClientPoliciesProfilesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //bool? includeGlobalProfiles = null;
            //var response = instance.RealmClientPoliciesProfilesGet(realm, includeGlobalProfiles);
            //Assert.IsType<ClientProfilesRepresentation>(response);
        }

        /// <summary>
        /// Test RealmClientPoliciesProfilesPut
        /// </summary>
        [Fact]
        public void RealmClientPoliciesProfilesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //ClientProfilesRepresentation clientProfilesRepresentation = null;
            //instance.RealmClientPoliciesProfilesPut(realm, clientProfilesRepresentation);
        }

        /// <summary>
        /// Test RealmClientSessionStatsGet
        /// </summary>
        [Fact]
        public void RealmClientSessionStatsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmClientSessionStatsGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmCredentialRegistratorsGet
        /// </summary>
        [Fact]
        public void RealmCredentialRegistratorsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmCredentialRegistratorsGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmDefaultDefaultClientScopesClientScopeIdDelete
        /// </summary>
        [Fact]
        public void RealmDefaultDefaultClientScopesClientScopeIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string clientScopeId = null;
            //instance.RealmDefaultDefaultClientScopesClientScopeIdDelete(realm, clientScopeId);
        }

        /// <summary>
        /// Test RealmDefaultDefaultClientScopesClientScopeIdPut
        /// </summary>
        [Fact]
        public void RealmDefaultDefaultClientScopesClientScopeIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string clientScopeId = null;
            //instance.RealmDefaultDefaultClientScopesClientScopeIdPut(realm, clientScopeId);
        }

        /// <summary>
        /// Test RealmDefaultDefaultClientScopesGet
        /// </summary>
        [Fact]
        public void RealmDefaultDefaultClientScopesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmDefaultDefaultClientScopesGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmDefaultGroupsGet
        /// </summary>
        [Fact]
        public void RealmDefaultGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmDefaultGroupsGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmDefaultGroupsGroupIdDelete
        /// </summary>
        [Fact]
        public void RealmDefaultGroupsGroupIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string groupId = null;
            //instance.RealmDefaultGroupsGroupIdDelete(realm, groupId);
        }

        /// <summary>
        /// Test RealmDefaultGroupsGroupIdPut
        /// </summary>
        [Fact]
        public void RealmDefaultGroupsGroupIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string groupId = null;
            //instance.RealmDefaultGroupsGroupIdPut(realm, groupId);
        }

        /// <summary>
        /// Test RealmDefaultOptionalClientScopesClientScopeIdDelete
        /// </summary>
        [Fact]
        public void RealmDefaultOptionalClientScopesClientScopeIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string clientScopeId = null;
            //instance.RealmDefaultOptionalClientScopesClientScopeIdDelete(realm, clientScopeId);
        }

        /// <summary>
        /// Test RealmDefaultOptionalClientScopesClientScopeIdPut
        /// </summary>
        [Fact]
        public void RealmDefaultOptionalClientScopesClientScopeIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string clientScopeId = null;
            //instance.RealmDefaultOptionalClientScopesClientScopeIdPut(realm, clientScopeId);
        }

        /// <summary>
        /// Test RealmDefaultOptionalClientScopesGet
        /// </summary>
        [Fact]
        public void RealmDefaultOptionalClientScopesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmDefaultOptionalClientScopesGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmDelete
        /// </summary>
        [Fact]
        public void RealmDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmDelete(realm);
        }

        /// <summary>
        /// Test RealmEventsConfigGet
        /// </summary>
        [Fact]
        public void RealmEventsConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmEventsConfigGet(realm);
            //Assert.IsType<RealmEventsConfigRepresentation>(response);
        }

        /// <summary>
        /// Test RealmEventsConfigPut
        /// </summary>
        [Fact]
        public void RealmEventsConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //RealmEventsConfigRepresentation realmEventsConfigRepresentation = null;
            //instance.RealmEventsConfigPut(realm, realmEventsConfigRepresentation);
        }

        /// <summary>
        /// Test RealmEventsDelete
        /// </summary>
        [Fact]
        public void RealmEventsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmEventsDelete(realm);
        }

        /// <summary>
        /// Test RealmEventsGet
        /// </summary>
        [Fact]
        public void RealmEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string _client = null;
            //string dateFrom = null;
            //string dateTo = null;
            //int? first = null;
            //string ipAddress = null;
            //int? max = null;
            //List<string> type = null;
            //string user = null;
            //var response = instance.RealmEventsGet(realm, _client, dateFrom, dateTo, first, ipAddress, max, type, user);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmGet
        /// </summary>
        [Fact]
        public void RealmGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmGet(realm);
            //Assert.IsType<RealmRepresentation>(response);
        }

        /// <summary>
        /// Test RealmGroupByPathPathGet
        /// </summary>
        [Fact]
        public void RealmGroupByPathPathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string path = null;
            //var response = instance.RealmGroupByPathPathGet(realm, path);
            //Assert.IsType<GroupRepresentation>(response);
        }

        /// <summary>
        /// Test RealmLdapServerCapabilitiesPost
        /// </summary>
        [Fact]
        public void RealmLdapServerCapabilitiesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //TestLdapConnectionRepresentation testLdapConnectionRepresentation = null;
            //instance.RealmLdapServerCapabilitiesPost(realm, testLdapConnectionRepresentation);
        }

        /// <summary>
        /// Test RealmLocalizationGet
        /// </summary>
        [Fact]
        public void RealmLocalizationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmLocalizationGet(realm);
            //Assert.IsType<List<Dictionary<string, Object>>>(response);
        }

        /// <summary>
        /// Test RealmLocalizationLocaleDelete
        /// </summary>
        [Fact]
        public void RealmLocalizationLocaleDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string locale = null;
            //instance.RealmLocalizationLocaleDelete(realm, locale);
        }

        /// <summary>
        /// Test RealmLocalizationLocaleGet
        /// </summary>
        [Fact]
        public void RealmLocalizationLocaleGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string locale = null;
            //var response = instance.RealmLocalizationLocaleGet(realm, locale);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RealmLocalizationLocaleKeyDelete
        /// </summary>
        [Fact]
        public void RealmLocalizationLocaleKeyDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string locale = null;
            //string key = null;
            //instance.RealmLocalizationLocaleKeyDelete(realm, locale, key);
        }

        /// <summary>
        /// Test RealmLocalizationLocaleKeyGet
        /// </summary>
        [Fact]
        public void RealmLocalizationLocaleKeyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string locale = null;
            //string key = null;
            //var response = instance.RealmLocalizationLocaleKeyGet(realm, locale, key);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test RealmLocalizationLocaleKeyPut
        /// </summary>
        [Fact]
        public void RealmLocalizationLocaleKeyPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string locale = null;
            //string key = null;
            //string body = null;
            //instance.RealmLocalizationLocaleKeyPut(realm, locale, key, body);
        }

        /// <summary>
        /// Test RealmLocalizationLocalePost
        /// </summary>
        [Fact]
        public void RealmLocalizationLocalePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string locale = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmLocalizationLocalePost(realm, locale, requestBody);
        }

        /// <summary>
        /// Test RealmLogoutAllPost
        /// </summary>
        [Fact]
        public void RealmLogoutAllPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmLogoutAllPost(realm);
            //Assert.IsType<GlobalRequestResult>(response);
        }

        /// <summary>
        /// Test RealmPartialExportPost
        /// </summary>
        [Fact]
        public void RealmPartialExportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //bool? exportClients = null;
            //bool? exportGroupsAndRoles = null;
            //var response = instance.RealmPartialExportPost(realm, exportClients, exportGroupsAndRoles);
            //Assert.IsType<RealmRepresentation>(response);
        }

        /// <summary>
        /// Test RealmPartialImportPost
        /// </summary>
        [Fact]
        public void RealmPartialImportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //PartialImportRepresentation partialImportRepresentation = null;
            //instance.RealmPartialImportPost(realm, partialImportRepresentation);
        }

        /// <summary>
        /// Test RealmPushRevocationPost
        /// </summary>
        [Fact]
        public void RealmPushRevocationPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //instance.RealmPushRevocationPost(realm);
        }

        /// <summary>
        /// Test RealmPut
        /// </summary>
        [Fact]
        public void RealmPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //RealmRepresentation realmRepresentation = null;
            //instance.RealmPut(realm, realmRepresentation);
        }

        /// <summary>
        /// Test RealmSessionsSessionDelete
        /// </summary>
        [Fact]
        public void RealmSessionsSessionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //string session = null;
            //instance.RealmSessionsSessionDelete(realm, session);
        }

        /// <summary>
        /// Test RealmTestLDAPConnectionPost
        /// </summary>
        [Fact]
        public void RealmTestLDAPConnectionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //TestLdapConnectionRepresentation testLdapConnectionRepresentation = null;
            //instance.RealmTestLDAPConnectionPost(realm, testLdapConnectionRepresentation);
        }

        /// <summary>
        /// Test RealmTestSMTPConnectionPost
        /// </summary>
        [Fact]
        public void RealmTestSMTPConnectionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RealmTestSMTPConnectionPost(realm, requestBody);
        }

        /// <summary>
        /// Test RealmUsersManagementPermissionsGet
        /// </summary>
        [Fact]
        public void RealmUsersManagementPermissionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //var response = instance.RealmUsersManagementPermissionsGet(realm);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RealmUsersManagementPermissionsPut
        /// </summary>
        [Fact]
        public void RealmUsersManagementPermissionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string realm = null;
            //ManagementPermissionReference managementPermissionReference = null;
            //var response = instance.RealmUsersManagementPermissionsPut(realm, managementPermissionReference);
            //Assert.IsType<ManagementPermissionReference>(response);
        }

        /// <summary>
        /// Test RootPost
        /// </summary>
        [Fact]
        public void RootPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RealmRepresentation realmRepresentation = null;
            //instance.RootPost(realmRepresentation);
        }
    }
}
