/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Horseless.Keycloak.Admin.Rest.Client;
using Horseless.Keycloak.Admin.Rest.Model;

namespace Horseless.Keycloak.Admin.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientRoleMappingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmGroupsIdRoleMappingsClientsClientAvailableGet(string realm, string id, string _client);

        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmGroupsIdRoleMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?));

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?));
        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmGroupsIdRoleMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmGroupsIdRoleMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmGroupsIdRoleMappingsClientsClientGet(string realm, string id, string _client);

        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmGroupsIdRoleMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmGroupsIdRoleMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmUsersIdRoleMappingsClientsClientAvailableGet(string realm, string id, string _client);

        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmUsersIdRoleMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?));

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?));
        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmUsersIdRoleMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmUsersIdRoleMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmUsersIdRoleMappingsClientsClientGet(string realm, string id, string _client);

        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmUsersIdRoleMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmUsersIdRoleMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientRoleMappingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmGroupsIdRoleMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmGroupsIdRoleMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmGroupsIdRoleMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmGroupsIdRoleMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmGroupsIdRoleMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmGroupsIdRoleMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmGroupsIdRoleMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get available client-level roles that can be mapped to the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmUsersIdRoleMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmUsersIdRoleMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmUsersIdRoleMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete client-level roles from user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmUsersIdRoleMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client-level role mappings for the user, and the app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmUsersIdRoleMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmUsersIdRoleMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add client-level roles to the user role mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmUsersIdRoleMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientRoleMappingsApi : IClientRoleMappingsApiSync, IClientRoleMappingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientRoleMappingsApi : IClientRoleMappingsApi
    {
        private Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientRoleMappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientRoleMappingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientRoleMappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientRoleMappingsApi(string basePath)
        {
            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                new Horseless.Keycloak.Admin.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientRoleMappingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientRoleMappingsApi(Horseless.Keycloak.Admin.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientRoleMappingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientRoleMappingsApi(Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient client, Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient asyncClient, Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmGroupsIdRoleMappingsClientsClientAvailableGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmGroupsIdRoleMappingsClientsClientAvailableGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientAvailableGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/groups/{id}/role-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmGroupsIdRoleMappingsClientsClientAvailableGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmGroupsIdRoleMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientAvailableGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/groups/{id}/role-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmGroupsIdRoleMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmGroupsIdRoleMappingsClientsClientCompositeGetWithHttpInfo(realm, id, _client, briefRepresentation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientCompositeGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/groups/{id}/role-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmGroupsIdRoleMappingsClientsClientCompositeGetWithHttpInfoAsync(realm, id, _client, briefRepresentation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmGroupsIdRoleMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientCompositeGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/groups/{id}/role-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmGroupsIdRoleMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmGroupsIdRoleMappingsClientsClientDeleteWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmGroupsIdRoleMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/groups/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmGroupsIdRoleMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmGroupsIdRoleMappingsClientsClientDeleteWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmGroupsIdRoleMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/groups/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmGroupsIdRoleMappingsClientsClientGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmGroupsIdRoleMappingsClientsClientGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/groups/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmGroupsIdRoleMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmGroupsIdRoleMappingsClientsClientGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmGroupsIdRoleMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/groups/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmGroupsIdRoleMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmGroupsIdRoleMappingsClientsClientPostWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmGroupsIdRoleMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/groups/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmGroupsIdRoleMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmGroupsIdRoleMappingsClientsClientPostWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id"></param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmGroupsIdRoleMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmGroupsIdRoleMappingsClientsClientPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/groups/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupsIdRoleMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmUsersIdRoleMappingsClientsClientAvailableGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmUsersIdRoleMappingsClientsClientAvailableGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientAvailableGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/users/{id}/role-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmUsersIdRoleMappingsClientsClientAvailableGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available client-level roles that can be mapped to the user 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmUsersIdRoleMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientAvailableGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/users/{id}/role-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmUsersIdRoleMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmUsersIdRoleMappingsClientsClientCompositeGetWithHttpInfo(realm, id, _client, briefRepresentation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientCompositeGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/users/{id}/role-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmUsersIdRoleMappingsClientsClientCompositeGetWithHttpInfoAsync(realm, id, _client, briefRepresentation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client-level role mappings   This recurses any composite roles 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmUsersIdRoleMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientCompositeGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/users/{id}/role-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmUsersIdRoleMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmUsersIdRoleMappingsClientsClientDeleteWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmUsersIdRoleMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/users/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmUsersIdRoleMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmUsersIdRoleMappingsClientsClientDeleteWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete client-level roles from user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmUsersIdRoleMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/users/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmUsersIdRoleMappingsClientsClientGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmUsersIdRoleMappingsClientsClientGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/users/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmUsersIdRoleMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmUsersIdRoleMappingsClientsClientGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client-level role mappings for the user, and the app 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmUsersIdRoleMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/users/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmUsersIdRoleMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmUsersIdRoleMappingsClientsClientPostWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmUsersIdRoleMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/users/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmUsersIdRoleMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmUsersIdRoleMappingsClientsClientPostWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add client-level roles to the user role mapping 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">User id</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmUsersIdRoleMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ClientRoleMappingsApi->RealmUsersIdRoleMappingsClientsClientPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/users/{id}/role-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersIdRoleMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
