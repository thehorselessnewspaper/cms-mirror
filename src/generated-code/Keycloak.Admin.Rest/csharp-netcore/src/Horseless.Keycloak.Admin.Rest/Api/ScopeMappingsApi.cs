/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Horseless.Keycloak.Admin.Rest.Client;
using Horseless.Keycloak.Admin.Rest.Model;

namespace Horseless.Keycloak.Admin.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScopeMappingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsClientsClientAvailableGet(string realm, string id, string _client);

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?));

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?));
        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesIdScopeMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesIdScopeMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsClientsClientGet(string realm, string id, string _client);

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesIdScopeMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesIdScopeMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsRealmAvailableGet(string realm, string id);

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmAvailableGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsRealmCompositeGet(string realm, string id, bool? briefRepresentation = default(bool?));

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmCompositeGetWithHttpInfo(string realm, string id, bool? briefRepresentation = default(bool?));
        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesIdScopeMappingsRealmDelete(string realm, string id, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesIdScopeMappingsRealmDeleteWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsRealmGet(string realm, string id);

        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesIdScopeMappingsRealmPost(string realm, string id, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesIdScopeMappingsRealmPostWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdScopeMappingsClientsClientAvailableGet(string realm, string id, string _client);

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdScopeMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?));

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?));
        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdScopeMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdScopeMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdScopeMappingsClientsClientGet(string realm, string id, string _client);

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client);
        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdScopeMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdScopeMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdScopeMappingsRealmAvailableGet(string realm, string id);

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmAvailableGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdScopeMappingsRealmCompositeGet(string realm, string id, bool? briefRepresentation = default(bool?));

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmCompositeGetWithHttpInfo(string realm, string id, bool? briefRepresentation = default(bool?));
        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdScopeMappingsRealmDelete(string realm, string id, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdScopeMappingsRealmDeleteWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation);
        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdScopeMappingsRealmGet(string realm, string id);

        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdScopeMappingsRealmPost(string realm, string id, List<RoleRepresentation> roleRepresentation);

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdScopeMappingsRealmPostWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScopeMappingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesIdScopeMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesIdScopeMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmAvailableGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsRealmAvailableGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmCompositeGetAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsRealmCompositeGetWithHttpInfoAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsRealmDeleteAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesIdScopeMappingsRealmDeleteWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsRealmGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsRealmPostAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesIdScopeMappingsRealmPostWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdScopeMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove client-level roles from the client’s scope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdScopeMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdScopeMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add client-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdScopeMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmAvailableGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsRealmAvailableGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmCompositeGetAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsRealmCompositeGetWithHttpInfoAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdScopeMappingsRealmDeleteAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdScopeMappingsRealmDeleteWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm-level roles associated with the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsRealmGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdScopeMappingsRealmPostAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdScopeMappingsRealmPostWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScopeMappingsApi : IScopeMappingsApiSync, IScopeMappingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScopeMappingsApi : IScopeMappingsApi
    {
        private Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeMappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScopeMappingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeMappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScopeMappingsApi(string basePath)
        {
            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                new Horseless.Keycloak.Admin.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeMappingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScopeMappingsApi(Horseless.Keycloak.Admin.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeMappingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScopeMappingsApi(Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient client, Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient asyncClient, Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsClientsClientAvailableGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdScopeMappingsClientsClientAvailableGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientAvailableGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdScopeMappingsClientsClientAvailableGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientAvailableGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdScopeMappingsClientsClientCompositeGetWithHttpInfo(realm, id, _client, briefRepresentation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientCompositeGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdScopeMappingsClientsClientCompositeGetWithHttpInfoAsync(realm, id, _client, briefRepresentation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientCompositeGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesIdScopeMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientScopesIdScopeMappingsClientsClientDeleteWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesIdScopeMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesIdScopeMappingsClientsClientDeleteWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesIdScopeMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsClientsClientGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdScopeMappingsClientsClientGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdScopeMappingsClientsClientGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesIdScopeMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientScopesIdScopeMappingsClientsClientPostWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesIdScopeMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesIdScopeMappingsClientsClientPostWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesIdScopeMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsClientsClientPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsRealmAvailableGet(string realm, string id)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdScopeMappingsRealmAvailableGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmAvailableGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmAvailableGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/realm/available", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmAvailableGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdScopeMappingsRealmAvailableGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsRealmAvailableGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmAvailableGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/realm/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsRealmCompositeGet(string realm, string id, bool? briefRepresentation = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdScopeMappingsRealmCompositeGetWithHttpInfo(realm, id, briefRepresentation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmCompositeGetWithHttpInfo(string realm, string id, bool? briefRepresentation = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmCompositeGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/realm/composite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmCompositeGetAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdScopeMappingsRealmCompositeGetWithHttpInfoAsync(realm, id, briefRepresentation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsRealmCompositeGetWithHttpInfoAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmCompositeGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/realm/composite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesIdScopeMappingsRealmDelete(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientScopesIdScopeMappingsRealmDeleteWithHttpInfo(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesIdScopeMappingsRealmDeleteWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/client-scopes/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsRealmDeleteAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesIdScopeMappingsRealmDeleteWithHttpInfoAsync(realm, id, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesIdScopeMappingsRealmDeleteWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/client-scopes/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdScopeMappingsRealmGet(string realm, string id)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdScopeMappingsRealmGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdScopeMappingsRealmGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdScopeMappingsRealmGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdScopeMappingsRealmGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesIdScopeMappingsRealmPost(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientScopesIdScopeMappingsRealmPostWithHttpInfo(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesIdScopeMappingsRealmPostWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/client-scopes/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesIdScopeMappingsRealmPostAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesIdScopeMappingsRealmPostWithHttpInfoAsync(realm, id, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesIdScopeMappingsRealmPostWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientScopesIdScopeMappingsRealmPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/client-scopes/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdScopeMappingsRealmPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdScopeMappingsClientsClientAvailableGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdScopeMappingsClientsClientAvailableGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientAvailableGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientAvailableGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientAvailableGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdScopeMappingsClientsClientAvailableGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsClientsClientAvailableGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientAvailableGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientAvailableGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/clients/{client}/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdScopeMappingsClientsClientCompositeGet(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdScopeMappingsClientsClientCompositeGetWithHttpInfo(realm, id, _client, briefRepresentation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientCompositeGetWithHttpInfo(string realm, string id, string _client, bool? briefRepresentation = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientCompositeGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientCompositeGetAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdScopeMappingsClientsClientCompositeGetWithHttpInfoAsync(realm, id, _client, briefRepresentation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective client roles   Returns the roles for the client that are associated with the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsClientsClientCompositeGetWithHttpInfoAsync(string realm, string id, string _client, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientCompositeGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientCompositeGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/clients/{client}/composite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdScopeMappingsClientsClientDelete(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientsIdScopeMappingsClientsClientDeleteWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsIdScopeMappingsClientsClientDeleteWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/clients/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdScopeMappingsClientsClientDeleteAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdScopeMappingsClientsClientDeleteWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove client-level roles from the client’s scope. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsIdScopeMappingsClientsClientDeleteWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/clients/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdScopeMappingsClientsClientGet(string realm, string id, string _client)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdScopeMappingsClientsClientGetWithHttpInfo(realm, id, _client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientGetWithHttpInfo(string realm, string id, string _client)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsClientsClientGetAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdScopeMappingsClientsClientGetWithHttpInfoAsync(realm, id, _client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles associated with a client’s scope   Returns roles for the client. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsClientsClientGetWithHttpInfoAsync(string realm, string id, string _client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientGet");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdScopeMappingsClientsClientPost(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientsIdScopeMappingsClientsClientPostWithHttpInfo(realm, id, _client, roleRepresentation);
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsIdScopeMappingsClientsClientPostWithHttpInfo(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clients/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdScopeMappingsClientsClientPostAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdScopeMappingsClientsClientPostWithHttpInfoAsync(realm, id, _client, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add client-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="_client"></param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsIdScopeMappingsClientsClientPostWithHttpInfoAsync(string realm, string id, string _client, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter '_client' is set
            if (_client == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter '_client' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsClientsClientPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(_client)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clients/{id}/scope-mappings/clients/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsClientsClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdScopeMappingsRealmAvailableGet(string realm, string id)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdScopeMappingsRealmAvailableGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmAvailableGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmAvailableGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/realm/available", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmAvailableGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdScopeMappingsRealmAvailableGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles that are available to attach to this client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsRealmAvailableGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmAvailableGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmAvailableGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/realm/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmAvailableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdScopeMappingsRealmCompositeGet(string realm, string id, bool? briefRepresentation = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdScopeMappingsRealmCompositeGetWithHttpInfo(realm, id, briefRepresentation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmCompositeGetWithHttpInfo(string realm, string id, bool? briefRepresentation = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmCompositeGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/realm/composite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmCompositeGetAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdScopeMappingsRealmCompositeGetWithHttpInfoAsync(realm, id, briefRepresentation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsRealmCompositeGetWithHttpInfoAsync(string realm, string id, bool? briefRepresentation = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmCompositeGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmCompositeGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (briefRepresentation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "briefRepresentation", briefRepresentation));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/realm/composite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdScopeMappingsRealmDelete(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientsIdScopeMappingsRealmDeleteWithHttpInfo(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsIdScopeMappingsRealmDeleteWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/clients/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdScopeMappingsRealmDeleteAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdScopeMappingsRealmDeleteWithHttpInfoAsync(realm, id, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a set of realm-level roles from the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsIdScopeMappingsRealmDeleteWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmDelete");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/clients/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdScopeMappingsRealmGet(string realm, string id)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdScopeMappingsRealmGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdScopeMappingsRealmGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdScopeMappingsRealmGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm-level roles associated with the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdScopeMappingsRealmGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdScopeMappingsRealmPost(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            RealmClientsIdScopeMappingsRealmPostWithHttpInfo(realm, id, roleRepresentation);
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsIdScopeMappingsRealmPostWithHttpInfo(string realm, string id, List<RoleRepresentation> roleRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clients/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdScopeMappingsRealmPostAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdScopeMappingsRealmPostWithHttpInfoAsync(realm, id, roleRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a set of realm-level roles to the client’s scope 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="roleRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsIdScopeMappingsRealmPostWithHttpInfoAsync(string realm, string id, List<RoleRepresentation> roleRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmPost");
            }

            // verify the required parameter 'roleRepresentation' is set
            if (roleRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'roleRepresentation' when calling ScopeMappingsApi->RealmClientsIdScopeMappingsRealmPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = roleRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clients/{id}/scope-mappings/realm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdScopeMappingsRealmPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
