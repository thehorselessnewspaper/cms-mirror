/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Horseless.Keycloak.Admin.Rest.Client;
using Horseless.Keycloak.Admin.Rest.Model;

namespace Horseless.Keycloak.Admin.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IProtocolMappersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns></returns>
        void RealmClientScopesId1ProtocolMappersModelsId2Delete(string realm, string id1, string id2);

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfo(string realm, string id1, string id2);
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ProtocolMapperRepresentation</returns>
        ProtocolMapperRepresentation RealmClientScopesId1ProtocolMappersModelsId2Get(string realm, string id1, string id2);

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of ProtocolMapperRepresentation</returns>
        ApiResponse<ProtocolMapperRepresentation> RealmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfo(string realm, string id1, string id2);
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesId1ProtocolMappersModelsId2Put(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation);

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfo(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation);
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesIdProtocolMappersAddModelsPost(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation);

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesIdProtocolMappersAddModelsPostWithHttpInfo(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation);
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdProtocolMappersModelsGet(string realm, string id);

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersModelsGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        void RealmClientScopesIdProtocolMappersModelsPost(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation);

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientScopesIdProtocolMappersModelsPostWithHttpInfo(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation);
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientScopesIdProtocolMappersProtocolProtocolGet(string realm, string id, string protocol);

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfo(string realm, string id, string protocol);
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns></returns>
        void RealmClientsId1ProtocolMappersModelsId2Delete(string realm, string id1, string id2);

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfo(string realm, string id1, string id2);
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ProtocolMapperRepresentation</returns>
        ProtocolMapperRepresentation RealmClientsId1ProtocolMappersModelsId2Get(string realm, string id1, string id2);

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of ProtocolMapperRepresentation</returns>
        ApiResponse<ProtocolMapperRepresentation> RealmClientsId1ProtocolMappersModelsId2GetWithHttpInfo(string realm, string id1, string id2);
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        void RealmClientsId1ProtocolMappersModelsId2Put(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation);

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsId1ProtocolMappersModelsId2PutWithHttpInfo(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation);
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdProtocolMappersAddModelsPost(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation);

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdProtocolMappersAddModelsPostWithHttpInfo(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation);
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdProtocolMappersModelsGet(string realm, string id);

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersModelsGetWithHttpInfo(string realm, string id);
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        void RealmClientsIdProtocolMappersModelsPost(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation);

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientsIdProtocolMappersModelsPostWithHttpInfo(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation);
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientsIdProtocolMappersProtocolProtocolGet(string realm, string id, string protocol);

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfo(string realm, string id, string protocol);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IProtocolMappersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesId1ProtocolMappersModelsId2DeleteAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProtocolMapperRepresentation</returns>
        System.Threading.Tasks.Task<ProtocolMapperRepresentation> RealmClientScopesId1ProtocolMappersModelsId2GetAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProtocolMapperRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtocolMapperRepresentation>> RealmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesId1ProtocolMappersModelsId2PutAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfoAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesIdProtocolMappersAddModelsPostAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesIdProtocolMappersAddModelsPostWithHttpInfoAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersModelsGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdProtocolMappersModelsGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientScopesIdProtocolMappersModelsPostAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientScopesIdProtocolMappersModelsPostWithHttpInfoAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersProtocolProtocolGetAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfoAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsId1ProtocolMappersModelsId2DeleteAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProtocolMapperRepresentation</returns>
        System.Threading.Tasks.Task<ProtocolMapperRepresentation> RealmClientsId1ProtocolMappersModelsId2GetAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProtocolMapperRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtocolMapperRepresentation>> RealmClientsId1ProtocolMappersModelsId2GetWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsId1ProtocolMappersModelsId2PutAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsId1ProtocolMappersModelsId2PutWithHttpInfoAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdProtocolMappersAddModelsPostAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdProtocolMappersAddModelsPostWithHttpInfoAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersModelsGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get mappers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdProtocolMappersModelsGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientsIdProtocolMappersModelsPostAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientsIdProtocolMappersModelsPostWithHttpInfoAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersProtocolProtocolGetAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfoAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IProtocolMappersApi : IProtocolMappersApiSync, IProtocolMappersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class ProtocolMappersApi : IProtocolMappersApi
    {
        private Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolMappersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtocolMappersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolMappersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtocolMappersApi(string basePath)
        {
            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                new Horseless.Keycloak.Admin.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolMappersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProtocolMappersApi(Horseless.Keycloak.Admin.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolMappersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProtocolMappersApi(Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient client, Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient asyncClient, Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns></returns>
        public void RealmClientScopesId1ProtocolMappersModelsId2Delete(string realm, string id1, string id2)
        {
            RealmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfo(realm, id1, id2);
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfo(string realm, string id1, string id2)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Delete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesId1ProtocolMappersModelsId2Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesId1ProtocolMappersModelsId2DeleteAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfoAsync(realm, id1, id2, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesId1ProtocolMappersModelsId2DeleteWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Delete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesId1ProtocolMappersModelsId2Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ProtocolMapperRepresentation</returns>
        public ProtocolMapperRepresentation RealmClientScopesId1ProtocolMappersModelsId2Get(string realm, string id1, string id2)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation> localVarResponse = RealmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfo(realm, id1, id2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of ProtocolMapperRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation> RealmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfo(string realm, string id1, string id2)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Get");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProtocolMapperRepresentation>("/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesId1ProtocolMappersModelsId2Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProtocolMapperRepresentation</returns>
        public async System.Threading.Tasks.Task<ProtocolMapperRepresentation> RealmClientScopesId1ProtocolMappersModelsId2GetAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation> localVarResponse = await RealmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfoAsync(realm, id1, id2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProtocolMapperRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation>> RealmClientScopesId1ProtocolMappersModelsId2GetWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Get");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProtocolMapperRepresentation>("/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesId1ProtocolMappersModelsId2Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesId1ProtocolMappersModelsId2Put(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            RealmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfo(realm, id1, id2, protocolMapperRepresentation);
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfo(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesId1ProtocolMappersModelsId2Put", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesId1ProtocolMappersModelsId2PutAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfoAsync(realm, id1, id2, protocolMapperRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesId1ProtocolMappersModelsId2PutWithHttpInfoAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientScopesId1ProtocolMappersModelsId2Put");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesId1ProtocolMappersModelsId2Put", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesIdProtocolMappersAddModelsPost(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation)
        {
            RealmClientScopesIdProtocolMappersAddModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesIdProtocolMappersAddModelsPostWithHttpInfo(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersAddModelsPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/client-scopes/{id}/protocol-mappers/add-models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersAddModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesIdProtocolMappersAddModelsPostAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesIdProtocolMappersAddModelsPostWithHttpInfoAsync(realm, id, protocolMapperRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesIdProtocolMappersAddModelsPostWithHttpInfoAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersAddModelsPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/client-scopes/{id}/protocol-mappers/add-models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersAddModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdProtocolMappersModelsGet(string realm, string id)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdProtocolMappersModelsGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersModelsGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersModelsGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdProtocolMappersModelsGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdProtocolMappersModelsGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        public void RealmClientScopesIdProtocolMappersModelsPost(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            RealmClientScopesIdProtocolMappersModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientScopesIdProtocolMappersModelsPostWithHttpInfo(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/client-scopes/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientScopesIdProtocolMappersModelsPostAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientScopesIdProtocolMappersModelsPostWithHttpInfoAsync(realm, id, protocolMapperRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientScopesIdProtocolMappersModelsPostWithHttpInfoAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersModelsPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/client-scopes/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientScopesIdProtocolMappersProtocolProtocolGet(string realm, string id, string protocol)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfo(realm, id, protocol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfo(string realm, string id, string protocol)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'protocol' is set
            if (protocol == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocol' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersProtocolProtocolGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("protocol", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(protocol)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersProtocolProtocolGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientScopesIdProtocolMappersProtocolProtocolGetAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfoAsync(realm, id, protocol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client scope (not name)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientScopesIdProtocolMappersProtocolProtocolGetWithHttpInfoAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'protocol' is set
            if (protocol == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocol' when calling ProtocolMappersApi->RealmClientScopesIdProtocolMappersProtocolProtocolGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("protocol", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(protocol)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientScopesIdProtocolMappersProtocolProtocolGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns></returns>
        public void RealmClientsId1ProtocolMappersModelsId2Delete(string realm, string id1, string id2)
        {
            RealmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfo(realm, id1, id2);
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfo(string realm, string id1, string id2)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Delete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/clients/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsId1ProtocolMappersModelsId2Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsId1ProtocolMappersModelsId2DeleteAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfoAsync(realm, id1, id2, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsId1ProtocolMappersModelsId2DeleteWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Delete");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Delete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/clients/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsId1ProtocolMappersModelsId2Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ProtocolMapperRepresentation</returns>
        public ProtocolMapperRepresentation RealmClientsId1ProtocolMappersModelsId2Get(string realm, string id1, string id2)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation> localVarResponse = RealmClientsId1ProtocolMappersModelsId2GetWithHttpInfo(realm, id1, id2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <returns>ApiResponse of ProtocolMapperRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation> RealmClientsId1ProtocolMappersModelsId2GetWithHttpInfo(string realm, string id1, string id2)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Get");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProtocolMapperRepresentation>("/{realm}/clients/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsId1ProtocolMappersModelsId2Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProtocolMapperRepresentation</returns>
        public async System.Threading.Tasks.Task<ProtocolMapperRepresentation> RealmClientsId1ProtocolMappersModelsId2GetAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation> localVarResponse = await RealmClientsId1ProtocolMappersModelsId2GetWithHttpInfoAsync(realm, id1, id2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mapper by id 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProtocolMapperRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ProtocolMapperRepresentation>> RealmClientsId1ProtocolMappersModelsId2GetWithHttpInfoAsync(string realm, string id1, string id2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Get");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Get");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProtocolMapperRepresentation>("/{realm}/clients/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsId1ProtocolMappersModelsId2Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsId1ProtocolMappersModelsId2Put(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            RealmClientsId1ProtocolMappersModelsId2PutWithHttpInfo(realm, id1, id2, protocolMapperRepresentation);
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsId1ProtocolMappersModelsId2PutWithHttpInfo(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/clients/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsId1ProtocolMappersModelsId2Put", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsId1ProtocolMappersModelsId2PutAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsId1ProtocolMappersModelsId2PutWithHttpInfoAsync(realm, id1, id2, protocolMapperRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id1"></param>
        /// <param name="id2"></param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsId1ProtocolMappersModelsId2PutWithHttpInfoAsync(string realm, string id1, string id2, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id1' is set
            if (id1 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id1' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'id2' is set
            if (id2 == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id2' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientsId1ProtocolMappersModelsId2Put");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id1", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id1)); // path parameter
            localVarRequestOptions.PathParameters.Add("id2", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id2)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/clients/{id1}/protocol-mappers/models/{id2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsId1ProtocolMappersModelsId2Put", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdProtocolMappersAddModelsPost(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation)
        {
            RealmClientsIdProtocolMappersAddModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsIdProtocolMappersAddModelsPostWithHttpInfo(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersAddModelsPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clients/{id}/protocol-mappers/add-models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersAddModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdProtocolMappersAddModelsPostAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdProtocolMappersAddModelsPostWithHttpInfoAsync(realm, id, protocolMapperRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create multiple mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsIdProtocolMappersAddModelsPostWithHttpInfoAsync(string realm, string id, List<ProtocolMapperRepresentation> protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersAddModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersAddModelsPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clients/{id}/protocol-mappers/add-models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersAddModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdProtocolMappersModelsGet(string realm, string id)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdProtocolMappersModelsGetWithHttpInfo(realm, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersModelsGetWithHttpInfo(string realm, string id)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersModelsGetAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdProtocolMappersModelsGetWithHttpInfoAsync(realm, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdProtocolMappersModelsGetWithHttpInfoAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns></returns>
        public void RealmClientsIdProtocolMappersModelsPost(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            RealmClientsIdProtocolMappersModelsPostWithHttpInfo(realm, id, protocolMapperRepresentation);
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientsIdProtocolMappersModelsPostWithHttpInfo(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clients/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientsIdProtocolMappersModelsPostAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientsIdProtocolMappersModelsPostWithHttpInfoAsync(realm, id, protocolMapperRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a mapper 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocolMapperRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientsIdProtocolMappersModelsPostWithHttpInfoAsync(string realm, string id, ProtocolMapperRepresentation protocolMapperRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsPost");
            }

            // verify the required parameter 'protocolMapperRepresentation' is set
            if (protocolMapperRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocolMapperRepresentation' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersModelsPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = protocolMapperRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clients/{id}/protocol-mappers/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersModelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientsIdProtocolMappersProtocolProtocolGet(string realm, string id, string protocol)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfo(realm, id, protocol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfo(string realm, string id, string protocol)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'protocol' is set
            if (protocol == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocol' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersProtocolProtocolGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("protocol", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(protocol)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersProtocolProtocolGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientsIdProtocolMappersProtocolProtocolGetAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfoAsync(realm, id, protocol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mappers by name for a specific protocol 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="id">id of client (not client-id)</param>
        /// <param name="protocol"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientsIdProtocolMappersProtocolProtocolGetWithHttpInfoAsync(string realm, string id, string protocol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersProtocolProtocolGet");
            }

            // verify the required parameter 'protocol' is set
            if (protocol == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'protocol' when calling ProtocolMappersApi->RealmClientsIdProtocolMappersProtocolProtocolGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("protocol", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(protocol)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientsIdProtocolMappersProtocolProtocolGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
