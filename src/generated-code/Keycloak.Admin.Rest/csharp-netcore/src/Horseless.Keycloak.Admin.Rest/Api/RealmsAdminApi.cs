/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Horseless.Keycloak.Admin.Rest.Client;
using Horseless.Keycloak.Admin.Rest.Model;

namespace Horseless.Keycloak.Admin.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealmsAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmAdminEventsDelete(string realm);

        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmAdminEventsDeleteWithHttpInfo(string realm);
        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmAdminEventsGet(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>));

        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmAdminEventsGetWithHttpInfo(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>));
        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers)
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmClearKeysCachePost(string realm);

        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClearKeysCachePostWithHttpInfo(string realm);
        /// <summary>
        /// Clear realm cache
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmClearRealmCachePost(string realm);

        /// <summary>
        /// Clear realm cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClearRealmCachePostWithHttpInfo(string realm);
        /// <summary>
        /// Clear user cache
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmClearUserCachePost(string realm);

        /// <summary>
        /// Clear user cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClearUserCachePostWithHttpInfo(string realm);
        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <returns>ClientRepresentation</returns>
        ClientRepresentation RealmClientDescriptionConverterPost(string realm, string body);

        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ClientRepresentation</returns>
        ApiResponse<ClientRepresentation> RealmClientDescriptionConverterPostWithHttpInfo(string realm, string body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ClientPoliciesRepresentation</returns>
        ClientPoliciesRepresentation RealmClientPoliciesPoliciesGet(string realm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of ClientPoliciesRepresentation</returns>
        ApiResponse<ClientPoliciesRepresentation> RealmClientPoliciesPoliciesGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <returns></returns>
        void RealmClientPoliciesPoliciesPut(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientPoliciesPoliciesPutWithHttpInfo(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <returns>ClientProfilesRepresentation</returns>
        ClientProfilesRepresentation RealmClientPoliciesProfilesGet(string realm, bool? includeGlobalProfiles = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <returns>ApiResponse of ClientProfilesRepresentation</returns>
        ApiResponse<ClientProfilesRepresentation> RealmClientPoliciesProfilesGetWithHttpInfo(string realm, bool? includeGlobalProfiles = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <returns></returns>
        void RealmClientPoliciesProfilesPut(string realm, ClientProfilesRepresentation clientProfilesRepresentation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmClientPoliciesProfilesPutWithHttpInfo(string realm, ClientProfilesRepresentation clientProfilesRepresentation);
        /// <summary>
        /// Get client session stats   Returns a JSON map.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmClientSessionStatsGet(string realm);

        /// <summary>
        /// Get client session stats   Returns a JSON map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmClientSessionStatsGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmCredentialRegistratorsGet(string realm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmCredentialRegistratorsGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        void RealmDefaultDefaultClientScopesClientScopeIdDelete(string realm, string clientScopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDefaultDefaultClientScopesClientScopeIdDeleteWithHttpInfo(string realm, string clientScopeId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        void RealmDefaultDefaultClientScopesClientScopeIdPut(string realm, string clientScopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDefaultDefaultClientScopesClientScopeIdPutWithHttpInfo(string realm, string clientScopeId);
        /// <summary>
        /// Get realm default client scopes.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmDefaultDefaultClientScopesGet(string realm);

        /// <summary>
        /// Get realm default client scopes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmDefaultDefaultClientScopesGetWithHttpInfo(string realm);
        /// <summary>
        /// Get group hierarchy.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmDefaultGroupsGet(string realm);

        /// <summary>
        /// Get group hierarchy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmDefaultGroupsGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        void RealmDefaultGroupsGroupIdDelete(string realm, string groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDefaultGroupsGroupIdDeleteWithHttpInfo(string realm, string groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        void RealmDefaultGroupsGroupIdPut(string realm, string groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDefaultGroupsGroupIdPutWithHttpInfo(string realm, string groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        void RealmDefaultOptionalClientScopesClientScopeIdDelete(string realm, string clientScopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDefaultOptionalClientScopesClientScopeIdDeleteWithHttpInfo(string realm, string clientScopeId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        void RealmDefaultOptionalClientScopesClientScopeIdPut(string realm, string clientScopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDefaultOptionalClientScopesClientScopeIdPutWithHttpInfo(string realm, string clientScopeId);
        /// <summary>
        /// Get realm optional client scopes.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmDefaultOptionalClientScopesGet(string realm);

        /// <summary>
        /// Get realm optional client scopes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmDefaultOptionalClientScopesGetWithHttpInfo(string realm);
        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmDelete(string realm);

        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmDeleteWithHttpInfo(string realm);
        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>RealmEventsConfigRepresentation</returns>
        RealmEventsConfigRepresentation RealmEventsConfigGet(string realm);

        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of RealmEventsConfigRepresentation</returns>
        ApiResponse<RealmEventsConfigRepresentation> RealmEventsConfigGetWithHttpInfo(string realm);
        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <returns></returns>
        void RealmEventsConfigPut(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation);

        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmEventsConfigPutWithHttpInfo(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation);
        /// <summary>
        /// Delete all events
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmEventsDelete(string realm);

        /// <summary>
        /// Delete all events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmEventsDeleteWithHttpInfo(string realm);
        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmEventsGet(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string));

        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmEventsGetWithHttpInfo(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string));
        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>RealmRepresentation</returns>
        RealmRepresentation RealmGet(string realm);

        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of RealmRepresentation</returns>
        ApiResponse<RealmRepresentation> RealmGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <returns>GroupRepresentation</returns>
        GroupRepresentation RealmGroupByPathPathGet(string realm, string path);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <returns>ApiResponse of GroupRepresentation</returns>
        ApiResponse<GroupRepresentation> RealmGroupByPathPathGetWithHttpInfo(string realm, string path);
        /// <summary>
        /// Get LDAP supported extensions.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <returns></returns>
        void RealmLdapServerCapabilitiesPost(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation);

        /// <summary>
        /// Get LDAP supported extensions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmLdapServerCapabilitiesPostWithHttpInfo(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> RealmLocalizationGet(string realm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> RealmLocalizationGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns></returns>
        void RealmLocalizationLocaleDelete(string realm, string locale);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmLocalizationLocaleDeleteWithHttpInfo(string realm, string locale);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RealmLocalizationLocaleGet(string realm, string locale);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RealmLocalizationLocaleGetWithHttpInfo(string realm, string locale);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        void RealmLocalizationLocaleKeyDelete(string realm, string locale, string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmLocalizationLocaleKeyDeleteWithHttpInfo(string realm, string locale, string key);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns>string</returns>
        string RealmLocalizationLocaleKeyGet(string realm, string locale, string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RealmLocalizationLocaleKeyGetWithHttpInfo(string realm, string locale, string key);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        void RealmLocalizationLocaleKeyPut(string realm, string locale, string key, string body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmLocalizationLocaleKeyPutWithHttpInfo(string realm, string locale, string key, string body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        void RealmLocalizationLocalePost(string realm, string locale, Dictionary<string, Object> requestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmLocalizationLocalePostWithHttpInfo(string realm, string locale, Dictionary<string, Object> requestBody);
        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>GlobalRequestResult</returns>
        GlobalRequestResult RealmLogoutAllPost(string realm);

        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of GlobalRequestResult</returns>
        ApiResponse<GlobalRequestResult> RealmLogoutAllPostWithHttpInfo(string realm);
        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <returns>RealmRepresentation</returns>
        RealmRepresentation RealmPartialExportPost(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?));

        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <returns>ApiResponse of RealmRepresentation</returns>
        ApiResponse<RealmRepresentation> RealmPartialExportPostWithHttpInfo(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?));
        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <returns></returns>
        void RealmPartialImportPost(string realm, PartialImportRepresentation partialImportRepresentation);

        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmPartialImportPostWithHttpInfo(string realm, PartialImportRepresentation partialImportRepresentation);
        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        void RealmPushRevocationPost(string realm);

        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmPushRevocationPostWithHttpInfo(string realm);
        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <returns></returns>
        void RealmPut(string realm, RealmRepresentation realmRepresentation);

        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmPutWithHttpInfo(string realm, RealmRepresentation realmRepresentation);
        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <returns></returns>
        void RealmSessionsSessionDelete(string realm, string session);

        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmSessionsSessionDeleteWithHttpInfo(string realm, string session);
        /// <summary>
        /// Test LDAP connection
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <returns></returns>
        void RealmTestLDAPConnectionPost(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation);

        /// <summary>
        /// Test LDAP connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmTestLDAPConnectionPostWithHttpInfo(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        void RealmTestSMTPConnectionPost(string realm, Dictionary<string, Object> requestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RealmTestSMTPConnectionPostWithHttpInfo(string realm, Dictionary<string, Object> requestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ManagementPermissionReference</returns>
        ManagementPermissionReference RealmUsersManagementPermissionsGet(string realm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        ApiResponse<ManagementPermissionReference> RealmUsersManagementPermissionsGetWithHttpInfo(string realm);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ManagementPermissionReference</returns>
        ManagementPermissionReference RealmUsersManagementPermissionsPut(string realm, ManagementPermissionReference managementPermissionReference);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        ApiResponse<ManagementPermissionReference> RealmUsersManagementPermissionsPutWithHttpInfo(string realm, ManagementPermissionReference managementPermissionReference);
        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm.
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <returns></returns>
        void RootPost(RealmRepresentation realmRepresentation);

        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RootPostWithHttpInfo(RealmRepresentation realmRepresentation);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealmsAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmAdminEventsDeleteAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmAdminEventsDeleteWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAdminEventsGetAsync(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmAdminEventsGetWithHttpInfoAsync(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClearKeysCachePostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClearKeysCachePostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear realm cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClearRealmCachePostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear realm cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClearRealmCachePostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear user cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClearUserCachePostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear user cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClearUserCachePostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientRepresentation</returns>
        System.Threading.Tasks.Task<ClientRepresentation> RealmClientDescriptionConverterPostAsync(string realm, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientRepresentation>> RealmClientDescriptionConverterPostWithHttpInfoAsync(string realm, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientPoliciesRepresentation</returns>
        System.Threading.Tasks.Task<ClientPoliciesRepresentation> RealmClientPoliciesPoliciesGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientPoliciesRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientPoliciesRepresentation>> RealmClientPoliciesPoliciesGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientPoliciesPoliciesPutAsync(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientPoliciesPoliciesPutWithHttpInfoAsync(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProfilesRepresentation</returns>
        System.Threading.Tasks.Task<ClientProfilesRepresentation> RealmClientPoliciesProfilesGetAsync(string realm, bool? includeGlobalProfiles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProfilesRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientProfilesRepresentation>> RealmClientPoliciesProfilesGetWithHttpInfoAsync(string realm, bool? includeGlobalProfiles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmClientPoliciesProfilesPutAsync(string realm, ClientProfilesRepresentation clientProfilesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmClientPoliciesProfilesPutWithHttpInfoAsync(string realm, ClientProfilesRepresentation clientProfilesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get client session stats   Returns a JSON map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientSessionStatsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client session stats   Returns a JSON map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmClientSessionStatsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmCredentialRegistratorsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmCredentialRegistratorsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDefaultDefaultClientScopesClientScopeIdDeleteAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDefaultDefaultClientScopesClientScopeIdDeleteWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDefaultDefaultClientScopesClientScopeIdPutAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDefaultDefaultClientScopesClientScopeIdPutWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm default client scopes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmDefaultDefaultClientScopesGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm default client scopes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmDefaultDefaultClientScopesGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get group hierarchy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmDefaultGroupsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get group hierarchy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmDefaultGroupsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDefaultGroupsGroupIdDeleteAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDefaultGroupsGroupIdDeleteWithHttpInfoAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDefaultGroupsGroupIdPutAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDefaultGroupsGroupIdPutWithHttpInfoAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDefaultOptionalClientScopesClientScopeIdDeleteAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDefaultOptionalClientScopesClientScopeIdDeleteWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDefaultOptionalClientScopesClientScopeIdPutAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDefaultOptionalClientScopesClientScopeIdPutWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get realm optional client scopes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmDefaultOptionalClientScopesGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get realm optional client scopes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmDefaultOptionalClientScopesGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmDeleteAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmDeleteWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RealmEventsConfigRepresentation</returns>
        System.Threading.Tasks.Task<RealmEventsConfigRepresentation> RealmEventsConfigGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RealmEventsConfigRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RealmEventsConfigRepresentation>> RealmEventsConfigGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmEventsConfigPutAsync(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmEventsConfigPutWithHttpInfoAsync(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmEventsDeleteAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmEventsDeleteWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmEventsGetAsync(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmEventsGetWithHttpInfoAsync(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RealmRepresentation</returns>
        System.Threading.Tasks.Task<RealmRepresentation> RealmGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RealmRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RealmRepresentation>> RealmGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupRepresentation</returns>
        System.Threading.Tasks.Task<GroupRepresentation> RealmGroupByPathPathGetAsync(string realm, string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupRepresentation>> RealmGroupByPathPathGetWithHttpInfoAsync(string realm, string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get LDAP supported extensions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmLdapServerCapabilitiesPostAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get LDAP supported extensions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmLdapServerCapabilitiesPostWithHttpInfoAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmLocalizationGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> RealmLocalizationGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmLocalizationLocaleDeleteAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmLocalizationLocaleDeleteWithHttpInfoAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RealmLocalizationLocaleGetAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RealmLocalizationLocaleGetWithHttpInfoAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmLocalizationLocaleKeyDeleteAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmLocalizationLocaleKeyDeleteWithHttpInfoAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RealmLocalizationLocaleKeyGetAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RealmLocalizationLocaleKeyGetWithHttpInfoAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmLocalizationLocaleKeyPutAsync(string realm, string locale, string key, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmLocalizationLocaleKeyPutWithHttpInfoAsync(string realm, string locale, string key, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmLocalizationLocalePostAsync(string realm, string locale, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmLocalizationLocalePostWithHttpInfoAsync(string realm, string locale, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalRequestResult</returns>
        System.Threading.Tasks.Task<GlobalRequestResult> RealmLogoutAllPostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalRequestResult>> RealmLogoutAllPostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RealmRepresentation</returns>
        System.Threading.Tasks.Task<RealmRepresentation> RealmPartialExportPostAsync(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RealmRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RealmRepresentation>> RealmPartialExportPostWithHttpInfoAsync(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmPartialImportPostAsync(string realm, PartialImportRepresentation partialImportRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmPartialImportPostWithHttpInfoAsync(string realm, PartialImportRepresentation partialImportRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmPushRevocationPostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmPushRevocationPostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmPutAsync(string realm, RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmPutWithHttpInfoAsync(string realm, RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmSessionsSessionDeleteAsync(string realm, string session, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmSessionsSessionDeleteWithHttpInfoAsync(string realm, string session, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test LDAP connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmTestLDAPConnectionPostAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test LDAP connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmTestLDAPConnectionPostWithHttpInfoAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RealmTestSMTPConnectionPostAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RealmTestSMTPConnectionPostWithHttpInfoAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        System.Threading.Tasks.Task<ManagementPermissionReference> RealmUsersManagementPermissionsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementPermissionReference>> RealmUsersManagementPermissionsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        System.Threading.Tasks.Task<ManagementPermissionReference> RealmUsersManagementPermissionsPutAsync(string realm, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementPermissionReference>> RealmUsersManagementPermissionsPutWithHttpInfoAsync(string realm, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RootPostAsync(RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RootPostWithHttpInfoAsync(RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealmsAdminApi : IRealmsAdminApiSync, IRealmsAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RealmsAdminApi : IRealmsAdminApi
    {
        private Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RealmsAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RealmsAdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealmsAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RealmsAdminApi(string basePath)
        {
            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                new Horseless.Keycloak.Admin.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealmsAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RealmsAdminApi(Horseless.Keycloak.Admin.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Horseless.Keycloak.Admin.Rest.Client.Configuration.MergeConfigurations(
                Horseless.Keycloak.Admin.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Horseless.Keycloak.Admin.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealmsAdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RealmsAdminApi(Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient client, Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient asyncClient, Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Horseless.Keycloak.Admin.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Horseless.Keycloak.Admin.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Horseless.Keycloak.Admin.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete all admin events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmAdminEventsDelete(string realm)
        {
            RealmAdminEventsDeleteWithHttpInfo(realm);
        }

        /// <summary>
        /// Delete all admin events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmAdminEventsDeleteWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmAdminEventsDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/admin-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAdminEventsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all admin events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmAdminEventsDeleteAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmAdminEventsDeleteWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all admin events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmAdminEventsDeleteWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmAdminEventsDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/admin-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAdminEventsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmAdminEventsGet(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmAdminEventsGetWithHttpInfo(realm, authClient, authIpAddress, authRealm, authUser, dateFrom, dateTo, first, max, operationTypes, resourcePath, resourceTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmAdminEventsGetWithHttpInfo(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmAdminEventsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (authClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authClient", authClient));
            }
            if (authIpAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authIpAddress", authIpAddress));
            }
            if (authRealm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authRealm", authRealm));
            }
            if (authUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authUser", authUser));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (operationTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "operationTypes", operationTypes));
            }
            if (resourcePath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "resourcePath", resourcePath));
            }
            if (resourceTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "resourceTypes", resourceTypes));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/admin-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAdminEventsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmAdminEventsGetAsync(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmAdminEventsGetWithHttpInfoAsync(realm, authClient, authIpAddress, authRealm, authUser, dateFrom, dateTo, first, max, operationTypes, resourcePath, resourceTypes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authClient"> (optional)</param>
        /// <param name="authIpAddress"> (optional)</param>
        /// <param name="authRealm"> (optional)</param>
        /// <param name="authUser">user id (optional)</param>
        /// <param name="dateFrom"> (optional)</param>
        /// <param name="dateTo"> (optional)</param>
        /// <param name="first"> (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="operationTypes"> (optional)</param>
        /// <param name="resourcePath"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmAdminEventsGetWithHttpInfoAsync(string realm, string authClient = default(string), string authIpAddress = default(string), string authRealm = default(string), string authUser = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), int? max = default(int?), List<string> operationTypes = default(List<string>), string resourcePath = default(string), List<string> resourceTypes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmAdminEventsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (authClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authClient", authClient));
            }
            if (authIpAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authIpAddress", authIpAddress));
            }
            if (authRealm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authRealm", authRealm));
            }
            if (authUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "authUser", authUser));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (operationTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "operationTypes", operationTypes));
            }
            if (resourcePath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "resourcePath", resourcePath));
            }
            if (resourceTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "resourceTypes", resourceTypes));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/admin-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmAdminEventsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers) 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmClearKeysCachePost(string realm)
        {
            RealmClearKeysCachePostWithHttpInfo(realm);
        }

        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers) 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClearKeysCachePostWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClearKeysCachePost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clear-keys-cache", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClearKeysCachePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers) 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClearKeysCachePostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClearKeysCachePostWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clear cache of external public keys (Public keys of clients or Identity providers) 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClearKeysCachePostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClearKeysCachePost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clear-keys-cache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClearKeysCachePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear realm cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmClearRealmCachePost(string realm)
        {
            RealmClearRealmCachePostWithHttpInfo(realm);
        }

        /// <summary>
        /// Clear realm cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClearRealmCachePostWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClearRealmCachePost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clear-realm-cache", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClearRealmCachePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear realm cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClearRealmCachePostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClearRealmCachePostWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clear realm cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClearRealmCachePostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClearRealmCachePost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clear-realm-cache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClearRealmCachePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear user cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmClearUserCachePost(string realm)
        {
            RealmClearUserCachePostWithHttpInfo(realm);
        }

        /// <summary>
        /// Clear user cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClearUserCachePostWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClearUserCachePost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/clear-user-cache", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClearUserCachePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear user cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClearUserCachePostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClearUserCachePostWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clear user cache 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClearUserCachePostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClearUserCachePost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/clear-user-cache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClearUserCachePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Base path for importing clients under this realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <returns>ClientRepresentation</returns>
        public ClientRepresentation RealmClientDescriptionConverterPost(string realm, string body)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientRepresentation> localVarResponse = RealmClientDescriptionConverterPostWithHttpInfo(realm, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Base path for importing clients under this realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ClientRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientRepresentation> RealmClientDescriptionConverterPostWithHttpInfo(string realm, string body)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientDescriptionConverterPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'body' when calling RealmsAdminApi->RealmClientDescriptionConverterPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientRepresentation>("/{realm}/client-description-converter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientDescriptionConverterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Base path for importing clients under this realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientRepresentation</returns>
        public async System.Threading.Tasks.Task<ClientRepresentation> RealmClientDescriptionConverterPostAsync(string realm, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientRepresentation> localVarResponse = await RealmClientDescriptionConverterPostWithHttpInfoAsync(realm, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Base path for importing clients under this realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientRepresentation>> RealmClientDescriptionConverterPostWithHttpInfoAsync(string realm, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientDescriptionConverterPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'body' when calling RealmsAdminApi->RealmClientDescriptionConverterPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientRepresentation>("/{realm}/client-description-converter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientDescriptionConverterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ClientPoliciesRepresentation</returns>
        public ClientPoliciesRepresentation RealmClientPoliciesPoliciesGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientPoliciesRepresentation> localVarResponse = RealmClientPoliciesPoliciesGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of ClientPoliciesRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientPoliciesRepresentation> RealmClientPoliciesPoliciesGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesPoliciesGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientPoliciesRepresentation>("/{realm}/client-policies/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesPoliciesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientPoliciesRepresentation</returns>
        public async System.Threading.Tasks.Task<ClientPoliciesRepresentation> RealmClientPoliciesPoliciesGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientPoliciesRepresentation> localVarResponse = await RealmClientPoliciesPoliciesGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientPoliciesRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientPoliciesRepresentation>> RealmClientPoliciesPoliciesGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesPoliciesGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientPoliciesRepresentation>("/{realm}/client-policies/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesPoliciesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <returns></returns>
        public void RealmClientPoliciesPoliciesPut(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation)
        {
            RealmClientPoliciesPoliciesPutWithHttpInfo(realm, clientPoliciesRepresentation);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientPoliciesPoliciesPutWithHttpInfo(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesPoliciesPut");
            }

            // verify the required parameter 'clientPoliciesRepresentation' is set
            if (clientPoliciesRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientPoliciesRepresentation' when calling RealmsAdminApi->RealmClientPoliciesPoliciesPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = clientPoliciesRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/client-policies/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesPoliciesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientPoliciesPoliciesPutAsync(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientPoliciesPoliciesPutWithHttpInfoAsync(realm, clientPoliciesRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientPoliciesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientPoliciesPoliciesPutWithHttpInfoAsync(string realm, ClientPoliciesRepresentation clientPoliciesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesPoliciesPut");
            }

            // verify the required parameter 'clientPoliciesRepresentation' is set
            if (clientPoliciesRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientPoliciesRepresentation' when calling RealmsAdminApi->RealmClientPoliciesPoliciesPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = clientPoliciesRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/client-policies/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesPoliciesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <returns>ClientProfilesRepresentation</returns>
        public ClientProfilesRepresentation RealmClientPoliciesProfilesGet(string realm, bool? includeGlobalProfiles = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientProfilesRepresentation> localVarResponse = RealmClientPoliciesProfilesGetWithHttpInfo(realm, includeGlobalProfiles);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <returns>ApiResponse of ClientProfilesRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientProfilesRepresentation> RealmClientPoliciesProfilesGetWithHttpInfo(string realm, bool? includeGlobalProfiles = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesProfilesGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (includeGlobalProfiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "include-global-profiles", includeGlobalProfiles));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientProfilesRepresentation>("/{realm}/client-policies/profiles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesProfilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProfilesRepresentation</returns>
        public async System.Threading.Tasks.Task<ClientProfilesRepresentation> RealmClientPoliciesProfilesGetAsync(string realm, bool? includeGlobalProfiles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientProfilesRepresentation> localVarResponse = await RealmClientPoliciesProfilesGetWithHttpInfoAsync(realm, includeGlobalProfiles, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="includeGlobalProfiles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProfilesRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ClientProfilesRepresentation>> RealmClientPoliciesProfilesGetWithHttpInfoAsync(string realm, bool? includeGlobalProfiles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesProfilesGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (includeGlobalProfiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "include-global-profiles", includeGlobalProfiles));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientProfilesRepresentation>("/{realm}/client-policies/profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesProfilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <returns></returns>
        public void RealmClientPoliciesProfilesPut(string realm, ClientProfilesRepresentation clientProfilesRepresentation)
        {
            RealmClientPoliciesProfilesPutWithHttpInfo(realm, clientProfilesRepresentation);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmClientPoliciesProfilesPutWithHttpInfo(string realm, ClientProfilesRepresentation clientProfilesRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesProfilesPut");
            }

            // verify the required parameter 'clientProfilesRepresentation' is set
            if (clientProfilesRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientProfilesRepresentation' when calling RealmsAdminApi->RealmClientPoliciesProfilesPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = clientProfilesRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/client-policies/profiles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesProfilesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmClientPoliciesProfilesPutAsync(string realm, ClientProfilesRepresentation clientProfilesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmClientPoliciesProfilesPutWithHttpInfoAsync(realm, clientProfilesRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientProfilesRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmClientPoliciesProfilesPutWithHttpInfoAsync(string realm, ClientProfilesRepresentation clientProfilesRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientPoliciesProfilesPut");
            }

            // verify the required parameter 'clientProfilesRepresentation' is set
            if (clientProfilesRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientProfilesRepresentation' when calling RealmsAdminApi->RealmClientPoliciesProfilesPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = clientProfilesRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/client-policies/profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientPoliciesProfilesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client session stats   Returns a JSON map. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmClientSessionStatsGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmClientSessionStatsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client session stats   Returns a JSON map. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmClientSessionStatsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientSessionStatsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/client-session-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientSessionStatsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client session stats   Returns a JSON map. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmClientSessionStatsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmClientSessionStatsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client session stats   Returns a JSON map. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmClientSessionStatsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmClientSessionStatsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/client-session-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmClientSessionStatsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmCredentialRegistratorsGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmCredentialRegistratorsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmCredentialRegistratorsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmCredentialRegistratorsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/credential-registrators", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmCredentialRegistratorsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmCredentialRegistratorsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmCredentialRegistratorsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmCredentialRegistratorsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmCredentialRegistratorsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/credential-registrators", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmCredentialRegistratorsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        public void RealmDefaultDefaultClientScopesClientScopeIdDelete(string realm, string clientScopeId)
        {
            RealmDefaultDefaultClientScopesClientScopeIdDeleteWithHttpInfo(realm, clientScopeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDefaultDefaultClientScopesClientScopeIdDeleteWithHttpInfo(string realm, string clientScopeId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdDelete");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/default-default-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultDefaultClientScopesClientScopeIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDefaultDefaultClientScopesClientScopeIdDeleteAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDefaultDefaultClientScopesClientScopeIdDeleteWithHttpInfoAsync(realm, clientScopeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDefaultDefaultClientScopesClientScopeIdDeleteWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdDelete");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/default-default-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultDefaultClientScopesClientScopeIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        public void RealmDefaultDefaultClientScopesClientScopeIdPut(string realm, string clientScopeId)
        {
            RealmDefaultDefaultClientScopesClientScopeIdPutWithHttpInfo(realm, clientScopeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDefaultDefaultClientScopesClientScopeIdPutWithHttpInfo(string realm, string clientScopeId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdPut");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/default-default-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultDefaultClientScopesClientScopeIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDefaultDefaultClientScopesClientScopeIdPutAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDefaultDefaultClientScopesClientScopeIdPutWithHttpInfoAsync(realm, clientScopeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDefaultDefaultClientScopesClientScopeIdPutWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdPut");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesClientScopeIdPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/default-default-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultDefaultClientScopesClientScopeIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm default client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmDefaultDefaultClientScopesGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmDefaultDefaultClientScopesGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm default client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmDefaultDefaultClientScopesGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/default-default-client-scopes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultDefaultClientScopesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm default client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmDefaultDefaultClientScopesGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmDefaultDefaultClientScopesGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm default client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmDefaultDefaultClientScopesGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultDefaultClientScopesGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/default-default-client-scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultDefaultClientScopesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group hierarchy. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmDefaultGroupsGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmDefaultGroupsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group hierarchy. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmDefaultGroupsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultGroupsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/default-groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group hierarchy. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmDefaultGroupsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmDefaultGroupsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group hierarchy. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmDefaultGroupsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultGroupsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/default-groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public void RealmDefaultGroupsGroupIdDelete(string realm, string groupId)
        {
            RealmDefaultGroupsGroupIdDeleteWithHttpInfo(realm, groupId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDefaultGroupsGroupIdDeleteWithHttpInfo(string realm, string groupId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdDelete");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'groupId' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/default-groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultGroupsGroupIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDefaultGroupsGroupIdDeleteAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDefaultGroupsGroupIdDeleteWithHttpInfoAsync(realm, groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDefaultGroupsGroupIdDeleteWithHttpInfoAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdDelete");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'groupId' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/default-groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultGroupsGroupIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public void RealmDefaultGroupsGroupIdPut(string realm, string groupId)
        {
            RealmDefaultGroupsGroupIdPutWithHttpInfo(realm, groupId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDefaultGroupsGroupIdPutWithHttpInfo(string realm, string groupId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdPut");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'groupId' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/default-groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultGroupsGroupIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDefaultGroupsGroupIdPutAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDefaultGroupsGroupIdPutWithHttpInfoAsync(realm, groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDefaultGroupsGroupIdPutWithHttpInfoAsync(string realm, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdPut");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'groupId' when calling RealmsAdminApi->RealmDefaultGroupsGroupIdPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/default-groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultGroupsGroupIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        public void RealmDefaultOptionalClientScopesClientScopeIdDelete(string realm, string clientScopeId)
        {
            RealmDefaultOptionalClientScopesClientScopeIdDeleteWithHttpInfo(realm, clientScopeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDefaultOptionalClientScopesClientScopeIdDeleteWithHttpInfo(string realm, string clientScopeId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdDelete");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/default-optional-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultOptionalClientScopesClientScopeIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDefaultOptionalClientScopesClientScopeIdDeleteAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDefaultOptionalClientScopesClientScopeIdDeleteWithHttpInfoAsync(realm, clientScopeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDefaultOptionalClientScopesClientScopeIdDeleteWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdDelete");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/default-optional-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultOptionalClientScopesClientScopeIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns></returns>
        public void RealmDefaultOptionalClientScopesClientScopeIdPut(string realm, string clientScopeId)
        {
            RealmDefaultOptionalClientScopesClientScopeIdPutWithHttpInfo(realm, clientScopeId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDefaultOptionalClientScopesClientScopeIdPutWithHttpInfo(string realm, string clientScopeId)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdPut");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/default-optional-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultOptionalClientScopesClientScopeIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDefaultOptionalClientScopesClientScopeIdPutAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDefaultOptionalClientScopesClientScopeIdPutWithHttpInfoAsync(realm, clientScopeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientScopeId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDefaultOptionalClientScopesClientScopeIdPutWithHttpInfoAsync(string realm, string clientScopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdPut");
            }

            // verify the required parameter 'clientScopeId' is set
            if (clientScopeId == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'clientScopeId' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesClientScopeIdPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientScopeId", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(clientScopeId)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/default-optional-client-scopes/{clientScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultOptionalClientScopesClientScopeIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm optional client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmDefaultOptionalClientScopesGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmDefaultOptionalClientScopesGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm optional client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmDefaultOptionalClientScopesGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/default-optional-client-scopes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultOptionalClientScopesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get realm optional client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmDefaultOptionalClientScopesGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmDefaultOptionalClientScopesGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get realm optional client scopes. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmDefaultOptionalClientScopesGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDefaultOptionalClientScopesGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/default-optional-client-scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDefaultOptionalClientScopesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the realm 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmDelete(string realm)
        {
            RealmDeleteWithHttpInfo(realm);
        }

        /// <summary>
        /// Delete the realm 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmDeleteWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the realm 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmDeleteAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmDeleteWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the realm 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmDeleteWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>RealmEventsConfigRepresentation</returns>
        public RealmEventsConfigRepresentation RealmEventsConfigGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmEventsConfigRepresentation> localVarResponse = RealmEventsConfigGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of RealmEventsConfigRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmEventsConfigRepresentation> RealmEventsConfigGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsConfigGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RealmEventsConfigRepresentation>("/{realm}/events/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RealmEventsConfigRepresentation</returns>
        public async System.Threading.Tasks.Task<RealmEventsConfigRepresentation> RealmEventsConfigGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmEventsConfigRepresentation> localVarResponse = await RealmEventsConfigGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the events provider configuration   Returns JSON object with events provider configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RealmEventsConfigRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmEventsConfigRepresentation>> RealmEventsConfigGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsConfigGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RealmEventsConfigRepresentation>("/{realm}/events/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <returns></returns>
        public void RealmEventsConfigPut(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation)
        {
            RealmEventsConfigPutWithHttpInfo(realm, realmEventsConfigRepresentation);
        }

        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmEventsConfigPutWithHttpInfo(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsConfigPut");
            }

            // verify the required parameter 'realmEventsConfigRepresentation' is set
            if (realmEventsConfigRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realmEventsConfigRepresentation' when calling RealmsAdminApi->RealmEventsConfigPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = realmEventsConfigRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/events/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsConfigPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmEventsConfigPutAsync(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmEventsConfigPutWithHttpInfoAsync(realm, realmEventsConfigRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the events provider   Change the events provider and/or its configuration 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmEventsConfigRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmEventsConfigPutWithHttpInfoAsync(string realm, RealmEventsConfigRepresentation realmEventsConfigRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsConfigPut");
            }

            // verify the required parameter 'realmEventsConfigRepresentation' is set
            if (realmEventsConfigRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realmEventsConfigRepresentation' when calling RealmsAdminApi->RealmEventsConfigPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = realmEventsConfigRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/events/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsConfigPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmEventsDelete(string realm)
        {
            RealmEventsDeleteWithHttpInfo(realm);
        }

        /// <summary>
        /// Delete all events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmEventsDeleteWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmEventsDeleteAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmEventsDeleteWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all events 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmEventsDeleteWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmEventsGet(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmEventsGetWithHttpInfo(realm, _client, dateFrom, dateTo, first, ipAddress, max, type, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmEventsGetWithHttpInfo(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (_client != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "client", _client));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (ipAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmEventsGetAsync(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmEventsGetWithHttpInfoAsync(realm, _client, dateFrom, dateTo, first, ipAddress, max, type, user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get events   Returns all events, or filters them based on URL query parameters listed here 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="_client">App or oauth client name (optional)</param>
        /// <param name="dateFrom">From date (optional)</param>
        /// <param name="dateTo">To date (optional)</param>
        /// <param name="first">Paging offset (optional)</param>
        /// <param name="ipAddress">IP address (optional)</param>
        /// <param name="max">Maximum results size (defaults to 100) (optional)</param>
        /// <param name="type">The types of events to return (optional)</param>
        /// <param name="user">User id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmEventsGetWithHttpInfoAsync(string realm, string _client = default(string), string dateFrom = default(string), string dateTo = default(string), int? first = default(int?), string ipAddress = default(string), int? max = default(int?), List<string> type = default(List<string>), string user = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmEventsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (_client != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "client", _client));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (first != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "first", first));
            }
            if (ipAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmEventsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>RealmRepresentation</returns>
        public RealmRepresentation RealmGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation> localVarResponse = RealmGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of RealmRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation> RealmGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RealmRepresentation>("/{realm}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RealmRepresentation</returns>
        public async System.Threading.Tasks.Task<RealmRepresentation> RealmGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation> localVarResponse = await RealmGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the top-level representation of the realm   It will not include nested information like User and Client representations. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RealmRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation>> RealmGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RealmRepresentation>("/{realm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <returns>GroupRepresentation</returns>
        public GroupRepresentation RealmGroupByPathPathGet(string realm, string path)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GroupRepresentation> localVarResponse = RealmGroupByPathPathGetWithHttpInfo(realm, path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <returns>ApiResponse of GroupRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GroupRepresentation> RealmGroupByPathPathGetWithHttpInfo(string realm, string path)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmGroupByPathPathGet");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'path' when calling RealmsAdminApi->RealmGroupByPathPathGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupRepresentation>("/{realm}/group-by-path/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupByPathPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupRepresentation</returns>
        public async System.Threading.Tasks.Task<GroupRepresentation> RealmGroupByPathPathGetAsync(string realm, string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GroupRepresentation> localVarResponse = await RealmGroupByPathPathGetWithHttpInfoAsync(realm, path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GroupRepresentation>> RealmGroupByPathPathGetWithHttpInfoAsync(string realm, string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmGroupByPathPathGet");
            }

            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'path' when calling RealmsAdminApi->RealmGroupByPathPathGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupRepresentation>("/{realm}/group-by-path/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmGroupByPathPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get LDAP supported extensions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <returns></returns>
        public void RealmLdapServerCapabilitiesPost(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation)
        {
            RealmLdapServerCapabilitiesPostWithHttpInfo(realm, testLdapConnectionRepresentation);
        }

        /// <summary>
        /// Get LDAP supported extensions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmLdapServerCapabilitiesPostWithHttpInfo(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLdapServerCapabilitiesPost");
            }

            // verify the required parameter 'testLdapConnectionRepresentation' is set
            if (testLdapConnectionRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'testLdapConnectionRepresentation' when calling RealmsAdminApi->RealmLdapServerCapabilitiesPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = testLdapConnectionRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/ldap-server-capabilities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLdapServerCapabilitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get LDAP supported extensions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmLdapServerCapabilitiesPostAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmLdapServerCapabilitiesPostWithHttpInfoAsync(realm, testLdapConnectionRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get LDAP supported extensions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation">LDAP configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmLdapServerCapabilitiesPostWithHttpInfoAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLdapServerCapabilitiesPost");
            }

            // verify the required parameter 'testLdapConnectionRepresentation' is set
            if (testLdapConnectionRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'testLdapConnectionRepresentation' when calling RealmsAdminApi->RealmLdapServerCapabilitiesPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = testLdapConnectionRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/ldap-server-capabilities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLdapServerCapabilitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> RealmLocalizationGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = RealmLocalizationGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> RealmLocalizationGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Dictionary<string, Object>>>("/{realm}/localization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> RealmLocalizationGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await RealmLocalizationGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<List<Dictionary<string, Object>>>> RealmLocalizationGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Dictionary<string, Object>>>("/{realm}/localization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns></returns>
        public void RealmLocalizationLocaleDelete(string realm, string locale)
        {
            RealmLocalizationLocaleDeleteWithHttpInfo(realm, locale);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmLocalizationLocaleDeleteWithHttpInfo(string realm, string locale)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleDelete");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/localization/{locale}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmLocalizationLocaleDeleteAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmLocalizationLocaleDeleteWithHttpInfoAsync(realm, locale, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmLocalizationLocaleDeleteWithHttpInfoAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleDelete");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/localization/{locale}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RealmLocalizationLocaleGet(string realm, string locale)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = RealmLocalizationLocaleGetWithHttpInfo(realm, locale);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Dictionary<string, Object>> RealmLocalizationLocaleGetWithHttpInfo(string realm, string locale)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleGet");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, Object>>("/{realm}/localization/{locale}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RealmLocalizationLocaleGetAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await RealmLocalizationLocaleGetWithHttpInfoAsync(realm, locale, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Dictionary<string, Object>>> RealmLocalizationLocaleGetWithHttpInfoAsync(string realm, string locale, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleGet");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, Object>>("/{realm}/localization/{locale}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public void RealmLocalizationLocaleKeyDelete(string realm, string locale, string key)
        {
            RealmLocalizationLocaleKeyDeleteWithHttpInfo(realm, locale, key);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmLocalizationLocaleKeyDeleteWithHttpInfo(string realm, string locale, string key)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleKeyDelete");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleKeyDelete");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'key' when calling RealmsAdminApi->RealmLocalizationLocaleKeyDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/localization/{locale}/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleKeyDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmLocalizationLocaleKeyDeleteAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmLocalizationLocaleKeyDeleteWithHttpInfoAsync(realm, locale, key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmLocalizationLocaleKeyDeleteWithHttpInfoAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleKeyDelete");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleKeyDelete");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'key' when calling RealmsAdminApi->RealmLocalizationLocaleKeyDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/localization/{locale}/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleKeyDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns>string</returns>
        public string RealmLocalizationLocaleKeyGet(string realm, string locale, string key)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<string> localVarResponse = RealmLocalizationLocaleKeyGetWithHttpInfo(realm, locale, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <returns>ApiResponse of string</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<string> RealmLocalizationLocaleKeyGetWithHttpInfo(string realm, string locale, string key)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleKeyGet");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleKeyGet");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'key' when calling RealmsAdminApi->RealmLocalizationLocaleKeyGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{realm}/localization/{locale}/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleKeyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RealmLocalizationLocaleKeyGetAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<string> localVarResponse = await RealmLocalizationLocaleKeyGetWithHttpInfoAsync(realm, locale, key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<string>> RealmLocalizationLocaleKeyGetWithHttpInfoAsync(string realm, string locale, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleKeyGet");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleKeyGet");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'key' when calling RealmsAdminApi->RealmLocalizationLocaleKeyGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(key)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{realm}/localization/{locale}/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleKeyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void RealmLocalizationLocaleKeyPut(string realm, string locale, string key, string body)
        {
            RealmLocalizationLocaleKeyPutWithHttpInfo(realm, locale, key, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmLocalizationLocaleKeyPutWithHttpInfo(string realm, string locale, string key, string body)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'key' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'body' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}/localization/{locale}/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleKeyPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmLocalizationLocaleKeyPutAsync(string realm, string locale, string key, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmLocalizationLocaleKeyPutWithHttpInfoAsync(realm, locale, key, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="key"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmLocalizationLocaleKeyPutWithHttpInfoAsync(string realm, string locale, string key, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'key' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'body' when calling RealmsAdminApi->RealmLocalizationLocaleKeyPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}/localization/{locale}/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocaleKeyPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        public void RealmLocalizationLocalePost(string realm, string locale, Dictionary<string, Object> requestBody)
        {
            RealmLocalizationLocalePostWithHttpInfo(realm, locale, requestBody);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmLocalizationLocalePostWithHttpInfo(string realm, string locale, Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocalePost");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocalePost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'requestBody' when calling RealmsAdminApi->RealmLocalizationLocalePost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/localization/{locale}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocalePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmLocalizationLocalePostAsync(string realm, string locale, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmLocalizationLocalePostWithHttpInfoAsync(realm, locale, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="locale"></param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmLocalizationLocalePostWithHttpInfoAsync(string realm, string locale, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLocalizationLocalePost");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'locale' when calling RealmsAdminApi->RealmLocalizationLocalePost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'requestBody' when calling RealmsAdminApi->RealmLocalizationLocalePost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/localization/{locale}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLocalizationLocalePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes all user sessions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>GlobalRequestResult</returns>
        public GlobalRequestResult RealmLogoutAllPost(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GlobalRequestResult> localVarResponse = RealmLogoutAllPostWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes all user sessions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of GlobalRequestResult</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GlobalRequestResult> RealmLogoutAllPostWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLogoutAllPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GlobalRequestResult>("/{realm}/logout-all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLogoutAllPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes all user sessions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalRequestResult</returns>
        public async System.Threading.Tasks.Task<GlobalRequestResult> RealmLogoutAllPostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GlobalRequestResult> localVarResponse = await RealmLogoutAllPostWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes all user sessions. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalRequestResult)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<GlobalRequestResult>> RealmLogoutAllPostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmLogoutAllPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GlobalRequestResult>("/{realm}/logout-all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmLogoutAllPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial export of existing realm into a JSON file. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <returns>RealmRepresentation</returns>
        public RealmRepresentation RealmPartialExportPost(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation> localVarResponse = RealmPartialExportPostWithHttpInfo(realm, exportClients, exportGroupsAndRoles);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partial export of existing realm into a JSON file. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <returns>ApiResponse of RealmRepresentation</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation> RealmPartialExportPostWithHttpInfo(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPartialExportPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (exportClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "exportClients", exportClients));
            }
            if (exportGroupsAndRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "exportGroupsAndRoles", exportGroupsAndRoles));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RealmRepresentation>("/{realm}/partial-export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPartialExportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial export of existing realm into a JSON file. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RealmRepresentation</returns>
        public async System.Threading.Tasks.Task<RealmRepresentation> RealmPartialExportPostAsync(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation> localVarResponse = await RealmPartialExportPostWithHttpInfoAsync(realm, exportClients, exportGroupsAndRoles, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partial export of existing realm into a JSON file. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exportClients"> (optional)</param>
        /// <param name="exportGroupsAndRoles"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RealmRepresentation)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<RealmRepresentation>> RealmPartialExportPostWithHttpInfoAsync(string realm, bool? exportClients = default(bool?), bool? exportGroupsAndRoles = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPartialExportPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            if (exportClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "exportClients", exportClients));
            }
            if (exportGroupsAndRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToMultiMap("", "exportGroupsAndRoles", exportGroupsAndRoles));
            }

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RealmRepresentation>("/{realm}/partial-export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPartialExportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial import from a JSON file to an existing realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <returns></returns>
        public void RealmPartialImportPost(string realm, PartialImportRepresentation partialImportRepresentation)
        {
            RealmPartialImportPostWithHttpInfo(realm, partialImportRepresentation);
        }

        /// <summary>
        /// Partial import from a JSON file to an existing realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmPartialImportPostWithHttpInfo(string realm, PartialImportRepresentation partialImportRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPartialImportPost");
            }

            // verify the required parameter 'partialImportRepresentation' is set
            if (partialImportRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'partialImportRepresentation' when calling RealmsAdminApi->RealmPartialImportPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = partialImportRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/partialImport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPartialImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partial import from a JSON file to an existing realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmPartialImportPostAsync(string realm, PartialImportRepresentation partialImportRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmPartialImportPostWithHttpInfoAsync(realm, partialImportRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Partial import from a JSON file to an existing realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="partialImportRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmPartialImportPostWithHttpInfoAsync(string realm, PartialImportRepresentation partialImportRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPartialImportPost");
            }

            // verify the required parameter 'partialImportRepresentation' is set
            if (partialImportRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'partialImportRepresentation' when calling RealmsAdminApi->RealmPartialImportPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = partialImportRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/partialImport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPartialImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns></returns>
        public void RealmPushRevocationPost(string realm)
        {
            RealmPushRevocationPostWithHttpInfo(realm);
        }

        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmPushRevocationPostWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPushRevocationPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/push-revocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPushRevocationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmPushRevocationPostAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmPushRevocationPostWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Push the realm’s revocation policy to any client that has an admin url associated with it. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmPushRevocationPostWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPushRevocationPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/push-revocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPushRevocationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <returns></returns>
        public void RealmPut(string realm, RealmRepresentation realmRepresentation)
        {
            RealmPutWithHttpInfo(realm, realmRepresentation);
        }

        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmPutWithHttpInfo(string realm, RealmRepresentation realmRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPut");
            }

            // verify the required parameter 'realmRepresentation' is set
            if (realmRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realmRepresentation' when calling RealmsAdminApi->RealmPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = realmRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{realm}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmPutAsync(string realm, RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmPutWithHttpInfoAsync(realm, realmRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="realmRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmPutWithHttpInfoAsync(string realm, RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmPut");
            }

            // verify the required parameter 'realmRepresentation' is set
            if (realmRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realmRepresentation' when calling RealmsAdminApi->RealmPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = realmRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{realm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific user session. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <returns></returns>
        public void RealmSessionsSessionDelete(string realm, string session)
        {
            RealmSessionsSessionDeleteWithHttpInfo(realm, session);
        }

        /// <summary>
        /// Remove a specific user session. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmSessionsSessionDeleteWithHttpInfo(string realm, string session)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmSessionsSessionDelete");
            }

            // verify the required parameter 'session' is set
            if (session == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'session' when calling RealmsAdminApi->RealmSessionsSessionDelete");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("session", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(session)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/{realm}/sessions/{session}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmSessionsSessionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific user session. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmSessionsSessionDeleteAsync(string realm, string session, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmSessionsSessionDeleteWithHttpInfoAsync(realm, session, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a specific user session. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="session"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmSessionsSessionDeleteWithHttpInfoAsync(string realm, string session, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmSessionsSessionDelete");
            }

            // verify the required parameter 'session' is set
            if (session == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'session' when calling RealmsAdminApi->RealmSessionsSessionDelete");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.PathParameters.Add("session", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(session)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/{realm}/sessions/{session}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmSessionsSessionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test LDAP connection 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <returns></returns>
        public void RealmTestLDAPConnectionPost(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation)
        {
            RealmTestLDAPConnectionPostWithHttpInfo(realm, testLdapConnectionRepresentation);
        }

        /// <summary>
        /// Test LDAP connection 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmTestLDAPConnectionPostWithHttpInfo(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmTestLDAPConnectionPost");
            }

            // verify the required parameter 'testLdapConnectionRepresentation' is set
            if (testLdapConnectionRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'testLdapConnectionRepresentation' when calling RealmsAdminApi->RealmTestLDAPConnectionPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = testLdapConnectionRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/testLDAPConnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmTestLDAPConnectionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test LDAP connection 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmTestLDAPConnectionPostAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmTestLDAPConnectionPostWithHttpInfoAsync(realm, testLdapConnectionRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test LDAP connection 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="testLdapConnectionRepresentation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmTestLDAPConnectionPostWithHttpInfoAsync(string realm, TestLdapConnectionRepresentation testLdapConnectionRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmTestLDAPConnectionPost");
            }

            // verify the required parameter 'testLdapConnectionRepresentation' is set
            if (testLdapConnectionRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'testLdapConnectionRepresentation' when calling RealmsAdminApi->RealmTestLDAPConnectionPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = testLdapConnectionRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/testLDAPConnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmTestLDAPConnectionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        public void RealmTestSMTPConnectionPost(string realm, Dictionary<string, Object> requestBody)
        {
            RealmTestSMTPConnectionPostWithHttpInfo(realm, requestBody);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RealmTestSMTPConnectionPostWithHttpInfo(string realm, Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmTestSMTPConnectionPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'requestBody' when calling RealmsAdminApi->RealmTestSMTPConnectionPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{realm}/testSMTPConnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmTestSMTPConnectionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RealmTestSMTPConnectionPostAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RealmTestSMTPConnectionPostWithHttpInfoAsync(realm, requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RealmTestSMTPConnectionPostWithHttpInfoAsync(string realm, Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmTestSMTPConnectionPost");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'requestBody' when calling RealmsAdminApi->RealmTestSMTPConnectionPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{realm}/testSMTPConnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmTestSMTPConnectionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ManagementPermissionReference</returns>
        public ManagementPermissionReference RealmUsersManagementPermissionsGet(string realm)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference> localVarResponse = RealmUsersManagementPermissionsGetWithHttpInfo(realm);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference> RealmUsersManagementPermissionsGetWithHttpInfo(string realm)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmUsersManagementPermissionsGet");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementPermissionReference>("/{realm}/users-management-permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersManagementPermissionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        public async System.Threading.Tasks.Task<ManagementPermissionReference> RealmUsersManagementPermissionsGetAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference> localVarResponse = await RealmUsersManagementPermissionsGetWithHttpInfoAsync(realm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference>> RealmUsersManagementPermissionsGetWithHttpInfoAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmUsersManagementPermissionsGet");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementPermissionReference>("/{realm}/users-management-permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersManagementPermissionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ManagementPermissionReference</returns>
        public ManagementPermissionReference RealmUsersManagementPermissionsPut(string realm, ManagementPermissionReference managementPermissionReference)
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference> localVarResponse = RealmUsersManagementPermissionsPutWithHttpInfo(realm, managementPermissionReference);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <returns>ApiResponse of ManagementPermissionReference</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference> RealmUsersManagementPermissionsPutWithHttpInfo(string realm, ManagementPermissionReference managementPermissionReference)
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmUsersManagementPermissionsPut");
            }

            // verify the required parameter 'managementPermissionReference' is set
            if (managementPermissionReference == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'managementPermissionReference' when calling RealmsAdminApi->RealmUsersManagementPermissionsPut");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = managementPermissionReference;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementPermissionReference>("/{realm}/users-management-permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersManagementPermissionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementPermissionReference</returns>
        public async System.Threading.Tasks.Task<ManagementPermissionReference> RealmUsersManagementPermissionsPutAsync(string realm, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference> localVarResponse = await RealmUsersManagementPermissionsPutWithHttpInfoAsync(realm, managementPermissionReference, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="managementPermissionReference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementPermissionReference)</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<ManagementPermissionReference>> RealmUsersManagementPermissionsPutWithHttpInfoAsync(string realm, ManagementPermissionReference managementPermissionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realm' is set
            if (realm == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realm' when calling RealmsAdminApi->RealmUsersManagementPermissionsPut");
            }

            // verify the required parameter 'managementPermissionReference' is set
            if (managementPermissionReference == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'managementPermissionReference' when calling RealmsAdminApi->RealmUsersManagementPermissionsPut");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("realm", Horseless.Keycloak.Admin.Rest.Client.ClientUtils.ParameterToString(realm)); // path parameter
            localVarRequestOptions.Data = managementPermissionReference;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementPermissionReference>("/{realm}/users-management-permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RealmUsersManagementPermissionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <returns></returns>
        public void RootPost(RealmRepresentation realmRepresentation)
        {
            RootPostWithHttpInfo(realmRepresentation);
        }

        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object> RootPostWithHttpInfo(RealmRepresentation realmRepresentation)
        {
            // verify the required parameter 'realmRepresentation' is set
            if (realmRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realmRepresentation' when calling RealmsAdminApi->RootPost");
            }

            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = realmRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RootPostAsync(RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RootPostWithHttpInfoAsync(realmRepresentation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Import a realm   Imports a realm from a full representation of that realm. 
        /// </summary>
        /// <exception cref="Horseless.Keycloak.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="realmRepresentation">JSON representation of the realm</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Horseless.Keycloak.Admin.Rest.Client.ApiResponse<Object>> RootPostWithHttpInfoAsync(RealmRepresentation realmRepresentation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'realmRepresentation' is set
            if (realmRepresentation == null)
            {
                throw new Horseless.Keycloak.Admin.Rest.Client.ApiException(400, "Missing required parameter 'realmRepresentation' when calling RealmsAdminApi->RootPost");
            }


            Horseless.Keycloak.Admin.Rest.Client.RequestOptions localVarRequestOptions = new Horseless.Keycloak.Admin.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Horseless.Keycloak.Admin.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = realmRepresentation;

            // authentication (access_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
