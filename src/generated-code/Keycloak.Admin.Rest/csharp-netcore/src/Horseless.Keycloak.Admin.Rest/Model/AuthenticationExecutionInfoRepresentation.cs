/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Horseless.Keycloak.Admin.Rest.Client.OpenAPIDateConverter;

namespace Horseless.Keycloak.Admin.Rest.Model
{
    /// <summary>
    /// AuthenticationExecutionInfoRepresentation
    /// </summary>
    [DataContract(Name = "AuthenticationExecutionInfoRepresentation")]
    public partial class AuthenticationExecutionInfoRepresentation : IEquatable<AuthenticationExecutionInfoRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationExecutionInfoRepresentation" /> class.
        /// </summary>
        /// <param name="alias">alias.</param>
        /// <param name="authenticationConfig">authenticationConfig.</param>
        /// <param name="authenticationFlow">authenticationFlow.</param>
        /// <param name="configurable">configurable.</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="flowId">flowId.</param>
        /// <param name="id">id.</param>
        /// <param name="index">index.</param>
        /// <param name="level">level.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="requirement">requirement.</param>
        /// <param name="requirementChoices">requirementChoices.</param>
        public AuthenticationExecutionInfoRepresentation(string alias = default(string), string authenticationConfig = default(string), bool authenticationFlow = default(bool), bool configurable = default(bool), string description = default(string), string displayName = default(string), string flowId = default(string), string id = default(string), int index = default(int), int level = default(int), string providerId = default(string), string requirement = default(string), List<string> requirementChoices = default(List<string>))
        {
            this.Alias = alias;
            this.AuthenticationConfig = authenticationConfig;
            this.AuthenticationFlow = authenticationFlow;
            this.Configurable = configurable;
            this.Description = description;
            this.DisplayName = displayName;
            this.FlowId = flowId;
            this.Id = id;
            this.Index = index;
            this.Level = level;
            this.ProviderId = providerId;
            this.Requirement = requirement;
            this.RequirementChoices = requirementChoices;
        }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationConfig
        /// </summary>
        [DataMember(Name = "authenticationConfig", EmitDefaultValue = false)]
        public string AuthenticationConfig { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationFlow
        /// </summary>
        [DataMember(Name = "authenticationFlow", EmitDefaultValue = true)]
        public bool AuthenticationFlow { get; set; }

        /// <summary>
        /// Gets or Sets Configurable
        /// </summary>
        [DataMember(Name = "configurable", EmitDefaultValue = true)]
        public bool Configurable { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FlowId
        /// </summary>
        [DataMember(Name = "flowId", EmitDefaultValue = false)]
        public string FlowId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "providerId", EmitDefaultValue = false)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        [DataMember(Name = "requirement", EmitDefaultValue = false)]
        public string Requirement { get; set; }

        /// <summary>
        /// Gets or Sets RequirementChoices
        /// </summary>
        [DataMember(Name = "requirementChoices", EmitDefaultValue = false)]
        public List<string> RequirementChoices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticationExecutionInfoRepresentation {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  AuthenticationConfig: ").Append(AuthenticationConfig).Append("\n");
            sb.Append("  AuthenticationFlow: ").Append(AuthenticationFlow).Append("\n");
            sb.Append("  Configurable: ").Append(Configurable).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FlowId: ").Append(FlowId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("  RequirementChoices: ").Append(RequirementChoices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationExecutionInfoRepresentation);
        }

        /// <summary>
        /// Returns true if AuthenticationExecutionInfoRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationExecutionInfoRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationExecutionInfoRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.AuthenticationConfig == input.AuthenticationConfig ||
                    (this.AuthenticationConfig != null &&
                    this.AuthenticationConfig.Equals(input.AuthenticationConfig))
                ) && 
                (
                    this.AuthenticationFlow == input.AuthenticationFlow ||
                    this.AuthenticationFlow.Equals(input.AuthenticationFlow)
                ) && 
                (
                    this.Configurable == input.Configurable ||
                    this.Configurable.Equals(input.Configurable)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FlowId == input.FlowId ||
                    (this.FlowId != null &&
                    this.FlowId.Equals(input.FlowId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.Requirement == input.Requirement ||
                    (this.Requirement != null &&
                    this.Requirement.Equals(input.Requirement))
                ) && 
                (
                    this.RequirementChoices == input.RequirementChoices ||
                    this.RequirementChoices != null &&
                    input.RequirementChoices != null &&
                    this.RequirementChoices.SequenceEqual(input.RequirementChoices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                if (this.AuthenticationConfig != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationConfig.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthenticationFlow.GetHashCode();
                hashCode = (hashCode * 59) + this.Configurable.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.FlowId != null)
                {
                    hashCode = (hashCode * 59) + this.FlowId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Level.GetHashCode();
                if (this.ProviderId != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                }
                if (this.Requirement != null)
                {
                    hashCode = (hashCode * 59) + this.Requirement.GetHashCode();
                }
                if (this.RequirementChoices != null)
                {
                    hashCode = (hashCode * 59) + this.RequirementChoices.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
