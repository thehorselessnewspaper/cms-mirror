/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Horseless.Keycloak.Admin.Rest.Client.OpenAPIDateConverter;

namespace Horseless.Keycloak.Admin.Rest.Model
{
    /// <summary>
    /// UserRepresentation
    /// </summary>
    [DataContract(Name = "UserRepresentation")]
    internal partial class UserRepresentation : IEquatable<UserRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRepresentation" /> class.
        /// </summary>
        /// <param name="access">access.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="clientConsents">clientConsents.</param>
        /// <param name="clientRoles">clientRoles.</param>
        /// <param name="createdTimestamp">createdTimestamp.</param>
        /// <param name="credentials">credentials.</param>
        /// <param name="disableableCredentialTypes">disableableCredentialTypes.</param>
        /// <param name="email">email.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="federatedIdentities">federatedIdentities.</param>
        /// <param name="federationLink">federationLink.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="groups">groups.</param>
        /// <param name="id">id.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="notBefore">notBefore.</param>
        /// <param name="origin">origin.</param>
        /// <param name="realmRoles">realmRoles.</param>
        /// <param name="requiredActions">requiredActions.</param>
        /// <param name="self">self.</param>
        /// <param name="serviceAccountClientId">serviceAccountClientId.</param>
        /// <param name="username">username.</param>
        public UserRepresentation(Dictionary<string, Object> access = default(Dictionary<string, Object>), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), List<UserConsentRepresentation> clientConsents = default(List<UserConsentRepresentation>), Dictionary<string, Object> clientRoles = default(Dictionary<string, Object>), long createdTimestamp = default(long), List<CredentialRepresentation> credentials = default(List<CredentialRepresentation>), List<string> disableableCredentialTypes = default(List<string>), string email = default(string), bool emailVerified = default(bool), bool enabled = default(bool), List<FederatedIdentityRepresentation> federatedIdentities = default(List<FederatedIdentityRepresentation>), string federationLink = default(string), string firstName = default(string), List<string> groups = default(List<string>), string id = default(string), string lastName = default(string), int notBefore = default(int), string origin = default(string), List<string> realmRoles = default(List<string>), List<string> requiredActions = default(List<string>), string self = default(string), string serviceAccountClientId = default(string), string username = default(string))
        {
            this.Access = access;
            this.Attributes = attributes;
            this.ClientConsents = clientConsents;
            this.ClientRoles = clientRoles;
            this.CreatedTimestamp = createdTimestamp;
            this.Credentials = credentials;
            this.DisableableCredentialTypes = disableableCredentialTypes;
            this.Email = email;
            this.EmailVerified = emailVerified;
            this.Enabled = enabled;
            this.FederatedIdentities = federatedIdentities;
            this.FederationLink = federationLink;
            this.FirstName = firstName;
            this.Groups = groups;
            this.Id = id;
            this.LastName = lastName;
            this.NotBefore = notBefore;
            this.Origin = origin;
            this.RealmRoles = realmRoles;
            this.RequiredActions = requiredActions;
            this.Self = self;
            this.ServiceAccountClientId = serviceAccountClientId;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", EmitDefaultValue = false)]
        public Dictionary<string, Object> Access { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ClientConsents
        /// </summary>
        [DataMember(Name = "clientConsents", EmitDefaultValue = false)]
        public List<UserConsentRepresentation> ClientConsents { get; set; }

        /// <summary>
        /// Gets or Sets ClientRoles
        /// </summary>
        [DataMember(Name = "clientRoles", EmitDefaultValue = false)]
        public Dictionary<string, Object> ClientRoles { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTimestamp
        /// </summary>
        [DataMember(Name = "createdTimestamp", EmitDefaultValue = false)]
        public long CreatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [DataMember(Name = "credentials", EmitDefaultValue = false)]
        public List<CredentialRepresentation> Credentials { get; set; }

        /// <summary>
        /// Gets or Sets DisableableCredentialTypes
        /// </summary>
        [DataMember(Name = "disableableCredentialTypes", EmitDefaultValue = false)]
        public List<string> DisableableCredentialTypes { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name = "emailVerified", EmitDefaultValue = true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets FederatedIdentities
        /// </summary>
        [DataMember(Name = "federatedIdentities", EmitDefaultValue = false)]
        public List<FederatedIdentityRepresentation> FederatedIdentities { get; set; }

        /// <summary>
        /// Gets or Sets FederationLink
        /// </summary>
        [DataMember(Name = "federationLink", EmitDefaultValue = false)]
        public string FederationLink { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets NotBefore
        /// </summary>
        [DataMember(Name = "notBefore", EmitDefaultValue = false)]
        public int NotBefore { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets RealmRoles
        /// </summary>
        [DataMember(Name = "realmRoles", EmitDefaultValue = false)]
        public List<string> RealmRoles { get; set; }

        /// <summary>
        /// Gets or Sets RequiredActions
        /// </summary>
        [DataMember(Name = "requiredActions", EmitDefaultValue = false)]
        public List<string> RequiredActions { get; set; }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; set; }

        /// <summary>
        /// Gets or Sets ServiceAccountClientId
        /// </summary>
        [DataMember(Name = "serviceAccountClientId", EmitDefaultValue = false)]
        public string ServiceAccountClientId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserRepresentation {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ClientConsents: ").Append(ClientConsents).Append("\n");
            sb.Append("  ClientRoles: ").Append(ClientRoles).Append("\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  DisableableCredentialTypes: ").Append(DisableableCredentialTypes).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  FederatedIdentities: ").Append(FederatedIdentities).Append("\n");
            sb.Append("  FederationLink: ").Append(FederationLink).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RealmRoles: ").Append(RealmRoles).Append("\n");
            sb.Append("  RequiredActions: ").Append(RequiredActions).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  ServiceAccountClientId: ").Append(ServiceAccountClientId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRepresentation);
        }

        /// <summary>
        /// Returns true if UserRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Access == input.Access ||
                    this.Access != null &&
                    input.Access != null &&
                    this.Access.SequenceEqual(input.Access)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ClientConsents == input.ClientConsents ||
                    this.ClientConsents != null &&
                    input.ClientConsents != null &&
                    this.ClientConsents.SequenceEqual(input.ClientConsents)
                ) && 
                (
                    this.ClientRoles == input.ClientRoles ||
                    this.ClientRoles != null &&
                    input.ClientRoles != null &&
                    this.ClientRoles.SequenceEqual(input.ClientRoles)
                ) && 
                (
                    this.CreatedTimestamp == input.CreatedTimestamp ||
                    this.CreatedTimestamp.Equals(input.CreatedTimestamp)
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    this.Credentials != null &&
                    input.Credentials != null &&
                    this.Credentials.SequenceEqual(input.Credentials)
                ) && 
                (
                    this.DisableableCredentialTypes == input.DisableableCredentialTypes ||
                    this.DisableableCredentialTypes != null &&
                    input.DisableableCredentialTypes != null &&
                    this.DisableableCredentialTypes.SequenceEqual(input.DisableableCredentialTypes)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    this.EmailVerified.Equals(input.EmailVerified)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.FederatedIdentities == input.FederatedIdentities ||
                    this.FederatedIdentities != null &&
                    input.FederatedIdentities != null &&
                    this.FederatedIdentities.SequenceEqual(input.FederatedIdentities)
                ) && 
                (
                    this.FederationLink == input.FederationLink ||
                    (this.FederationLink != null &&
                    this.FederationLink.Equals(input.FederationLink))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.NotBefore == input.NotBefore ||
                    this.NotBefore.Equals(input.NotBefore)
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.RealmRoles == input.RealmRoles ||
                    this.RealmRoles != null &&
                    input.RealmRoles != null &&
                    this.RealmRoles.SequenceEqual(input.RealmRoles)
                ) && 
                (
                    this.RequiredActions == input.RequiredActions ||
                    this.RequiredActions != null &&
                    input.RequiredActions != null &&
                    this.RequiredActions.SequenceEqual(input.RequiredActions)
                ) && 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.ServiceAccountClientId == input.ServiceAccountClientId ||
                    (this.ServiceAccountClientId != null &&
                    this.ServiceAccountClientId.Equals(input.ServiceAccountClientId))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                {
                    hashCode = (hashCode * 59) + this.Access.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.ClientConsents != null)
                {
                    hashCode = (hashCode * 59) + this.ClientConsents.GetHashCode();
                }
                if (this.ClientRoles != null)
                {
                    hashCode = (hashCode * 59) + this.ClientRoles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedTimestamp.GetHashCode();
                if (this.Credentials != null)
                {
                    hashCode = (hashCode * 59) + this.Credentials.GetHashCode();
                }
                if (this.DisableableCredentialTypes != null)
                {
                    hashCode = (hashCode * 59) + this.DisableableCredentialTypes.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailVerified.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.FederatedIdentities != null)
                {
                    hashCode = (hashCode * 59) + this.FederatedIdentities.GetHashCode();
                }
                if (this.FederationLink != null)
                {
                    hashCode = (hashCode * 59) + this.FederationLink.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotBefore.GetHashCode();
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.RealmRoles != null)
                {
                    hashCode = (hashCode * 59) + this.RealmRoles.GetHashCode();
                }
                if (this.RequiredActions != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredActions.GetHashCode();
                }
                if (this.Self != null)
                {
                    hashCode = (hashCode * 59) + this.Self.GetHashCode();
                }
                if (this.ServiceAccountClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceAccountClientId.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
