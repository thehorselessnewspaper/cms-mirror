/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Horseless.Keycloak.Admin.Rest.Client.OpenAPIDateConverter;

namespace Horseless.Keycloak.Admin.Rest.Model
{
    /// <summary>
    /// AuthenticationFlowRepresentation
    /// </summary>
    [DataContract(Name = "AuthenticationFlowRepresentation")]
    public partial class AuthenticationFlowRepresentation : IEquatable<AuthenticationFlowRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationFlowRepresentation" /> class.
        /// </summary>
        /// <param name="alias">alias.</param>
        /// <param name="authenticationExecutions">authenticationExecutions.</param>
        /// <param name="builtIn">builtIn.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="providerId">providerId.</param>
        /// <param name="topLevel">topLevel.</param>
        public AuthenticationFlowRepresentation(string alias = default(string), List<AuthenticationExecutionExportRepresentation> authenticationExecutions = default(List<AuthenticationExecutionExportRepresentation>), bool builtIn = default(bool), string description = default(string), string id = default(string), string providerId = default(string), bool topLevel = default(bool))
        {
            this.Alias = alias;
            this.AuthenticationExecutions = authenticationExecutions;
            this.BuiltIn = builtIn;
            this.Description = description;
            this.Id = id;
            this.ProviderId = providerId;
            this.TopLevel = topLevel;
        }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationExecutions
        /// </summary>
        [DataMember(Name = "authenticationExecutions", EmitDefaultValue = false)]
        public List<AuthenticationExecutionExportRepresentation> AuthenticationExecutions { get; set; }

        /// <summary>
        /// Gets or Sets BuiltIn
        /// </summary>
        [DataMember(Name = "builtIn", EmitDefaultValue = true)]
        public bool BuiltIn { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "providerId", EmitDefaultValue = false)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or Sets TopLevel
        /// </summary>
        [DataMember(Name = "topLevel", EmitDefaultValue = true)]
        public bool TopLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticationFlowRepresentation {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  AuthenticationExecutions: ").Append(AuthenticationExecutions).Append("\n");
            sb.Append("  BuiltIn: ").Append(BuiltIn).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  TopLevel: ").Append(TopLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationFlowRepresentation);
        }

        /// <summary>
        /// Returns true if AuthenticationFlowRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationFlowRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationFlowRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.AuthenticationExecutions == input.AuthenticationExecutions ||
                    this.AuthenticationExecutions != null &&
                    input.AuthenticationExecutions != null &&
                    this.AuthenticationExecutions.SequenceEqual(input.AuthenticationExecutions)
                ) && 
                (
                    this.BuiltIn == input.BuiltIn ||
                    this.BuiltIn.Equals(input.BuiltIn)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.TopLevel == input.TopLevel ||
                    this.TopLevel.Equals(input.TopLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                if (this.AuthenticationExecutions != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationExecutions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuiltIn.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ProviderId != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TopLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
