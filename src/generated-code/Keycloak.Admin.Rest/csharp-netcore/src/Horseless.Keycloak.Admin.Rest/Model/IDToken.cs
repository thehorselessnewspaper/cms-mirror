/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Horseless.Keycloak.Admin.Rest.Client.OpenAPIDateConverter;

namespace Horseless.Keycloak.Admin.Rest.Model
{
    /// <summary>
    /// IDToken
    /// </summary>
    [DataContract(Name = "IDToken")]
    public partial class IDToken : IEquatable<IDToken>, IValidatableObject
    {
        /// <summary>
        /// Defines Category
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum INTERNAL for value: INTERNAL
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL = 1,

            /// <summary>
            /// Enum ACCESS for value: ACCESS
            /// </summary>
            [EnumMember(Value = "ACCESS")]
            ACCESS = 2,

            /// <summary>
            /// Enum ID for value: ID
            /// </summary>
            [EnumMember(Value = "ID")]
            ID = 3,

            /// <summary>
            /// Enum ADMIN for value: ADMIN
            /// </summary>
            [EnumMember(Value = "ADMIN")]
            ADMIN = 4,

            /// <summary>
            /// Enum USERINFO for value: USERINFO
            /// </summary>
            [EnumMember(Value = "USERINFO")]
            USERINFO = 5,

            /// <summary>
            /// Enum LOGOUT for value: LOGOUT
            /// </summary>
            [EnumMember(Value = "LOGOUT")]
            LOGOUT = 6,

            /// <summary>
            /// Enum AUTHORIZATIONRESPONSE for value: AUTHORIZATION_RESPONSE
            /// </summary>
            [EnumMember(Value = "AUTHORIZATION_RESPONSE")]
            AUTHORIZATIONRESPONSE = 7

        }


        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IDToken" /> class.
        /// </summary>
        /// <param name="acr">acr.</param>
        /// <param name="address">address.</param>
        /// <param name="atHash">atHash.</param>
        /// <param name="authTime">authTime.</param>
        /// <param name="azp">azp.</param>
        /// <param name="birthdate">birthdate.</param>
        /// <param name="cHash">cHash.</param>
        /// <param name="category">category.</param>
        /// <param name="claimsLocales">claimsLocales.</param>
        /// <param name="email">email.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="exp">exp.</param>
        /// <param name="familyName">familyName.</param>
        /// <param name="gender">gender.</param>
        /// <param name="givenName">givenName.</param>
        /// <param name="iat">iat.</param>
        /// <param name="iss">iss.</param>
        /// <param name="jti">jti.</param>
        /// <param name="locale">locale.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="name">name.</param>
        /// <param name="nbf">nbf.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="nonce">nonce.</param>
        /// <param name="otherClaims">otherClaims.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneNumberVerified">phoneNumberVerified.</param>
        /// <param name="picture">picture.</param>
        /// <param name="preferredUsername">preferredUsername.</param>
        /// <param name="profile">profile.</param>
        /// <param name="sHash">sHash.</param>
        /// <param name="sessionState">sessionState.</param>
        /// <param name="sid">sid.</param>
        /// <param name="sub">sub.</param>
        /// <param name="typ">typ.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="website">website.</param>
        /// <param name="zoneinfo">zoneinfo.</param>
        public IDToken(string acr = default(string), AddressClaimSet address = default(AddressClaimSet), string atHash = default(string), long authTime = default(long), string azp = default(string), string birthdate = default(string), string cHash = default(string), CategoryEnum? category = default(CategoryEnum?), string claimsLocales = default(string), string email = default(string), bool emailVerified = default(bool), long exp = default(long), string familyName = default(string), string gender = default(string), string givenName = default(string), long iat = default(long), string iss = default(string), string jti = default(string), string locale = default(string), string middleName = default(string), string name = default(string), long nbf = default(long), string nickname = default(string), string nonce = default(string), Dictionary<string, Object> otherClaims = default(Dictionary<string, Object>), string phoneNumber = default(string), bool phoneNumberVerified = default(bool), string picture = default(string), string preferredUsername = default(string), string profile = default(string), string sHash = default(string), string sessionState = default(string), string sid = default(string), string sub = default(string), string typ = default(string), long updatedAt = default(long), string website = default(string), string zoneinfo = default(string))
        {
            this.Acr = acr;
            this.Address = address;
            this.AtHash = atHash;
            this.AuthTime = authTime;
            this.Azp = azp;
            this.Birthdate = birthdate;
            this.CHash = cHash;
            this.Category = category;
            this.ClaimsLocales = claimsLocales;
            this.Email = email;
            this.EmailVerified = emailVerified;
            this.Exp = exp;
            this.FamilyName = familyName;
            this.Gender = gender;
            this.GivenName = givenName;
            this.Iat = iat;
            this.Iss = iss;
            this.Jti = jti;
            this.Locale = locale;
            this.MiddleName = middleName;
            this.Name = name;
            this.Nbf = nbf;
            this.Nickname = nickname;
            this.Nonce = nonce;
            this.OtherClaims = otherClaims;
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberVerified = phoneNumberVerified;
            this.Picture = picture;
            this.PreferredUsername = preferredUsername;
            this.Profile = profile;
            this.SHash = sHash;
            this.SessionState = sessionState;
            this.Sid = sid;
            this.Sub = sub;
            this.Typ = typ;
            this.UpdatedAt = updatedAt;
            this.Website = website;
            this.Zoneinfo = zoneinfo;
        }

        /// <summary>
        /// Gets or Sets Acr
        /// </summary>
        [DataMember(Name = "acr", EmitDefaultValue = false)]
        public string Acr { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public AddressClaimSet Address { get; set; }

        /// <summary>
        /// Gets or Sets AtHash
        /// </summary>
        [DataMember(Name = "at_hash", EmitDefaultValue = false)]
        public string AtHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthTime
        /// </summary>
        [DataMember(Name = "auth_time", EmitDefaultValue = false)]
        public long AuthTime { get; set; }

        /// <summary>
        /// Gets or Sets Azp
        /// </summary>
        [DataMember(Name = "azp", EmitDefaultValue = false)]
        public string Azp { get; set; }

        /// <summary>
        /// Gets or Sets Birthdate
        /// </summary>
        [DataMember(Name = "birthdate", EmitDefaultValue = false)]
        public string Birthdate { get; set; }

        /// <summary>
        /// Gets or Sets CHash
        /// </summary>
        [DataMember(Name = "c_hash", EmitDefaultValue = false)]
        public string CHash { get; set; }

        /// <summary>
        /// Gets or Sets ClaimsLocales
        /// </summary>
        [DataMember(Name = "claims_locales", EmitDefaultValue = false)]
        public string ClaimsLocales { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name = "email_verified", EmitDefaultValue = true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets Exp
        /// </summary>
        [DataMember(Name = "exp", EmitDefaultValue = false)]
        public long Exp { get; set; }

        /// <summary>
        /// Gets or Sets FamilyName
        /// </summary>
        [DataMember(Name = "family_name", EmitDefaultValue = false)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name = "given_name", EmitDefaultValue = false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets Iat
        /// </summary>
        [DataMember(Name = "iat", EmitDefaultValue = false)]
        public long Iat { get; set; }

        /// <summary>
        /// Gets or Sets Iss
        /// </summary>
        [DataMember(Name = "iss", EmitDefaultValue = false)]
        public string Iss { get; set; }

        /// <summary>
        /// Gets or Sets Jti
        /// </summary>
        [DataMember(Name = "jti", EmitDefaultValue = false)]
        public string Jti { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name = "middle_name", EmitDefaultValue = false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Nbf
        /// </summary>
        [DataMember(Name = "nbf", EmitDefaultValue = false)]
        public long Nbf { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name = "nickname", EmitDefaultValue = false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets OtherClaims
        /// </summary>
        [DataMember(Name = "otherClaims", EmitDefaultValue = false)]
        public Dictionary<string, Object> OtherClaims { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberVerified
        /// </summary>
        [DataMember(Name = "phone_number_verified", EmitDefaultValue = true)]
        public bool PhoneNumberVerified { get; set; }

        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name = "picture", EmitDefaultValue = false)]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or Sets PreferredUsername
        /// </summary>
        [DataMember(Name = "preferred_username", EmitDefaultValue = false)]
        public string PreferredUsername { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets SHash
        /// </summary>
        [DataMember(Name = "s_hash", EmitDefaultValue = false)]
        public string SHash { get; set; }

        /// <summary>
        /// Gets or Sets SessionState
        /// </summary>
        [DataMember(Name = "session_state", EmitDefaultValue = false)]
        public string SessionState { get; set; }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [DataMember(Name = "sid", EmitDefaultValue = false)]
        public string Sid { get; set; }

        /// <summary>
        /// Gets or Sets Sub
        /// </summary>
        [DataMember(Name = "sub", EmitDefaultValue = false)]
        public string Sub { get; set; }

        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [DataMember(Name = "typ", EmitDefaultValue = false)]
        public string Typ { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Zoneinfo
        /// </summary>
        [DataMember(Name = "zoneinfo", EmitDefaultValue = false)]
        public string Zoneinfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IDToken {\n");
            sb.Append("  Acr: ").Append(Acr).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AtHash: ").Append(AtHash).Append("\n");
            sb.Append("  AuthTime: ").Append(AuthTime).Append("\n");
            sb.Append("  Azp: ").Append(Azp).Append("\n");
            sb.Append("  Birthdate: ").Append(Birthdate).Append("\n");
            sb.Append("  CHash: ").Append(CHash).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ClaimsLocales: ").Append(ClaimsLocales).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  Exp: ").Append(Exp).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  Iat: ").Append(Iat).Append("\n");
            sb.Append("  Iss: ").Append(Iss).Append("\n");
            sb.Append("  Jti: ").Append(Jti).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nbf: ").Append(Nbf).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  OtherClaims: ").Append(OtherClaims).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberVerified: ").Append(PhoneNumberVerified).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  PreferredUsername: ").Append(PreferredUsername).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  SHash: ").Append(SHash).Append("\n");
            sb.Append("  SessionState: ").Append(SessionState).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Zoneinfo: ").Append(Zoneinfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IDToken);
        }

        /// <summary>
        /// Returns true if IDToken instances are equal
        /// </summary>
        /// <param name="input">Instance of IDToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IDToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Acr == input.Acr ||
                    (this.Acr != null &&
                    this.Acr.Equals(input.Acr))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AtHash == input.AtHash ||
                    (this.AtHash != null &&
                    this.AtHash.Equals(input.AtHash))
                ) && 
                (
                    this.AuthTime == input.AuthTime ||
                    this.AuthTime.Equals(input.AuthTime)
                ) && 
                (
                    this.Azp == input.Azp ||
                    (this.Azp != null &&
                    this.Azp.Equals(input.Azp))
                ) && 
                (
                    this.Birthdate == input.Birthdate ||
                    (this.Birthdate != null &&
                    this.Birthdate.Equals(input.Birthdate))
                ) && 
                (
                    this.CHash == input.CHash ||
                    (this.CHash != null &&
                    this.CHash.Equals(input.CHash))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.ClaimsLocales == input.ClaimsLocales ||
                    (this.ClaimsLocales != null &&
                    this.ClaimsLocales.Equals(input.ClaimsLocales))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    this.EmailVerified.Equals(input.EmailVerified)
                ) && 
                (
                    this.Exp == input.Exp ||
                    this.Exp.Equals(input.Exp)
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.Iat == input.Iat ||
                    this.Iat.Equals(input.Iat)
                ) && 
                (
                    this.Iss == input.Iss ||
                    (this.Iss != null &&
                    this.Iss.Equals(input.Iss))
                ) && 
                (
                    this.Jti == input.Jti ||
                    (this.Jti != null &&
                    this.Jti.Equals(input.Jti))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nbf == input.Nbf ||
                    this.Nbf.Equals(input.Nbf)
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.OtherClaims == input.OtherClaims ||
                    this.OtherClaims != null &&
                    input.OtherClaims != null &&
                    this.OtherClaims.SequenceEqual(input.OtherClaims)
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneNumberVerified == input.PhoneNumberVerified ||
                    this.PhoneNumberVerified.Equals(input.PhoneNumberVerified)
                ) && 
                (
                    this.Picture == input.Picture ||
                    (this.Picture != null &&
                    this.Picture.Equals(input.Picture))
                ) && 
                (
                    this.PreferredUsername == input.PreferredUsername ||
                    (this.PreferredUsername != null &&
                    this.PreferredUsername.Equals(input.PreferredUsername))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.SHash == input.SHash ||
                    (this.SHash != null &&
                    this.SHash.Equals(input.SHash))
                ) && 
                (
                    this.SessionState == input.SessionState ||
                    (this.SessionState != null &&
                    this.SessionState.Equals(input.SessionState))
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.Sub == input.Sub ||
                    (this.Sub != null &&
                    this.Sub.Equals(input.Sub))
                ) && 
                (
                    this.Typ == input.Typ ||
                    (this.Typ != null &&
                    this.Typ.Equals(input.Typ))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    this.UpdatedAt.Equals(input.UpdatedAt)
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Zoneinfo == input.Zoneinfo ||
                    (this.Zoneinfo != null &&
                    this.Zoneinfo.Equals(input.Zoneinfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acr != null)
                {
                    hashCode = (hashCode * 59) + this.Acr.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.AtHash != null)
                {
                    hashCode = (hashCode * 59) + this.AtHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthTime.GetHashCode();
                if (this.Azp != null)
                {
                    hashCode = (hashCode * 59) + this.Azp.GetHashCode();
                }
                if (this.Birthdate != null)
                {
                    hashCode = (hashCode * 59) + this.Birthdate.GetHashCode();
                }
                if (this.CHash != null)
                {
                    hashCode = (hashCode * 59) + this.CHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.ClaimsLocales != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimsLocales.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailVerified.GetHashCode();
                hashCode = (hashCode * 59) + this.Exp.GetHashCode();
                if (this.FamilyName != null)
                {
                    hashCode = (hashCode * 59) + this.FamilyName.GetHashCode();
                }
                if (this.Gender != null)
                {
                    hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                }
                if (this.GivenName != null)
                {
                    hashCode = (hashCode * 59) + this.GivenName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Iat.GetHashCode();
                if (this.Iss != null)
                {
                    hashCode = (hashCode * 59) + this.Iss.GetHashCode();
                }
                if (this.Jti != null)
                {
                    hashCode = (hashCode * 59) + this.Jti.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                if (this.MiddleName != null)
                {
                    hashCode = (hashCode * 59) + this.MiddleName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nbf.GetHashCode();
                if (this.Nickname != null)
                {
                    hashCode = (hashCode * 59) + this.Nickname.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.OtherClaims != null)
                {
                    hashCode = (hashCode * 59) + this.OtherClaims.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhoneNumberVerified.GetHashCode();
                if (this.Picture != null)
                {
                    hashCode = (hashCode * 59) + this.Picture.GetHashCode();
                }
                if (this.PreferredUsername != null)
                {
                    hashCode = (hashCode * 59) + this.PreferredUsername.GetHashCode();
                }
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                if (this.SHash != null)
                {
                    hashCode = (hashCode * 59) + this.SHash.GetHashCode();
                }
                if (this.SessionState != null)
                {
                    hashCode = (hashCode * 59) + this.SessionState.GetHashCode();
                }
                if (this.Sid != null)
                {
                    hashCode = (hashCode * 59) + this.Sid.GetHashCode();
                }
                if (this.Sub != null)
                {
                    hashCode = (hashCode * 59) + this.Sub.GetHashCode();
                }
                if (this.Typ != null)
                {
                    hashCode = (hashCode * 59) + this.Typ.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.Zoneinfo != null)
                {
                    hashCode = (hashCode * 59) + this.Zoneinfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
