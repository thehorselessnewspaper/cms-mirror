/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Horseless.Keycloak.Admin.Rest.Client.OpenAPIDateConverter;

namespace Horseless.Keycloak.Admin.Rest.Model
{
    /// <summary>
    /// RoleRepresentation
    /// </summary>
    [DataContract(Name = "RoleRepresentation")]
    internal partial class RoleRepresentation : IEquatable<RoleRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleRepresentation" /> class.
        /// </summary>
        /// <param name="attributes">attributes.</param>
        /// <param name="clientRole">clientRole.</param>
        /// <param name="composite">composite.</param>
        /// <param name="composites">composites.</param>
        /// <param name="containerId">containerId.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        public RoleRepresentation(Dictionary<string, Object> attributes = default(Dictionary<string, Object>), bool clientRole = default(bool), bool composite = default(bool), RoleRepresentationComposites composites = default(RoleRepresentationComposites), string containerId = default(string), string description = default(string), string id = default(string), string name = default(string))
        {
            this.Attributes = attributes;
            this.ClientRole = clientRole;
            this.Composite = composite;
            this.Composites = composites;
            this.ContainerId = containerId;
            this.Description = description;
            this.Id = id;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ClientRole
        /// </summary>
        [DataMember(Name = "clientRole", EmitDefaultValue = true)]
        public bool ClientRole { get; set; }

        /// <summary>
        /// Gets or Sets Composite
        /// </summary>
        [DataMember(Name = "composite", EmitDefaultValue = true)]
        public bool Composite { get; set; }

        /// <summary>
        /// Gets or Sets Composites
        /// </summary>
        [DataMember(Name = "composites", EmitDefaultValue = false)]
        public RoleRepresentationComposites Composites { get; set; }

        /// <summary>
        /// Gets or Sets ContainerId
        /// </summary>
        [DataMember(Name = "containerId", EmitDefaultValue = false)]
        public string ContainerId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoleRepresentation {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ClientRole: ").Append(ClientRole).Append("\n");
            sb.Append("  Composite: ").Append(Composite).Append("\n");
            sb.Append("  Composites: ").Append(Composites).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoleRepresentation);
        }

        /// <summary>
        /// Returns true if RoleRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of RoleRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleRepresentation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ClientRole == input.ClientRole ||
                    this.ClientRole.Equals(input.ClientRole)
                ) && 
                (
                    this.Composite == input.Composite ||
                    this.Composite.Equals(input.Composite)
                ) && 
                (
                    this.Composites == input.Composites ||
                    (this.Composites != null &&
                    this.Composites.Equals(input.Composites))
                ) && 
                (
                    this.ContainerId == input.ContainerId ||
                    (this.ContainerId != null &&
                    this.ContainerId.Equals(input.ContainerId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientRole.GetHashCode();
                hashCode = (hashCode * 59) + this.Composite.GetHashCode();
                if (this.Composites != null)
                {
                    hashCode = (hashCode * 59) + this.Composites.GetHashCode();
                }
                if (this.ContainerId != null)
                {
                    hashCode = (hashCode * 59) + this.ContainerId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
