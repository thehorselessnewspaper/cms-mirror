/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TheHorselessNewspaper.CSharp.Rest.Client;
using TheHorselessNewspaper.CSharp.Rest.Api;
// uncomment below to import models
//using TheHorselessNewspaper.CSharp.Rest.Model;

namespace TheHorselessNewspaper.CSharp.Rest.Test.Api
{
    /// <summary>
    ///  Class for testing AccessControlEntriesRESTApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccessControlEntriesRESTApiTests : IDisposable
    {
        private AccessControlEntriesRESTApi instance;

        public AccessControlEntriesRESTApiTests()
        {
            instance = new AccessControlEntriesRESTApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccessControlEntriesRESTApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccessControlEntriesRESTApi
            //Assert.IsType<AccessControlEntriesRESTApi>(instance);
        }

        /// <summary>
        /// Test ContentEntitiesAccessControlEntriesRESTCreate
        /// </summary>
        [Fact]
        public void ContentEntitiesAccessControlEntriesRESTCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenant = null;
            //ContentEntitiesAccessControlEntry? contentEntitiesAccessControlEntry = null;
            //var response = instance.ContentEntitiesAccessControlEntriesRESTCreate(tenant, contentEntitiesAccessControlEntry);
            //Assert.IsType<ContentEntitiesAccessControlEntry>(response);
        }

        /// <summary>
        /// Test ContentEntitiesAccessControlEntriesRESTGetByObjectId
        /// </summary>
        [Fact]
        public void ContentEntitiesAccessControlEntriesRESTGetByObjectIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectId = null;
            //string tenant = null;
            //var response = instance.ContentEntitiesAccessControlEntriesRESTGetByObjectId(objectId, tenant);
            //Assert.IsType<ContentEntitiesAccessControlEntry>(response);
        }

        /// <summary>
        /// Test ContentEntitiesAccessControlEntriesRESTGetByPageNumber
        /// </summary>
        [Fact]
        public void ContentEntitiesAccessControlEntriesRESTGetByPageNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenant = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //int? pageCount = null;
            //var response = instance.ContentEntitiesAccessControlEntriesRESTGetByPageNumber(tenant, pageSize, pageNumber, pageCount);
            //Assert.IsType<List<ContentEntitiesAccessControlEntry>>(response);
        }

        /// <summary>
        /// Test ContentEntitiesAccessControlEntriesRESTUpdate
        /// </summary>
        [Fact]
        public void ContentEntitiesAccessControlEntriesRESTUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentCollectionId = null;
            //string tenant = null;
            //ContentEntitiesAccessControlEntry? contentEntitiesAccessControlEntry = null;
            //var response = instance.ContentEntitiesAccessControlEntriesRESTUpdate(contentCollectionId, tenant, contentEntitiesAccessControlEntry);
            //Assert.IsType<ContentEntitiesAccessControlEntry>(response);
        }
    }
}
