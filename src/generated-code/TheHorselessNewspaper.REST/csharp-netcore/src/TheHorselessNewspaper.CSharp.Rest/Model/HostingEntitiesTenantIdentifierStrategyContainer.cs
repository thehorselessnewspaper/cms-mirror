/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// HostingEntitiesTenantIdentifierStrategyContainer
    /// </summary>
    [DataContract(Name = "HostingEntitiesTenantIdentifierStrategyContainer")]
    public partial class HostingEntitiesTenantIdentifierStrategyContainer : IEquatable<HostingEntitiesTenantIdentifierStrategyContainer>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TenantIdentifierStrategyName
        /// </summary>
        [DataMember(Name = "tenantIdentifierStrategyName", EmitDefaultValue = false)]
        public HostingEntitiesTenantIdentifierStrategyName? TenantIdentifierStrategyName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HostingEntitiesTenantIdentifierStrategyContainer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="tenantIdentifierStrategyName">tenantIdentifierStrategyName.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="strategyId">strategyId.</param>
        /// <param name="strategy">strategy.</param>
        public HostingEntitiesTenantIdentifierStrategyContainer(Guid? id = default(Guid?), HostingEntitiesTenantIdentifierStrategyName? tenantIdentifierStrategyName = default(HostingEntitiesTenantIdentifierStrategyName?), byte[] timestamp = default(byte[]), Guid? strategyId = default(Guid?), HostingEntitiesTenantIdentifierStrategy strategy = default(HostingEntitiesTenantIdentifierStrategy))
        {
            this.Id = id;
            this.TenantIdentifierStrategyName = tenantIdentifierStrategyName;
            this.Timestamp = timestamp;
            this.StrategyId = strategyId;
            this.Strategy = strategy;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets StrategyId
        /// </summary>
        [DataMember(Name = "strategyId", EmitDefaultValue = true)]
        public Guid? StrategyId { get; set; }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public HostingEntitiesTenantIdentifierStrategy Strategy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HostingEntitiesTenantIdentifierStrategyContainer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TenantIdentifierStrategyName: ").Append(TenantIdentifierStrategyName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  StrategyId: ").Append(StrategyId).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostingEntitiesTenantIdentifierStrategyContainer);
        }

        /// <summary>
        /// Returns true if HostingEntitiesTenantIdentifierStrategyContainer instances are equal
        /// </summary>
        /// <param name="input">Instance of HostingEntitiesTenantIdentifierStrategyContainer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostingEntitiesTenantIdentifierStrategyContainer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TenantIdentifierStrategyName == input.TenantIdentifierStrategyName ||
                    this.TenantIdentifierStrategyName.Equals(input.TenantIdentifierStrategyName)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.StrategyId == input.StrategyId ||
                    (this.StrategyId != null &&
                    this.StrategyId.Equals(input.StrategyId))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TenantIdentifierStrategyName.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.StrategyId != null)
                {
                    hashCode = (hashCode * 59) + this.StrategyId.GetHashCode();
                }
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
