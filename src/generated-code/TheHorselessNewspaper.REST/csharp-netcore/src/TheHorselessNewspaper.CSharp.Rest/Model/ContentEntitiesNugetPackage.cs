/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// ContentEntitiesNugetPackage
    /// </summary>
    [DataContract(Name = "ContentEntitiesNugetPackage")]
    public partial class ContentEntitiesNugetPackage : IEquatable<ContentEntitiesNugetPackage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentEntitiesNugetPackage" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="isSoftDeleted">isSoftDeleted.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="publishAt">publishAt.</param>
        /// <param name="unPublishAt">unPublishAt.</param>
        /// <param name="isPublished">isPublished.</param>
        /// <param name="packageId">packageId.</param>
        /// <param name="packageVersion">packageVersion.</param>
        /// <param name="packageAuthor">packageAuthor.</param>
        /// <param name="packageSource">packageSource.</param>
        /// <param name="accessControlEntries">accessControlEntries.</param>
        /// <param name="owners">owners.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="dictionaryKey">dictionaryKey.</param>
        public ContentEntitiesNugetPackage(Guid id = default(Guid), string displayName = default(string), string objectId = default(string), bool? isSoftDeleted = default(bool?), DateTime? createdAt = default(DateTime?), DateTime? publishAt = default(DateTime?), DateTime? unPublishAt = default(DateTime?), bool? isPublished = default(bool?), string packageId = default(string), string packageVersion = default(string), string packageAuthor = default(string), string packageSource = default(string), List<ContentEntitiesAccessControlEntry> accessControlEntries = default(List<ContentEntitiesAccessControlEntry>), List<ContentEntitiesPrincipal> owners = default(List<ContentEntitiesPrincipal>), byte[] timestamp = default(byte[]), DateTime? updatedAt = default(DateTime?), string dictionaryKey = default(string))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.ObjectId = objectId;
            this.IsSoftDeleted = isSoftDeleted;
            this.CreatedAt = createdAt;
            this.PublishAt = publishAt;
            this.UnPublishAt = unPublishAt;
            this.IsPublished = isPublished;
            this.PackageId = packageId;
            this.PackageVersion = packageVersion;
            this.PackageAuthor = packageAuthor;
            this.PackageSource = packageSource;
            this.AccessControlEntries = accessControlEntries;
            this.Owners = owners;
            this.Timestamp = timestamp;
            this.UpdatedAt = updatedAt;
            this.DictionaryKey = dictionaryKey;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "DisplayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "ObjectId", EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsSoftDeleted
        /// </summary>
        [DataMember(Name = "IsSoftDeleted", EmitDefaultValue = true)]
        public bool? IsSoftDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "CreatedAt", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets PublishAt
        /// </summary>
        [DataMember(Name = "PublishAt", EmitDefaultValue = true)]
        public DateTime? PublishAt { get; set; }

        /// <summary>
        /// Gets or Sets UnPublishAt
        /// </summary>
        [DataMember(Name = "UnPublishAt", EmitDefaultValue = true)]
        public DateTime? UnPublishAt { get; set; }

        /// <summary>
        /// Gets or Sets IsPublished
        /// </summary>
        [DataMember(Name = "IsPublished", EmitDefaultValue = true)]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "PackageId", EmitDefaultValue = true)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets PackageVersion
        /// </summary>
        [DataMember(Name = "PackageVersion", EmitDefaultValue = true)]
        public string PackageVersion { get; set; }

        /// <summary>
        /// Gets or Sets PackageAuthor
        /// </summary>
        [DataMember(Name = "PackageAuthor", EmitDefaultValue = true)]
        public string PackageAuthor { get; set; }

        /// <summary>
        /// Gets or Sets PackageSource
        /// </summary>
        [DataMember(Name = "PackageSource", EmitDefaultValue = true)]
        public string PackageSource { get; set; }

        /// <summary>
        /// Gets or Sets AccessControlEntries
        /// </summary>
        [DataMember(Name = "AccessControlEntries", EmitDefaultValue = true)]
        public List<ContentEntitiesAccessControlEntry> AccessControlEntries { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name = "Owners", EmitDefaultValue = true)]
        public List<ContentEntitiesPrincipal> Owners { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", EmitDefaultValue = true)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "UpdatedAt", EmitDefaultValue = true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DictionaryKey
        /// </summary>
        [DataMember(Name = "DictionaryKey", EmitDefaultValue = true)]
        public string DictionaryKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentEntitiesNugetPackage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  IsSoftDeleted: ").Append(IsSoftDeleted).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PublishAt: ").Append(PublishAt).Append("\n");
            sb.Append("  UnPublishAt: ").Append(UnPublishAt).Append("\n");
            sb.Append("  IsPublished: ").Append(IsPublished).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  PackageVersion: ").Append(PackageVersion).Append("\n");
            sb.Append("  PackageAuthor: ").Append(PackageAuthor).Append("\n");
            sb.Append("  PackageSource: ").Append(PackageSource).Append("\n");
            sb.Append("  AccessControlEntries: ").Append(AccessControlEntries).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DictionaryKey: ").Append(DictionaryKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentEntitiesNugetPackage);
        }

        /// <summary>
        /// Returns true if ContentEntitiesNugetPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentEntitiesNugetPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentEntitiesNugetPackage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.IsSoftDeleted == input.IsSoftDeleted ||
                    (this.IsSoftDeleted != null &&
                    this.IsSoftDeleted.Equals(input.IsSoftDeleted))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PublishAt == input.PublishAt ||
                    (this.PublishAt != null &&
                    this.PublishAt.Equals(input.PublishAt))
                ) && 
                (
                    this.UnPublishAt == input.UnPublishAt ||
                    (this.UnPublishAt != null &&
                    this.UnPublishAt.Equals(input.UnPublishAt))
                ) && 
                (
                    this.IsPublished == input.IsPublished ||
                    (this.IsPublished != null &&
                    this.IsPublished.Equals(input.IsPublished))
                ) && 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.PackageVersion == input.PackageVersion ||
                    (this.PackageVersion != null &&
                    this.PackageVersion.Equals(input.PackageVersion))
                ) && 
                (
                    this.PackageAuthor == input.PackageAuthor ||
                    (this.PackageAuthor != null &&
                    this.PackageAuthor.Equals(input.PackageAuthor))
                ) && 
                (
                    this.PackageSource == input.PackageSource ||
                    (this.PackageSource != null &&
                    this.PackageSource.Equals(input.PackageSource))
                ) && 
                (
                    this.AccessControlEntries == input.AccessControlEntries ||
                    this.AccessControlEntries != null &&
                    input.AccessControlEntries != null &&
                    this.AccessControlEntries.SequenceEqual(input.AccessControlEntries)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DictionaryKey == input.DictionaryKey ||
                    (this.DictionaryKey != null &&
                    this.DictionaryKey.Equals(input.DictionaryKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.IsSoftDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsSoftDeleted.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.PublishAt != null)
                {
                    hashCode = (hashCode * 59) + this.PublishAt.GetHashCode();
                }
                if (this.UnPublishAt != null)
                {
                    hashCode = (hashCode * 59) + this.UnPublishAt.GetHashCode();
                }
                if (this.IsPublished != null)
                {
                    hashCode = (hashCode * 59) + this.IsPublished.GetHashCode();
                }
                if (this.PackageId != null)
                {
                    hashCode = (hashCode * 59) + this.PackageId.GetHashCode();
                }
                if (this.PackageVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PackageVersion.GetHashCode();
                }
                if (this.PackageAuthor != null)
                {
                    hashCode = (hashCode * 59) + this.PackageAuthor.GetHashCode();
                }
                if (this.PackageSource != null)
                {
                    hashCode = (hashCode * 59) + this.PackageSource.GetHashCode();
                }
                if (this.AccessControlEntries != null)
                {
                    hashCode = (hashCode * 59) + this.AccessControlEntries.GetHashCode();
                }
                if (this.Owners != null)
                {
                    hashCode = (hashCode * 59) + this.Owners.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.DictionaryKey != null)
                {
                    hashCode = (hashCode * 59) + this.DictionaryKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
