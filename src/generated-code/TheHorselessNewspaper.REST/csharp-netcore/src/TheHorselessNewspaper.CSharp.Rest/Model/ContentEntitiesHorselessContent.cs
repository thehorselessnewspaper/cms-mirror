/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// ContentEntitiesHorselessContent
    /// </summary>
    [DataContract(Name = "ContentEntitiesHorselessContent")]
    public partial class ContentEntitiesHorselessContent : IEquatable<ContentEntitiesHorselessContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentEntitiesHorselessContent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="isSoftDeleted">isSoftDeleted.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="filesystemAssetId">filesystemAssetId.</param>
        /// <param name="jsonAssetId">jsonAssetId.</param>
        /// <param name="mimeTypeId">mimeTypeId.</param>
        /// <param name="isPublished">isPublished.</param>
        /// <param name="publishedURL">publishedURL.</param>
        /// <param name="previewURL">previewURL.</param>
        /// <param name="filesystemAsset">filesystemAsset.</param>
        /// <param name="jsonAsset">jsonAsset.</param>
        /// <param name="mimeType">mimeType.</param>
        /// <param name="contentCollections">contentCollections.</param>
        /// <param name="accessControlList">accessControlList.</param>
        /// <param name="owners">owners.</param>
        /// <param name="timestamp">timestamp.</param>
        public ContentEntitiesHorselessContent(Guid id = default(Guid), string displayName = default(string), string objectId = default(string), bool? isSoftDeleted = default(bool?), DateTime? createdAt = default(DateTime?), Guid? filesystemAssetId = default(Guid?), Guid? jsonAssetId = default(Guid?), Guid? mimeTypeId = default(Guid?), bool? isPublished = default(bool?), string publishedURL = default(string), string previewURL = default(string), ContentEntitiesFilesystemAsset filesystemAsset = default(ContentEntitiesFilesystemAsset), ContentEntitiesJSONAsset jsonAsset = default(ContentEntitiesJSONAsset), ContentEntitiesMIMEType mimeType = default(ContentEntitiesMIMEType), List<ContentEntitiesContentCollection> contentCollections = default(List<ContentEntitiesContentCollection>), List<ContentEntitiesAccessControlEntry> accessControlList = default(List<ContentEntitiesAccessControlEntry>), List<ContentEntitiesPrincipal> owners = default(List<ContentEntitiesPrincipal>), byte[] timestamp = default(byte[]))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.ObjectId = objectId;
            this.IsSoftDeleted = isSoftDeleted;
            this.CreatedAt = createdAt;
            this.FilesystemAssetId = filesystemAssetId;
            this.JsonAssetId = jsonAssetId;
            this.MimeTypeId = mimeTypeId;
            this.IsPublished = isPublished;
            this.PublishedURL = publishedURL;
            this.PreviewURL = previewURL;
            this.FilesystemAsset = filesystemAsset;
            this.JsonAsset = jsonAsset;
            this.MimeType = mimeType;
            this.ContentCollections = contentCollections;
            this.AccessControlList = accessControlList;
            this.Owners = owners;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "objectId", EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsSoftDeleted
        /// </summary>
        [DataMember(Name = "isSoftDeleted", EmitDefaultValue = true)]
        public bool? IsSoftDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets FilesystemAssetId
        /// </summary>
        [DataMember(Name = "filesystemAssetId", EmitDefaultValue = true)]
        public Guid? FilesystemAssetId { get; set; }

        /// <summary>
        /// Gets or Sets JsonAssetId
        /// </summary>
        [DataMember(Name = "jsonAssetId", EmitDefaultValue = true)]
        public Guid? JsonAssetId { get; set; }

        /// <summary>
        /// Gets or Sets MimeTypeId
        /// </summary>
        [DataMember(Name = "mimeTypeId", EmitDefaultValue = true)]
        public Guid? MimeTypeId { get; set; }

        /// <summary>
        /// Gets or Sets IsPublished
        /// </summary>
        [DataMember(Name = "isPublished", EmitDefaultValue = true)]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// Gets or Sets PublishedURL
        /// </summary>
        [DataMember(Name = "publishedURL", EmitDefaultValue = true)]
        public string PublishedURL { get; set; }

        /// <summary>
        /// Gets or Sets PreviewURL
        /// </summary>
        [DataMember(Name = "previewURL", EmitDefaultValue = true)]
        public string PreviewURL { get; set; }

        /// <summary>
        /// Gets or Sets FilesystemAsset
        /// </summary>
        [DataMember(Name = "filesystemAsset", EmitDefaultValue = false)]
        public ContentEntitiesFilesystemAsset FilesystemAsset { get; set; }

        /// <summary>
        /// Gets or Sets JsonAsset
        /// </summary>
        [DataMember(Name = "jsonAsset", EmitDefaultValue = false)]
        public ContentEntitiesJSONAsset JsonAsset { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name = "mimeType", EmitDefaultValue = false)]
        public ContentEntitiesMIMEType MimeType { get; set; }

        /// <summary>
        /// Gets or Sets ContentCollections
        /// </summary>
        [DataMember(Name = "contentCollections", EmitDefaultValue = true)]
        public List<ContentEntitiesContentCollection> ContentCollections { get; set; }

        /// <summary>
        /// Gets or Sets AccessControlList
        /// </summary>
        [DataMember(Name = "accessControlList", EmitDefaultValue = true)]
        public List<ContentEntitiesAccessControlEntry> AccessControlList { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name = "owners", EmitDefaultValue = true)]
        public List<ContentEntitiesPrincipal> Owners { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentEntitiesHorselessContent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  IsSoftDeleted: ").Append(IsSoftDeleted).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FilesystemAssetId: ").Append(FilesystemAssetId).Append("\n");
            sb.Append("  JsonAssetId: ").Append(JsonAssetId).Append("\n");
            sb.Append("  MimeTypeId: ").Append(MimeTypeId).Append("\n");
            sb.Append("  IsPublished: ").Append(IsPublished).Append("\n");
            sb.Append("  PublishedURL: ").Append(PublishedURL).Append("\n");
            sb.Append("  PreviewURL: ").Append(PreviewURL).Append("\n");
            sb.Append("  FilesystemAsset: ").Append(FilesystemAsset).Append("\n");
            sb.Append("  JsonAsset: ").Append(JsonAsset).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  ContentCollections: ").Append(ContentCollections).Append("\n");
            sb.Append("  AccessControlList: ").Append(AccessControlList).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentEntitiesHorselessContent);
        }

        /// <summary>
        /// Returns true if ContentEntitiesHorselessContent instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentEntitiesHorselessContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentEntitiesHorselessContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.IsSoftDeleted == input.IsSoftDeleted ||
                    (this.IsSoftDeleted != null &&
                    this.IsSoftDeleted.Equals(input.IsSoftDeleted))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FilesystemAssetId == input.FilesystemAssetId ||
                    (this.FilesystemAssetId != null &&
                    this.FilesystemAssetId.Equals(input.FilesystemAssetId))
                ) && 
                (
                    this.JsonAssetId == input.JsonAssetId ||
                    (this.JsonAssetId != null &&
                    this.JsonAssetId.Equals(input.JsonAssetId))
                ) && 
                (
                    this.MimeTypeId == input.MimeTypeId ||
                    (this.MimeTypeId != null &&
                    this.MimeTypeId.Equals(input.MimeTypeId))
                ) && 
                (
                    this.IsPublished == input.IsPublished ||
                    (this.IsPublished != null &&
                    this.IsPublished.Equals(input.IsPublished))
                ) && 
                (
                    this.PublishedURL == input.PublishedURL ||
                    (this.PublishedURL != null &&
                    this.PublishedURL.Equals(input.PublishedURL))
                ) && 
                (
                    this.PreviewURL == input.PreviewURL ||
                    (this.PreviewURL != null &&
                    this.PreviewURL.Equals(input.PreviewURL))
                ) && 
                (
                    this.FilesystemAsset == input.FilesystemAsset ||
                    (this.FilesystemAsset != null &&
                    this.FilesystemAsset.Equals(input.FilesystemAsset))
                ) && 
                (
                    this.JsonAsset == input.JsonAsset ||
                    (this.JsonAsset != null &&
                    this.JsonAsset.Equals(input.JsonAsset))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.ContentCollections == input.ContentCollections ||
                    this.ContentCollections != null &&
                    input.ContentCollections != null &&
                    this.ContentCollections.SequenceEqual(input.ContentCollections)
                ) && 
                (
                    this.AccessControlList == input.AccessControlList ||
                    this.AccessControlList != null &&
                    input.AccessControlList != null &&
                    this.AccessControlList.SequenceEqual(input.AccessControlList)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.IsSoftDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsSoftDeleted.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.FilesystemAssetId != null)
                {
                    hashCode = (hashCode * 59) + this.FilesystemAssetId.GetHashCode();
                }
                if (this.JsonAssetId != null)
                {
                    hashCode = (hashCode * 59) + this.JsonAssetId.GetHashCode();
                }
                if (this.MimeTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.MimeTypeId.GetHashCode();
                }
                if (this.IsPublished != null)
                {
                    hashCode = (hashCode * 59) + this.IsPublished.GetHashCode();
                }
                if (this.PublishedURL != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedURL.GetHashCode();
                }
                if (this.PreviewURL != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewURL.GetHashCode();
                }
                if (this.FilesystemAsset != null)
                {
                    hashCode = (hashCode * 59) + this.FilesystemAsset.GetHashCode();
                }
                if (this.JsonAsset != null)
                {
                    hashCode = (hashCode * 59) + this.JsonAsset.GetHashCode();
                }
                if (this.MimeType != null)
                {
                    hashCode = (hashCode * 59) + this.MimeType.GetHashCode();
                }
                if (this.ContentCollections != null)
                {
                    hashCode = (hashCode * 59) + this.ContentCollections.GetHashCode();
                }
                if (this.AccessControlList != null)
                {
                    hashCode = (hashCode * 59) + this.AccessControlList.GetHashCode();
                }
                if (this.Owners != null)
                {
                    hashCode = (hashCode * 59) + this.Owners.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
