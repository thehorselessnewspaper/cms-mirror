/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// HostingEntitiesTenantIdentifierStrategy
    /// </summary>
    [DataContract(Name = "HostingEntitiesTenantIdentifierStrategy")]
    public partial class HostingEntitiesTenantIdentifierStrategy : IEquatable<HostingEntitiesTenantIdentifierStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostingEntitiesTenantIdentifierStrategy" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="isSoftDeleted">isSoftDeleted.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="targetTenantId">targetTenantId.</param>
        /// <param name="targetTenant">targetTenant.</param>
        /// <param name="strategyContainers">strategyContainers.</param>
        public HostingEntitiesTenantIdentifierStrategy(Guid id = default(Guid), string displayName = default(string), string objectId = default(string), bool? isSoftDeleted = default(bool?), DateTime? createdAt = default(DateTime?), Guid? targetTenantId = default(Guid?), HostingEntitiesTenant targetTenant = default(HostingEntitiesTenant), List<HostingEntitiesTenantIdentifierStrategyContainer> strategyContainers = default(List<HostingEntitiesTenantIdentifierStrategyContainer>))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.ObjectId = objectId;
            this.IsSoftDeleted = isSoftDeleted;
            this.CreatedAt = createdAt;
            this.TargetTenantId = targetTenantId;
            this.TargetTenant = targetTenant;
            this.StrategyContainers = strategyContainers;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "objectId", EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsSoftDeleted
        /// </summary>
        [DataMember(Name = "isSoftDeleted", EmitDefaultValue = true)]
        public bool? IsSoftDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TargetTenantId
        /// </summary>
        [DataMember(Name = "targetTenantId", EmitDefaultValue = true)]
        public Guid? TargetTenantId { get; set; }

        /// <summary>
        /// Gets or Sets TargetTenant
        /// </summary>
        [DataMember(Name = "targetTenant", EmitDefaultValue = false)]
        public HostingEntitiesTenant TargetTenant { get; set; }

        /// <summary>
        /// Gets or Sets StrategyContainers
        /// </summary>
        [DataMember(Name = "strategyContainers", EmitDefaultValue = true)]
        public List<HostingEntitiesTenantIdentifierStrategyContainer> StrategyContainers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HostingEntitiesTenantIdentifierStrategy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  IsSoftDeleted: ").Append(IsSoftDeleted).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  TargetTenantId: ").Append(TargetTenantId).Append("\n");
            sb.Append("  TargetTenant: ").Append(TargetTenant).Append("\n");
            sb.Append("  StrategyContainers: ").Append(StrategyContainers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostingEntitiesTenantIdentifierStrategy);
        }

        /// <summary>
        /// Returns true if HostingEntitiesTenantIdentifierStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of HostingEntitiesTenantIdentifierStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostingEntitiesTenantIdentifierStrategy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.IsSoftDeleted == input.IsSoftDeleted ||
                    (this.IsSoftDeleted != null &&
                    this.IsSoftDeleted.Equals(input.IsSoftDeleted))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.TargetTenantId == input.TargetTenantId ||
                    (this.TargetTenantId != null &&
                    this.TargetTenantId.Equals(input.TargetTenantId))
                ) && 
                (
                    this.TargetTenant == input.TargetTenant ||
                    (this.TargetTenant != null &&
                    this.TargetTenant.Equals(input.TargetTenant))
                ) && 
                (
                    this.StrategyContainers == input.StrategyContainers ||
                    this.StrategyContainers != null &&
                    input.StrategyContainers != null &&
                    this.StrategyContainers.SequenceEqual(input.StrategyContainers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.IsSoftDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsSoftDeleted.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.TargetTenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetTenantId.GetHashCode();
                }
                if (this.TargetTenant != null)
                {
                    hashCode = (hashCode * 59) + this.TargetTenant.GetHashCode();
                }
                if (this.StrategyContainers != null)
                {
                    hashCode = (hashCode * 59) + this.StrategyContainers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
