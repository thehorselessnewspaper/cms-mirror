/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// MvcPartialViewResult
    /// </summary>
    [DataContract(Name = "MvcPartialViewResult")]
    public partial class MvcPartialViewResult : IEquatable<MvcPartialViewResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MvcPartialViewResult" /> class.
        /// </summary>
        /// <param name="statusCode">statusCode.</param>
        /// <param name="viewName">viewName.</param>
        /// <param name="viewData">viewData.</param>
        /// <param name="tempData">tempData.</param>
        /// <param name="viewEngine">viewEngine.</param>
        /// <param name="contentType">contentType.</param>
        public MvcPartialViewResult(int? statusCode = default(int?), string viewName = default(string), Dictionary<string, Object> viewData = default(Dictionary<string, Object>), Dictionary<string, Object> tempData = default(Dictionary<string, Object>), Object viewEngine = default(Object), string contentType = default(string))
        {
            this.StatusCode = statusCode;
            this.ViewName = viewName;
            this.ViewData = viewData;
            this.TempData = tempData;
            this.ViewEngine = viewEngine;
            this.ContentType = contentType;
        }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "StatusCode", EmitDefaultValue = true)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ViewName
        /// </summary>
        [DataMember(Name = "ViewName", EmitDefaultValue = true)]
        public string ViewName { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "Model", EmitDefaultValue = true)]
        public Object Model { get; private set; }

        /// <summary>
        /// Returns false as Model should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeModel()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ViewData
        /// </summary>
        [DataMember(Name = "ViewData", EmitDefaultValue = true)]
        public Dictionary<string, Object> ViewData { get; set; }

        /// <summary>
        /// Gets or Sets TempData
        /// </summary>
        [DataMember(Name = "TempData", EmitDefaultValue = true)]
        public Dictionary<string, Object> TempData { get; set; }

        /// <summary>
        /// Gets or Sets ViewEngine
        /// </summary>
        [DataMember(Name = "ViewEngine", EmitDefaultValue = false)]
        public Object ViewEngine { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "ContentType", EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MvcPartialViewResult {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ViewData: ").Append(ViewData).Append("\n");
            sb.Append("  TempData: ").Append(TempData).Append("\n");
            sb.Append("  ViewEngine: ").Append(ViewEngine).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MvcPartialViewResult);
        }

        /// <summary>
        /// Returns true if MvcPartialViewResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MvcPartialViewResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MvcPartialViewResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.ViewName == input.ViewName ||
                    (this.ViewName != null &&
                    this.ViewName.Equals(input.ViewName))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.ViewData == input.ViewData ||
                    this.ViewData != null &&
                    input.ViewData != null &&
                    this.ViewData.SequenceEqual(input.ViewData)
                ) && 
                (
                    this.TempData == input.TempData ||
                    this.TempData != null &&
                    input.TempData != null &&
                    this.TempData.SequenceEqual(input.TempData)
                ) && 
                (
                    this.ViewEngine == input.ViewEngine ||
                    (this.ViewEngine != null &&
                    this.ViewEngine.Equals(input.ViewEngine))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusCode != null)
                {
                    hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                }
                if (this.ViewName != null)
                {
                    hashCode = (hashCode * 59) + this.ViewName.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.ViewData != null)
                {
                    hashCode = (hashCode * 59) + this.ViewData.GetHashCode();
                }
                if (this.TempData != null)
                {
                    hashCode = (hashCode * 59) + this.TempData.GetHashCode();
                }
                if (this.ViewEngine != null)
                {
                    hashCode = (hashCode * 59) + this.ViewEngine.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
