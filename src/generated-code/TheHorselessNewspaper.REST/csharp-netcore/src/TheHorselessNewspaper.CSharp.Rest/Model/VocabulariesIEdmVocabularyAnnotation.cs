/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// VocabulariesIEdmVocabularyAnnotation
    /// </summary>
    [DataContract(Name = "VocabulariesIEdmVocabularyAnnotation")]
    public partial class VocabulariesIEdmVocabularyAnnotation : IEquatable<VocabulariesIEdmVocabularyAnnotation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VocabulariesIEdmVocabularyAnnotation" /> class.
        /// </summary>
        /// <param name="term">term.</param>
        /// <param name="target">target.</param>
        /// <param name="value">value.</param>
        public VocabulariesIEdmVocabularyAnnotation(VocabulariesIEdmTerm term = default(VocabulariesIEdmTerm), Object target = default(Object), EdmIEdmExpression value = default(EdmIEdmExpression))
        {
            this.Term = term;
            this.Target = target;
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets Qualifier
        /// </summary>
        [DataMember(Name = "qualifier", EmitDefaultValue = true)]
        public string Qualifier { get; private set; }

        /// <summary>
        /// Returns false as Qualifier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQualifier()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Term
        /// </summary>
        [DataMember(Name = "term", EmitDefaultValue = false)]
        public VocabulariesIEdmTerm Term { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public Object Target { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public EdmIEdmExpression Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VocabulariesIEdmVocabularyAnnotation {\n");
            sb.Append("  Qualifier: ").Append(Qualifier).Append("\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VocabulariesIEdmVocabularyAnnotation);
        }

        /// <summary>
        /// Returns true if VocabulariesIEdmVocabularyAnnotation instances are equal
        /// </summary>
        /// <param name="input">Instance of VocabulariesIEdmVocabularyAnnotation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VocabulariesIEdmVocabularyAnnotation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Qualifier == input.Qualifier ||
                    (this.Qualifier != null &&
                    this.Qualifier.Equals(input.Qualifier))
                ) && 
                (
                    this.Term == input.Term ||
                    (this.Term != null &&
                    this.Term.Equals(input.Term))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Qualifier != null)
                {
                    hashCode = (hashCode * 59) + this.Qualifier.GetHashCode();
                }
                if (this.Term != null)
                {
                    hashCode = (hashCode * 59) + this.Term.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
