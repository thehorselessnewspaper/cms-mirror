/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// EdmIEdmModel
    /// </summary>
    [DataContract(Name = "EdmIEdmModel")]
    public partial class EdmIEdmModel : IEquatable<EdmIEdmModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdmIEdmModel" /> class.
        /// </summary>
        /// <param name="directValueAnnotationsManager">directValueAnnotationsManager.</param>
        /// <param name="entityContainer">entityContainer.</param>
        public EdmIEdmModel(Object directValueAnnotationsManager = default(Object), EdmIEdmEntityContainer entityContainer = default(EdmIEdmEntityContainer))
        {
            this.DirectValueAnnotationsManager = directValueAnnotationsManager;
            this.EntityContainer = entityContainer;
        }

        /// <summary>
        /// Gets or Sets SchemaElements
        /// </summary>
        [DataMember(Name = "schemaElements", EmitDefaultValue = true)]
        public List<EdmIEdmSchemaElement> SchemaElements { get; private set; }

        /// <summary>
        /// Returns false as SchemaElements should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchemaElements()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VocabularyAnnotations
        /// </summary>
        [DataMember(Name = "vocabularyAnnotations", EmitDefaultValue = true)]
        public List<VocabulariesIEdmVocabularyAnnotation> VocabularyAnnotations { get; private set; }

        /// <summary>
        /// Returns false as VocabularyAnnotations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVocabularyAnnotations()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ReferencedModels
        /// </summary>
        [DataMember(Name = "referencedModels", EmitDefaultValue = true)]
        public List<EdmIEdmModel> ReferencedModels { get; private set; }

        /// <summary>
        /// Returns false as ReferencedModels should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferencedModels()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DeclaredNamespaces
        /// </summary>
        [DataMember(Name = "declaredNamespaces", EmitDefaultValue = true)]
        public List<string> DeclaredNamespaces { get; private set; }

        /// <summary>
        /// Returns false as DeclaredNamespaces should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeclaredNamespaces()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DirectValueAnnotationsManager
        /// </summary>
        [DataMember(Name = "directValueAnnotationsManager", EmitDefaultValue = false)]
        public Object DirectValueAnnotationsManager { get; set; }

        /// <summary>
        /// Gets or Sets EntityContainer
        /// </summary>
        [DataMember(Name = "entityContainer", EmitDefaultValue = false)]
        public EdmIEdmEntityContainer EntityContainer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdmIEdmModel {\n");
            sb.Append("  SchemaElements: ").Append(SchemaElements).Append("\n");
            sb.Append("  VocabularyAnnotations: ").Append(VocabularyAnnotations).Append("\n");
            sb.Append("  ReferencedModels: ").Append(ReferencedModels).Append("\n");
            sb.Append("  DeclaredNamespaces: ").Append(DeclaredNamespaces).Append("\n");
            sb.Append("  DirectValueAnnotationsManager: ").Append(DirectValueAnnotationsManager).Append("\n");
            sb.Append("  EntityContainer: ").Append(EntityContainer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdmIEdmModel);
        }

        /// <summary>
        /// Returns true if EdmIEdmModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EdmIEdmModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdmIEdmModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SchemaElements == input.SchemaElements ||
                    this.SchemaElements != null &&
                    input.SchemaElements != null &&
                    this.SchemaElements.SequenceEqual(input.SchemaElements)
                ) && 
                (
                    this.VocabularyAnnotations == input.VocabularyAnnotations ||
                    this.VocabularyAnnotations != null &&
                    input.VocabularyAnnotations != null &&
                    this.VocabularyAnnotations.SequenceEqual(input.VocabularyAnnotations)
                ) && 
                (
                    this.ReferencedModels == input.ReferencedModels ||
                    this.ReferencedModels != null &&
                    input.ReferencedModels != null &&
                    this.ReferencedModels.SequenceEqual(input.ReferencedModels)
                ) && 
                (
                    this.DeclaredNamespaces == input.DeclaredNamespaces ||
                    this.DeclaredNamespaces != null &&
                    input.DeclaredNamespaces != null &&
                    this.DeclaredNamespaces.SequenceEqual(input.DeclaredNamespaces)
                ) && 
                (
                    this.DirectValueAnnotationsManager == input.DirectValueAnnotationsManager ||
                    (this.DirectValueAnnotationsManager != null &&
                    this.DirectValueAnnotationsManager.Equals(input.DirectValueAnnotationsManager))
                ) && 
                (
                    this.EntityContainer == input.EntityContainer ||
                    (this.EntityContainer != null &&
                    this.EntityContainer.Equals(input.EntityContainer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemaElements != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaElements.GetHashCode();
                }
                if (this.VocabularyAnnotations != null)
                {
                    hashCode = (hashCode * 59) + this.VocabularyAnnotations.GetHashCode();
                }
                if (this.ReferencedModels != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedModels.GetHashCode();
                }
                if (this.DeclaredNamespaces != null)
                {
                    hashCode = (hashCode * 59) + this.DeclaredNamespaces.GetHashCode();
                }
                if (this.DirectValueAnnotationsManager != null)
                {
                    hashCode = (hashCode * 59) + this.DirectValueAnnotationsManager.GetHashCode();
                }
                if (this.EntityContainer != null)
                {
                    hashCode = (hashCode * 59) + this.EntityContainer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
