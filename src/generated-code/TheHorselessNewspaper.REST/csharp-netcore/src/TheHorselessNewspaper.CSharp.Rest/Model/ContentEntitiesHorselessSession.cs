/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TheHorselessNewspaper.CSharp.Rest.Client.OpenAPIDateConverter;

namespace TheHorselessNewspaper.CSharp.Rest.Model
{
    /// <summary>
    /// ContentEntitiesHorselessSession
    /// </summary>
    [DataContract(Name = "ContentEntitiesHorselessSession")]
    public partial class ContentEntitiesHorselessSession : IEquatable<ContentEntitiesHorselessSession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentEntitiesHorselessSession" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="isSoftDeleted">isSoftDeleted.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="iss">iss.</param>
        /// <param name="aud">aud.</param>
        /// <param name="sub">sub.</param>
        /// <param name="isAnonymous">isAnonymous.</param>
        /// <param name="accessControlList">accessControlList.</param>
        /// <param name="owners">owners.</param>
        /// <param name="timestamp">timestamp.</param>
        public ContentEntitiesHorselessSession(Guid id = default(Guid), string displayName = default(string), string objectId = default(string), bool? isSoftDeleted = default(bool?), DateTime? createdAt = default(DateTime?), string sessionId = default(string), string iss = default(string), string aud = default(string), string sub = default(string), bool? isAnonymous = default(bool?), List<ContentEntitiesAccessControlEntry> accessControlList = default(List<ContentEntitiesAccessControlEntry>), List<ContentEntitiesPrincipal> owners = default(List<ContentEntitiesPrincipal>), byte[] timestamp = default(byte[]))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.ObjectId = objectId;
            this.IsSoftDeleted = isSoftDeleted;
            this.CreatedAt = createdAt;
            this.SessionId = sessionId;
            this.Iss = iss;
            this.Aud = aud;
            this.Sub = sub;
            this.IsAnonymous = isAnonymous;
            this.AccessControlList = accessControlList;
            this.Owners = owners;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "objectId", EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets IsSoftDeleted
        /// </summary>
        [DataMember(Name = "isSoftDeleted", EmitDefaultValue = true)]
        public bool? IsSoftDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "sessionId", EmitDefaultValue = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Iss
        /// </summary>
        [DataMember(Name = "iss", EmitDefaultValue = true)]
        public string Iss { get; set; }

        /// <summary>
        /// Gets or Sets Aud
        /// </summary>
        [DataMember(Name = "aud", EmitDefaultValue = true)]
        public string Aud { get; set; }

        /// <summary>
        /// Gets or Sets Sub
        /// </summary>
        [DataMember(Name = "sub", EmitDefaultValue = true)]
        public string Sub { get; set; }

        /// <summary>
        /// Gets or Sets IsAnonymous
        /// </summary>
        [DataMember(Name = "isAnonymous", EmitDefaultValue = true)]
        public bool? IsAnonymous { get; set; }

        /// <summary>
        /// Gets or Sets AccessControlList
        /// </summary>
        [DataMember(Name = "accessControlList", EmitDefaultValue = true)]
        public List<ContentEntitiesAccessControlEntry> AccessControlList { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name = "owners", EmitDefaultValue = true)]
        public List<ContentEntitiesPrincipal> Owners { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentEntitiesHorselessSession {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  IsSoftDeleted: ").Append(IsSoftDeleted).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Iss: ").Append(Iss).Append("\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  IsAnonymous: ").Append(IsAnonymous).Append("\n");
            sb.Append("  AccessControlList: ").Append(AccessControlList).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentEntitiesHorselessSession);
        }

        /// <summary>
        /// Returns true if ContentEntitiesHorselessSession instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentEntitiesHorselessSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentEntitiesHorselessSession input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.IsSoftDeleted == input.IsSoftDeleted ||
                    (this.IsSoftDeleted != null &&
                    this.IsSoftDeleted.Equals(input.IsSoftDeleted))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.Iss == input.Iss ||
                    (this.Iss != null &&
                    this.Iss.Equals(input.Iss))
                ) && 
                (
                    this.Aud == input.Aud ||
                    (this.Aud != null &&
                    this.Aud.Equals(input.Aud))
                ) && 
                (
                    this.Sub == input.Sub ||
                    (this.Sub != null &&
                    this.Sub.Equals(input.Sub))
                ) && 
                (
                    this.IsAnonymous == input.IsAnonymous ||
                    (this.IsAnonymous != null &&
                    this.IsAnonymous.Equals(input.IsAnonymous))
                ) && 
                (
                    this.AccessControlList == input.AccessControlList ||
                    this.AccessControlList != null &&
                    input.AccessControlList != null &&
                    this.AccessControlList.SequenceEqual(input.AccessControlList)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.IsSoftDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.IsSoftDeleted.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                if (this.Iss != null)
                {
                    hashCode = (hashCode * 59) + this.Iss.GetHashCode();
                }
                if (this.Aud != null)
                {
                    hashCode = (hashCode * 59) + this.Aud.GetHashCode();
                }
                if (this.Sub != null)
                {
                    hashCode = (hashCode * 59) + this.Sub.GetHashCode();
                }
                if (this.IsAnonymous != null)
                {
                    hashCode = (hashCode * 59) + this.IsAnonymous.GetHashCode();
                }
                if (this.AccessControlList != null)
                {
                    hashCode = (hashCode * 59) + this.AccessControlList.GetHashCode();
                }
                if (this.Owners != null)
                {
                    hashCode = (hashCode * 59) + this.Owners.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
