/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TheHorselessNewspaper.CSharp.Rest.Client;
using TheHorselessNewspaper.CSharp.Rest.Model;

namespace TheHorselessNewspaper.CSharp.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INavigationMenuItemRESTApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ContentEntitiesNavigationMenuItem</returns>
        ContentEntitiesNavigationMenuItem NavigationMenuItemRESTControllerCreate(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ApiResponse of ContentEntitiesNavigationMenuItem</returns>
        ApiResponse<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerCreateWithHttpInfo(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <returns>ContentEntitiesNavigationMenuItem</returns>
        ContentEntitiesNavigationMenuItem NavigationMenuItemRESTControllerGetByObjectId(string objectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <returns>ApiResponse of ContentEntitiesNavigationMenuItem</returns>
        ApiResponse<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerGetByObjectIdWithHttpInfo(string objectId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ContentEntitiesNavigationMenuItem</returns>
        ContentEntitiesNavigationMenuItem NavigationMenuItemRESTControllerUpdate(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ApiResponse of ContentEntitiesNavigationMenuItem</returns>
        ApiResponse<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerUpdateWithHttpInfo(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INavigationMenuItemRESTApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesNavigationMenuItem</returns>
        System.Threading.Tasks.Task<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerCreateAsync(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesNavigationMenuItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesNavigationMenuItem>> NavigationMenuItemRESTControllerCreateWithHttpInfoAsync(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesNavigationMenuItem</returns>
        System.Threading.Tasks.Task<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerGetByObjectIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesNavigationMenuItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesNavigationMenuItem>> NavigationMenuItemRESTControllerGetByObjectIdWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesNavigationMenuItem</returns>
        System.Threading.Tasks.Task<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerUpdateAsync(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesNavigationMenuItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesNavigationMenuItem>> NavigationMenuItemRESTControllerUpdateWithHttpInfoAsync(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INavigationMenuItemRESTApi : INavigationMenuItemRESTApiSync, INavigationMenuItemRESTApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NavigationMenuItemRESTApi : INavigationMenuItemRESTApi
    {
        private TheHorselessNewspaper.CSharp.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigationMenuItemRESTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NavigationMenuItemRESTApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigationMenuItemRESTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NavigationMenuItemRESTApi(string basePath)
        {
            this.Configuration = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.MergeConfigurations(
                TheHorselessNewspaper.CSharp.Rest.Client.GlobalConfiguration.Instance,
                new TheHorselessNewspaper.CSharp.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigationMenuItemRESTApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NavigationMenuItemRESTApi(TheHorselessNewspaper.CSharp.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.MergeConfigurations(
                TheHorselessNewspaper.CSharp.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigationMenuItemRESTApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NavigationMenuItemRESTApi(TheHorselessNewspaper.CSharp.Rest.Client.ISynchronousClient client, TheHorselessNewspaper.CSharp.Rest.Client.IAsynchronousClient asyncClient, TheHorselessNewspaper.CSharp.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TheHorselessNewspaper.CSharp.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ContentEntitiesNavigationMenuItem</returns>
        public ContentEntitiesNavigationMenuItem NavigationMenuItemRESTControllerCreate(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> localVarResponse = NavigationMenuItemRESTControllerCreateWithHttpInfo(contentEntitiesNavigationMenuItem);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ApiResponse of ContentEntitiesNavigationMenuItem</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerCreateWithHttpInfo(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentEntitiesNavigationMenuItem;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesNavigationMenuItem>("/api/HorselessContentModel/NavigationMenuItem/Create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigationMenuItemRESTControllerCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesNavigationMenuItem</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerCreateAsync(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> localVarResponse = await NavigationMenuItemRESTControllerCreateWithHttpInfoAsync(contentEntitiesNavigationMenuItem, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesNavigationMenuItem)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem>> NavigationMenuItemRESTControllerCreateWithHttpInfoAsync(ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentEntitiesNavigationMenuItem;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesNavigationMenuItem>("/api/HorselessContentModel/NavigationMenuItem/Create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigationMenuItemRESTControllerCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <returns>ContentEntitiesNavigationMenuItem</returns>
        public ContentEntitiesNavigationMenuItem NavigationMenuItemRESTControllerGetByObjectId(string objectId)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> localVarResponse = NavigationMenuItemRESTControllerGetByObjectIdWithHttpInfo(objectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <returns>ApiResponse of ContentEntitiesNavigationMenuItem</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerGetByObjectIdWithHttpInfo(string objectId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling NavigationMenuItemRESTApi->NavigationMenuItemRESTControllerGetByObjectId");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentEntitiesNavigationMenuItem>("/api/HorselessContentModel/NavigationMenuItem/GetByObjectId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigationMenuItemRESTControllerGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesNavigationMenuItem</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerGetByObjectIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> localVarResponse = await NavigationMenuItemRESTControllerGetByObjectIdWithHttpInfoAsync(objectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesNavigationMenuItem)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem>> NavigationMenuItemRESTControllerGetByObjectIdWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling NavigationMenuItemRESTApi->NavigationMenuItemRESTControllerGetByObjectId");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentEntitiesNavigationMenuItem>("/api/HorselessContentModel/NavigationMenuItem/GetByObjectId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigationMenuItemRESTControllerGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ContentEntitiesNavigationMenuItem</returns>
        public ContentEntitiesNavigationMenuItem NavigationMenuItemRESTControllerUpdate(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> localVarResponse = NavigationMenuItemRESTControllerUpdateWithHttpInfo(contentCollectionId, contentEntitiesNavigationMenuItem);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <returns>ApiResponse of ContentEntitiesNavigationMenuItem</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerUpdateWithHttpInfo(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?))
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling NavigationMenuItemRESTApi->NavigationMenuItemRESTControllerUpdate");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.Data = contentEntitiesNavigationMenuItem;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesNavigationMenuItem>("/api/HorselessContentModel/NavigationMenuItem/Update/{contentCollectionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigationMenuItemRESTControllerUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesNavigationMenuItem</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesNavigationMenuItem> NavigationMenuItemRESTControllerUpdateAsync(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem> localVarResponse = await NavigationMenuItemRESTControllerUpdateWithHttpInfoAsync(contentCollectionId, contentEntitiesNavigationMenuItem, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="contentEntitiesNavigationMenuItem"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesNavigationMenuItem)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesNavigationMenuItem>> NavigationMenuItemRESTControllerUpdateWithHttpInfoAsync(string contentCollectionId, ContentEntitiesNavigationMenuItem? contentEntitiesNavigationMenuItem = default(ContentEntitiesNavigationMenuItem?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling NavigationMenuItemRESTApi->NavigationMenuItemRESTControllerUpdate");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.Data = contentEntitiesNavigationMenuItem;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesNavigationMenuItem>("/api/HorselessContentModel/NavigationMenuItem/Update/{contentCollectionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigationMenuItemRESTControllerUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
