/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TheHorselessNewspaper.CSharp.Rest.Client;
using TheHorselessNewspaper.CSharp.Rest.Model;

namespace TheHorselessNewspaper.CSharp.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantRESTApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        ContentEntitiesTenant ContentEntitiesTenantRESTGetByObjectId(string objectId, string tenant, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        ApiResponse<ContentEntitiesTenant> ContentEntitiesTenantRESTGetByObjectIdWithHttpInfo(string objectId, string tenant, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        ContentEntitiesTenant ContentEntitiesTenantRESTUpdate(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        ApiResponse<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdateWithHttpInfo(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        ContentEntitiesTenant ContentEntitiesTenantRESTUpdateProperties(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        ApiResponse<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdatePropertiesWithHttpInfo(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HostingEntitiesTenant</returns>
        HostingEntitiesTenant HostingEntitiesTenantRESTCreate(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HostingEntitiesTenant</returns>
        ApiResponse<HostingEntitiesTenant> HostingEntitiesTenantRESTCreateWithHttpInfo(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HostingEntitiesTenant</returns>
        HostingEntitiesTenant HostingEntitiesTenantRESTGetByObjectId(string objectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HostingEntitiesTenant</returns>
        ApiResponse<HostingEntitiesTenant> HostingEntitiesTenantRESTGetByObjectIdWithHttpInfo(string objectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HostingEntitiesTenant</returns>
        HostingEntitiesTenant HostingEntitiesTenantRESTUpdate(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HostingEntitiesTenant</returns>
        ApiResponse<HostingEntitiesTenant> HostingEntitiesTenantRESTUpdateWithHttpInfo(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        ContentEntitiesTenant TenantApiHorselessContentModelTenantCreatePost(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        ApiResponse<ContentEntitiesTenant> TenantApiHorselessContentModelTenantCreatePostWithHttpInfo(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantRESTApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        System.Threading.Tasks.Task<ContentEntitiesTenant> ContentEntitiesTenantRESTGetByObjectIdAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesTenant>> ContentEntitiesTenantRESTGetByObjectIdWithHttpInfoAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        System.Threading.Tasks.Task<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdateAsync(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesTenant>> ContentEntitiesTenantRESTUpdateWithHttpInfoAsync(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        System.Threading.Tasks.Task<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdatePropertiesAsync(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesTenant>> ContentEntitiesTenantRESTUpdatePropertiesWithHttpInfoAsync(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HostingEntitiesTenant</returns>
        System.Threading.Tasks.Task<HostingEntitiesTenant> HostingEntitiesTenantRESTCreateAsync(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HostingEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<HostingEntitiesTenant>> HostingEntitiesTenantRESTCreateWithHttpInfoAsync(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HostingEntitiesTenant</returns>
        System.Threading.Tasks.Task<HostingEntitiesTenant> HostingEntitiesTenantRESTGetByObjectIdAsync(string objectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HostingEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<HostingEntitiesTenant>> HostingEntitiesTenantRESTGetByObjectIdWithHttpInfoAsync(string objectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HostingEntitiesTenant</returns>
        System.Threading.Tasks.Task<HostingEntitiesTenant> HostingEntitiesTenantRESTUpdateAsync(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HostingEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<HostingEntitiesTenant>> HostingEntitiesTenantRESTUpdateWithHttpInfoAsync(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        System.Threading.Tasks.Task<ContentEntitiesTenant> TenantApiHorselessContentModelTenantCreatePostAsync(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesTenant>> TenantApiHorselessContentModelTenantCreatePostWithHttpInfoAsync(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantRESTApi : ITenantRESTApiSync, ITenantRESTApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantRESTApi : ITenantRESTApi
    {
        private TheHorselessNewspaper.CSharp.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantRESTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantRESTApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantRESTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantRESTApi(string basePath)
        {
            this.Configuration = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.MergeConfigurations(
                TheHorselessNewspaper.CSharp.Rest.Client.GlobalConfiguration.Instance,
                new TheHorselessNewspaper.CSharp.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantRESTApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantRESTApi(TheHorselessNewspaper.CSharp.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.MergeConfigurations(
                TheHorselessNewspaper.CSharp.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantRESTApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TenantRESTApi(TheHorselessNewspaper.CSharp.Rest.Client.ISynchronousClient client, TheHorselessNewspaper.CSharp.Rest.Client.IAsynchronousClient asyncClient, TheHorselessNewspaper.CSharp.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TheHorselessNewspaper.CSharp.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        public ContentEntitiesTenant ContentEntitiesTenantRESTGetByObjectId(string objectId, string tenant, int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = ContentEntitiesTenantRESTGetByObjectIdWithHttpInfo(objectId, tenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> ContentEntitiesTenantRESTGetByObjectIdWithHttpInfo(string objectId, string tenant, int operationIndex = 0)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling TenantRESTApi->ContentEntitiesTenantRESTGetByObjectId");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->ContentEntitiesTenantRESTGetByObjectId");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            localVarRequestOptions.Operation = "TenantRESTApi.ContentEntitiesTenantRESTGetByObjectId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/GetByObjectId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesTenantRESTGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesTenant> ContentEntitiesTenantRESTGetByObjectIdAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = await ContentEntitiesTenantRESTGetByObjectIdWithHttpInfoAsync(objectId, tenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant>> ContentEntitiesTenantRESTGetByObjectIdWithHttpInfoAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling TenantRESTApi->ContentEntitiesTenantRESTGetByObjectId");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->ContentEntitiesTenantRESTGetByObjectId");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            localVarRequestOptions.Operation = "TenantRESTApi.ContentEntitiesTenantRESTGetByObjectId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/GetByObjectId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesTenantRESTGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        public ContentEntitiesTenant ContentEntitiesTenantRESTUpdate(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = ContentEntitiesTenantRESTUpdateWithHttpInfo(contentCollectionId, tenant, contentEntitiesTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdateWithHttpInfo(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0)
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdate");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdate");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.ContentEntitiesTenantRESTUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/Update/{contentCollectionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesTenantRESTUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdateAsync(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = await ContentEntitiesTenantRESTUpdateWithHttpInfoAsync(contentCollectionId, tenant, contentEntitiesTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant>> ContentEntitiesTenantRESTUpdateWithHttpInfoAsync(string contentCollectionId, string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdate");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdate");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.ContentEntitiesTenantRESTUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/Update/{contentCollectionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesTenantRESTUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        public ContentEntitiesTenant ContentEntitiesTenantRESTUpdateProperties(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = ContentEntitiesTenantRESTUpdatePropertiesWithHttpInfo(contentCollectionId, tenant, updatedProperties, contentEntitiesTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdatePropertiesWithHttpInfo(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0)
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdateProperties");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdateProperties");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (updatedProperties != null)
            {
                localVarRequestOptions.HeaderParameters.Add("updatedProperties", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(updatedProperties)); // header parameter
            }
            localVarRequestOptions.Data = contentEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.ContentEntitiesTenantRESTUpdateProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/UpdateProperties/{contentCollectionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesTenantRESTUpdateProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesTenant> ContentEntitiesTenantRESTUpdatePropertiesAsync(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = await ContentEntitiesTenantRESTUpdatePropertiesWithHttpInfoAsync(contentCollectionId, tenant, updatedProperties, contentEntitiesTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="updatedProperties"> (optional)</param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant>> ContentEntitiesTenantRESTUpdatePropertiesWithHttpInfoAsync(string contentCollectionId, string tenant, List<string>? updatedProperties = default(List<string>?), ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdateProperties");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->ContentEntitiesTenantRESTUpdateProperties");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (updatedProperties != null)
            {
                localVarRequestOptions.HeaderParameters.Add("updatedProperties", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(updatedProperties)); // header parameter
            }
            localVarRequestOptions.Data = contentEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.ContentEntitiesTenantRESTUpdateProperties";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/UpdateProperties/{contentCollectionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesTenantRESTUpdateProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HostingEntitiesTenant</returns>
        public HostingEntitiesTenant HostingEntitiesTenantRESTCreate(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> localVarResponse = HostingEntitiesTenantRESTCreateWithHttpInfo(hostingEntitiesTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HostingEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> HostingEntitiesTenantRESTCreateWithHttpInfo(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hostingEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.HostingEntitiesTenantRESTCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HostingEntitiesTenant>("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantCreate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HostingEntitiesTenantRESTCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HostingEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<HostingEntitiesTenant> HostingEntitiesTenantRESTCreateAsync(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> localVarResponse = await HostingEntitiesTenantRESTCreateWithHttpInfoAsync(hostingEntitiesTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HostingEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant>> HostingEntitiesTenantRESTCreateWithHttpInfoAsync(HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hostingEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.HostingEntitiesTenantRESTCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HostingEntitiesTenant>("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantCreate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HostingEntitiesTenantRESTCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HostingEntitiesTenant</returns>
        public HostingEntitiesTenant HostingEntitiesTenantRESTGetByObjectId(string objectId, int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> localVarResponse = HostingEntitiesTenantRESTGetByObjectIdWithHttpInfo(objectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HostingEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> HostingEntitiesTenantRESTGetByObjectIdWithHttpInfo(string objectId, int operationIndex = 0)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling TenantRESTApi->HostingEntitiesTenantRESTGetByObjectId");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter

            localVarRequestOptions.Operation = "TenantRESTApi.HostingEntitiesTenantRESTGetByObjectId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HostingEntitiesTenant>("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantGetByObjectId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HostingEntitiesTenantRESTGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HostingEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<HostingEntitiesTenant> HostingEntitiesTenantRESTGetByObjectIdAsync(string objectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> localVarResponse = await HostingEntitiesTenantRESTGetByObjectIdWithHttpInfoAsync(objectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HostingEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant>> HostingEntitiesTenantRESTGetByObjectIdWithHttpInfoAsync(string objectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling TenantRESTApi->HostingEntitiesTenantRESTGetByObjectId");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter

            localVarRequestOptions.Operation = "TenantRESTApi.HostingEntitiesTenantRESTGetByObjectId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HostingEntitiesTenant>("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantGetByObjectId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HostingEntitiesTenantRESTGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HostingEntitiesTenant</returns>
        public HostingEntitiesTenant HostingEntitiesTenantRESTUpdate(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> localVarResponse = HostingEntitiesTenantRESTUpdateWithHttpInfo(entityCollectionId, hostingEntitiesTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HostingEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> HostingEntitiesTenantRESTUpdateWithHttpInfo(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0)
        {
            // verify the required parameter 'entityCollectionId' is set
            if (entityCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'entityCollectionId' when calling TenantRESTApi->HostingEntitiesTenantRESTUpdate");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(entityCollectionId)); // path parameter
            localVarRequestOptions.Data = hostingEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.HostingEntitiesTenantRESTUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HostingEntitiesTenant>("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantUpdate/{entityCollectionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HostingEntitiesTenantRESTUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HostingEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<HostingEntitiesTenant> HostingEntitiesTenantRESTUpdateAsync(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant> localVarResponse = await HostingEntitiesTenantRESTUpdateWithHttpInfoAsync(entityCollectionId, hostingEntitiesTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityCollectionId"></param>
        /// <param name="hostingEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HostingEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<HostingEntitiesTenant>> HostingEntitiesTenantRESTUpdateWithHttpInfoAsync(string entityCollectionId, HostingEntitiesTenant? hostingEntitiesTenant = default(HostingEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityCollectionId' is set
            if (entityCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'entityCollectionId' when calling TenantRESTApi->HostingEntitiesTenantRESTUpdate");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(entityCollectionId)); // path parameter
            localVarRequestOptions.Data = hostingEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.HostingEntitiesTenantRESTUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HostingEntitiesTenant>("/api/HorselessHostingModel/TenantREST/HostingEntitiesTenantUpdate/{entityCollectionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HostingEntitiesTenantRESTUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesTenant</returns>
        public ContentEntitiesTenant TenantApiHorselessContentModelTenantCreatePost(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = TenantApiHorselessContentModelTenantCreatePostWithHttpInfo(tenant, contentEntitiesTenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesTenant</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> TenantApiHorselessContentModelTenantCreatePostWithHttpInfo(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->TenantApiHorselessContentModelTenantCreatePost");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.TenantApiHorselessContentModelTenantCreatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/Create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantApiHorselessContentModelTenantCreatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesTenant</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesTenant> TenantApiHorselessContentModelTenantCreatePostAsync(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant> localVarResponse = await TenantApiHorselessContentModelTenantCreatePostWithHttpInfoAsync(tenant, contentEntitiesTenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesTenant"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesTenant)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesTenant>> TenantApiHorselessContentModelTenantCreatePostWithHttpInfoAsync(string tenant, ContentEntitiesTenant? contentEntitiesTenant = default(ContentEntitiesTenant?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling TenantRESTApi->TenantApiHorselessContentModelTenantCreatePost");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesTenant;

            localVarRequestOptions.Operation = "TenantRESTApi.TenantApiHorselessContentModelTenantCreatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesTenant>("/{__tenant__}/api/HorselessContentModel/Tenant/Create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TenantApiHorselessContentModelTenantCreatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
