/*
 * Horseless Content API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TheHorselessNewspaper.CSharp.Rest.Client;
using TheHorselessNewspaper.CSharp.Rest.Model;

namespace TheHorselessNewspaper.CSharp.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeronymRESTApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesMeronym</returns>
        ContentEntitiesMeronym ContentEntitiesMeronymRESTCreate(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesMeronym</returns>
        ApiResponse<ContentEntitiesMeronym> ContentEntitiesMeronymRESTCreateWithHttpInfo(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesMeronym</returns>
        ContentEntitiesMeronym ContentEntitiesMeronymRESTGetByObjectId(string objectId, string tenant, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesMeronym</returns>
        ApiResponse<ContentEntitiesMeronym> ContentEntitiesMeronymRESTGetByObjectIdWithHttpInfo(string objectId, string tenant, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesMeronym</returns>
        ContentEntitiesMeronym ContentEntitiesMeronymRESTUpdate(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesMeronym</returns>
        ApiResponse<ContentEntitiesMeronym> ContentEntitiesMeronymRESTUpdateWithHttpInfo(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeronymRESTApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesMeronym</returns>
        System.Threading.Tasks.Task<ContentEntitiesMeronym> ContentEntitiesMeronymRESTCreateAsync(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesMeronym)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesMeronym>> ContentEntitiesMeronymRESTCreateWithHttpInfoAsync(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesMeronym</returns>
        System.Threading.Tasks.Task<ContentEntitiesMeronym> ContentEntitiesMeronymRESTGetByObjectIdAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesMeronym)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesMeronym>> ContentEntitiesMeronymRESTGetByObjectIdWithHttpInfoAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesMeronym</returns>
        System.Threading.Tasks.Task<ContentEntitiesMeronym> ContentEntitiesMeronymRESTUpdateAsync(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesMeronym)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentEntitiesMeronym>> ContentEntitiesMeronymRESTUpdateWithHttpInfoAsync(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeronymRESTApi : IMeronymRESTApiSync, IMeronymRESTApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeronymRESTApi : IMeronymRESTApi
    {
        private TheHorselessNewspaper.CSharp.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeronymRESTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeronymRESTApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeronymRESTApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeronymRESTApi(string basePath)
        {
            this.Configuration = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.MergeConfigurations(
                TheHorselessNewspaper.CSharp.Rest.Client.GlobalConfiguration.Instance,
                new TheHorselessNewspaper.CSharp.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeronymRESTApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeronymRESTApi(TheHorselessNewspaper.CSharp.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.MergeConfigurations(
                TheHorselessNewspaper.CSharp.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TheHorselessNewspaper.CSharp.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeronymRESTApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MeronymRESTApi(TheHorselessNewspaper.CSharp.Rest.Client.ISynchronousClient client, TheHorselessNewspaper.CSharp.Rest.Client.IAsynchronousClient asyncClient, TheHorselessNewspaper.CSharp.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TheHorselessNewspaper.CSharp.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TheHorselessNewspaper.CSharp.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TheHorselessNewspaper.CSharp.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesMeronym</returns>
        public ContentEntitiesMeronym ContentEntitiesMeronymRESTCreate(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> localVarResponse = ContentEntitiesMeronymRESTCreateWithHttpInfo(tenant, contentEntitiesMeronym);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesMeronym</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> ContentEntitiesMeronymRESTCreateWithHttpInfo(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling MeronymRESTApi->ContentEntitiesMeronymRESTCreate");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesMeronym;

            localVarRequestOptions.Operation = "MeronymRESTApi.ContentEntitiesMeronymRESTCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesMeronym>("/{__tenant__}/api/HorselessContentModel/Meronym/Create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesMeronymRESTCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesMeronym</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesMeronym> ContentEntitiesMeronymRESTCreateAsync(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> localVarResponse = await ContentEntitiesMeronymRESTCreateWithHttpInfoAsync(tenant, contentEntitiesMeronym, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesMeronym)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym>> ContentEntitiesMeronymRESTCreateWithHttpInfoAsync(string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling MeronymRESTApi->ContentEntitiesMeronymRESTCreate");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesMeronym;

            localVarRequestOptions.Operation = "MeronymRESTApi.ContentEntitiesMeronymRESTCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesMeronym>("/{__tenant__}/api/HorselessContentModel/Meronym/Create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesMeronymRESTCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesMeronym</returns>
        public ContentEntitiesMeronym ContentEntitiesMeronymRESTGetByObjectId(string objectId, string tenant, int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> localVarResponse = ContentEntitiesMeronymRESTGetByObjectIdWithHttpInfo(objectId, tenant);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesMeronym</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> ContentEntitiesMeronymRESTGetByObjectIdWithHttpInfo(string objectId, string tenant, int operationIndex = 0)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling MeronymRESTApi->ContentEntitiesMeronymRESTGetByObjectId");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling MeronymRESTApi->ContentEntitiesMeronymRESTGetByObjectId");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            localVarRequestOptions.Operation = "MeronymRESTApi.ContentEntitiesMeronymRESTGetByObjectId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentEntitiesMeronym>("/{__tenant__}/api/HorselessContentModel/Meronym/GetByObjectId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesMeronymRESTGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesMeronym</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesMeronym> ContentEntitiesMeronymRESTGetByObjectIdAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> localVarResponse = await ContentEntitiesMeronymRESTGetByObjectIdWithHttpInfoAsync(objectId, tenant, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"></param>
        /// <param name="tenant"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesMeronym)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym>> ContentEntitiesMeronymRESTGetByObjectIdWithHttpInfoAsync(string objectId, string tenant, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'objectId' when calling MeronymRESTApi->ContentEntitiesMeronymRESTGetByObjectId");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling MeronymRESTApi->ContentEntitiesMeronymRESTGetByObjectId");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            localVarRequestOptions.Operation = "MeronymRESTApi.ContentEntitiesMeronymRESTGetByObjectId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentEntitiesMeronym>("/{__tenant__}/api/HorselessContentModel/Meronym/GetByObjectId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesMeronymRESTGetByObjectId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentEntitiesMeronym</returns>
        public ContentEntitiesMeronym ContentEntitiesMeronymRESTUpdate(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0)
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> localVarResponse = ContentEntitiesMeronymRESTUpdateWithHttpInfo(contentCollectionId, tenant, contentEntitiesMeronym);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentEntitiesMeronym</returns>
        public TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> ContentEntitiesMeronymRESTUpdateWithHttpInfo(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0)
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling MeronymRESTApi->ContentEntitiesMeronymRESTUpdate");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling MeronymRESTApi->ContentEntitiesMeronymRESTUpdate");
            }

            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesMeronym;

            localVarRequestOptions.Operation = "MeronymRESTApi.ContentEntitiesMeronymRESTUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContentEntitiesMeronym>("/{__tenant__}/api/HorselessContentModel/Meronym/Update/{contentCollectionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesMeronymRESTUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentEntitiesMeronym</returns>
        public async System.Threading.Tasks.Task<ContentEntitiesMeronym> ContentEntitiesMeronymRESTUpdateAsync(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym> localVarResponse = await ContentEntitiesMeronymRESTUpdateWithHttpInfoAsync(contentCollectionId, tenant, contentEntitiesMeronym, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TheHorselessNewspaper.CSharp.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCollectionId"></param>
        /// <param name="tenant"></param>
        /// <param name="contentEntitiesMeronym"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentEntitiesMeronym)</returns>
        public async System.Threading.Tasks.Task<TheHorselessNewspaper.CSharp.Rest.Client.ApiResponse<ContentEntitiesMeronym>> ContentEntitiesMeronymRESTUpdateWithHttpInfoAsync(string contentCollectionId, string tenant, ContentEntitiesMeronym? contentEntitiesMeronym = default(ContentEntitiesMeronym?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentCollectionId' is set
            if (contentCollectionId == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'contentCollectionId' when calling MeronymRESTApi->ContentEntitiesMeronymRESTUpdate");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new TheHorselessNewspaper.CSharp.Rest.Client.ApiException(400, "Missing required parameter 'tenant' when calling MeronymRESTApi->ContentEntitiesMeronymRESTUpdate");
            }


            TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions localVarRequestOptions = new TheHorselessNewspaper.CSharp.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "text/plain",
                "application/octet-stream",
                "text/json"
            };

            var localVarContentType = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentCollectionId", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(contentCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("__tenant__", TheHorselessNewspaper.CSharp.Rest.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.Data = contentEntitiesMeronym;

            localVarRequestOptions.Operation = "MeronymRESTApi.ContentEntitiesMeronymRESTUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContentEntitiesMeronym>("/{__tenant__}/api/HorselessContentModel/Meronym/Update/{contentCollectionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentEntitiesMeronymRESTUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
