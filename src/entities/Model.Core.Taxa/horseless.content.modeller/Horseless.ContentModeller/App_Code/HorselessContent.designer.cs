#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="THNLP_Content")]
public partial class HorselessContentDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAccessControlEntry(AccessControlEntry instance);
  partial void UpdateAccessControlEntry(AccessControlEntry instance);
  partial void DeleteAccessControlEntry(AccessControlEntry instance);
  partial void InsertContentCollectionContentCollection(ContentCollectionContentCollection instance);
  partial void UpdateContentCollectionContentCollection(ContentCollectionContentCollection instance);
  partial void DeleteContentCollectionContentCollection(ContentCollectionContentCollection instance);
  partial void InsertContentCollectionMimeContent(ContentCollectionMimeContent instance);
  partial void UpdateContentCollectionMimeContent(ContentCollectionMimeContent instance);
  partial void DeleteContentCollectionMimeContent(ContentCollectionMimeContent instance);
  partial void InsertContentCollection(ContentCollection instance);
  partial void UpdateContentCollection(ContentCollection instance);
  partial void DeleteContentCollection(ContentCollection instance);
  partial void InsertFilesystemAsset(FilesystemAsset instance);
  partial void UpdateFilesystemAsset(FilesystemAsset instance);
  partial void DeleteFilesystemAsset(FilesystemAsset instance);
  partial void InsertHolonym(Holonym instance);
  partial void UpdateHolonym(Holonym instance);
  partial void DeleteHolonym(Holonym instance);
  partial void InsertHorselessContent(HorselessContent instance);
  partial void UpdateHorselessContent(HorselessContent instance);
  partial void DeleteHorselessContent(HorselessContent instance);
  partial void InsertHorselessSession(HorselessSession instance);
  partial void UpdateHorselessSession(HorselessSession instance);
  partial void DeleteHorselessSession(HorselessSession instance);
  partial void InsertJSONAsset(JSONAsset instance);
  partial void UpdateJSONAsset(JSONAsset instance);
  partial void DeleteJSONAsset(JSONAsset instance);
  partial void InsertMeronym(Meronym instance);
  partial void UpdateMeronym(Meronym instance);
  partial void DeleteMeronym(Meronym instance);
  partial void InsertMIMEType(MIMEType instance);
  partial void UpdateMIMEType(MIMEType instance);
  partial void DeleteMIMEType(MIMEType instance);
  partial void InsertNavigationMenuItemNavigationMenu(NavigationMenuItemNavigationMenu instance);
  partial void UpdateNavigationMenuItemNavigationMenu(NavigationMenuItemNavigationMenu instance);
  partial void DeleteNavigationMenuItemNavigationMenu(NavigationMenuItemNavigationMenu instance);
  partial void InsertNavigationMenuItemNavigationMenuItem(NavigationMenuItemNavigationMenuItem instance);
  partial void UpdateNavigationMenuItemNavigationMenuItem(NavigationMenuItemNavigationMenuItem instance);
  partial void DeleteNavigationMenuItemNavigationMenuItem(NavigationMenuItemNavigationMenuItem instance);
  partial void InsertNavigationMenuItem(NavigationMenuItem instance);
  partial void UpdateNavigationMenuItem(NavigationMenuItem instance);
  partial void DeleteNavigationMenuItem(NavigationMenuItem instance);
  partial void InsertNavigationMenuNavigationMenu(NavigationMenuNavigationMenu instance);
  partial void UpdateNavigationMenuNavigationMenu(NavigationMenuNavigationMenu instance);
  partial void DeleteNavigationMenuNavigationMenu(NavigationMenuNavigationMenu instance);
  partial void InsertNavigationMenus(NavigationMenus instance);
  partial void UpdateNavigationMenus(NavigationMenus instance);
  partial void DeleteNavigationMenus(NavigationMenus instance);
  partial void InsertNugetPackage(NugetPackage instance);
  partial void UpdateNugetPackage(NugetPackage instance);
  partial void DeleteNugetPackage(NugetPackage instance);
  partial void InsertPlaceholder(Placeholder instance);
  partial void UpdatePlaceholder(Placeholder instance);
  partial void DeletePlaceholder(Placeholder instance);
  partial void InsertPrincipal(Principal instance);
  partial void UpdatePrincipal(Principal instance);
  partial void DeletePrincipal(Principal instance);
  partial void InsertPrincipalTenant(PrincipalTenant instance);
  partial void UpdatePrincipalTenant(PrincipalTenant instance);
  partial void DeletePrincipalTenant(PrincipalTenant instance);
  partial void InsertPublicationContentCollection(PublicationContentCollection instance);
  partial void UpdatePublicationContentCollection(PublicationContentCollection instance);
  partial void DeletePublicationContentCollection(PublicationContentCollection instance);
  partial void InsertPublicationPublication(PublicationPublication instance);
  partial void UpdatePublicationPublication(PublicationPublication instance);
  partial void DeletePublicationPublication(PublicationPublication instance);
  partial void InsertPublication(Publication instance);
  partial void UpdatePublication(Publication instance);
  partial void DeletePublication(Publication instance);
  partial void InsertTaxon(Taxon instance);
  partial void UpdateTaxon(Taxon instance);
  partial void DeleteTaxon(Taxon instance);
  partial void InsertTenantContentCollection(TenantContentCollection instance);
  partial void UpdateTenantContentCollection(TenantContentCollection instance);
  partial void DeleteTenantContentCollection(TenantContentCollection instance);
  partial void InsertTenant(Tenant instance);
  partial void UpdateTenant(Tenant instance);
  partial void DeleteTenant(Tenant instance);
  #endregion
	
	public HorselessContentDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["THNLP_ContentConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public HorselessContentDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public HorselessContentDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public HorselessContentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public HorselessContentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<AccessControlEntry> AccessControlEntries
	{
		get
		{
			return this.GetTable<AccessControlEntry>();
		}
	}
	
	public System.Data.Linq.Table<ContentCollectionContentCollection> ContentCollectionContentCollections
	{
		get
		{
			return this.GetTable<ContentCollectionContentCollection>();
		}
	}
	
	public System.Data.Linq.Table<ContentCollectionMimeContent> ContentCollectionMimeContents
	{
		get
		{
			return this.GetTable<ContentCollectionMimeContent>();
		}
	}
	
	public System.Data.Linq.Table<ContentCollection> ContentCollections
	{
		get
		{
			return this.GetTable<ContentCollection>();
		}
	}
	
	public System.Data.Linq.Table<FilesystemAsset> FilesystemAssets
	{
		get
		{
			return this.GetTable<FilesystemAsset>();
		}
	}
	
	public System.Data.Linq.Table<Holonym> Holonyms
	{
		get
		{
			return this.GetTable<Holonym>();
		}
	}
	
	public System.Data.Linq.Table<HorselessContent> HorselessContents
	{
		get
		{
			return this.GetTable<HorselessContent>();
		}
	}
	
	public System.Data.Linq.Table<HorselessSession> HorselessSessions
	{
		get
		{
			return this.GetTable<HorselessSession>();
		}
	}
	
	public System.Data.Linq.Table<JSONAsset> JSONAssets
	{
		get
		{
			return this.GetTable<JSONAsset>();
		}
	}
	
	public System.Data.Linq.Table<Meronym> Meronyms
	{
		get
		{
			return this.GetTable<Meronym>();
		}
	}
	
	public System.Data.Linq.Table<MIMEType> MIMETypes
	{
		get
		{
			return this.GetTable<MIMEType>();
		}
	}
	
	public System.Data.Linq.Table<NavigationMenuItemNavigationMenu> NavigationMenuItemNavigationMenus
	{
		get
		{
			return this.GetTable<NavigationMenuItemNavigationMenu>();
		}
	}
	
	public System.Data.Linq.Table<NavigationMenuItemNavigationMenuItem> NavigationMenuItemNavigationMenuItems
	{
		get
		{
			return this.GetTable<NavigationMenuItemNavigationMenuItem>();
		}
	}
	
	public System.Data.Linq.Table<NavigationMenuItem> NavigationMenuItems
	{
		get
		{
			return this.GetTable<NavigationMenuItem>();
		}
	}
	
	public System.Data.Linq.Table<NavigationMenuNavigationMenu> NavigationMenuNavigationMenus
	{
		get
		{
			return this.GetTable<NavigationMenuNavigationMenu>();
		}
	}
	
	public System.Data.Linq.Table<NavigationMenus> NavigationMenus
	{
		get
		{
			return this.GetTable<NavigationMenus>();
		}
	}
	
	public System.Data.Linq.Table<NugetPackage> NugetPackages
	{
		get
		{
			return this.GetTable<NugetPackage>();
		}
	}
	
	public System.Data.Linq.Table<Placeholder> Placeholders
	{
		get
		{
			return this.GetTable<Placeholder>();
		}
	}
	
	public System.Data.Linq.Table<Principal> Principals
	{
		get
		{
			return this.GetTable<Principal>();
		}
	}
	
	public System.Data.Linq.Table<PrincipalTenant> PrincipalTenants
	{
		get
		{
			return this.GetTable<PrincipalTenant>();
		}
	}
	
	public System.Data.Linq.Table<PublicationContentCollection> PublicationContentCollections
	{
		get
		{
			return this.GetTable<PublicationContentCollection>();
		}
	}
	
	public System.Data.Linq.Table<PublicationPublication> PublicationPublications
	{
		get
		{
			return this.GetTable<PublicationPublication>();
		}
	}
	
	public System.Data.Linq.Table<Publication> Publications
	{
		get
		{
			return this.GetTable<Publication>();
		}
	}
	
	public System.Data.Linq.Table<Taxon> Taxons
	{
		get
		{
			return this.GetTable<Taxon>();
		}
	}
	
	public System.Data.Linq.Table<TenantContentCollection> TenantContentCollections
	{
		get
		{
			return this.GetTable<TenantContentCollection>();
		}
	}
	
	public System.Data.Linq.Table<Tenant> Tenants
	{
		get
		{
			return this.GetTable<Tenant>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessControlEntries")]
public partial class AccessControlEntry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private System.Nullable<bool> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public AccessControlEntry()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentCollectionContentCollection")]
public partial class ContentCollectionContentCollection : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ChildContentCollections_Id;
	
	private System.Guid _ParentContentCollections_Id;
	
	private EntityRef<ContentCollection> _ContentCollection;
	
	private EntityRef<ContentCollection> _ContentCollection1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildContentCollections_IdChanging(System.Guid value);
    partial void OnChildContentCollections_IdChanged();
    partial void OnParentContentCollections_IdChanging(System.Guid value);
    partial void OnParentContentCollections_IdChanged();
    #endregion
	
	public ContentCollectionContentCollection()
	{
		this._ContentCollection = default(EntityRef<ContentCollection>);
		this._ContentCollection1 = default(EntityRef<ContentCollection>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildContentCollections_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ChildContentCollections_Id
	{
		get
		{
			return this._ChildContentCollections_Id;
		}
		set
		{
			if ((this._ChildContentCollections_Id != value))
			{
				if (this._ContentCollection.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChildContentCollections_IdChanging(value);
				this.SendPropertyChanging();
				this._ChildContentCollections_Id = value;
				this.SendPropertyChanged("ChildContentCollections_Id");
				this.OnChildContentCollections_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentContentCollections_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ParentContentCollections_Id
	{
		get
		{
			return this._ParentContentCollections_Id;
		}
		set
		{
			if ((this._ParentContentCollections_Id != value))
			{
				if (this._ContentCollection1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentContentCollections_IdChanging(value);
				this.SendPropertyChanging();
				this._ParentContentCollections_Id = value;
				this.SendPropertyChanged("ParentContentCollections_Id");
				this.OnParentContentCollections_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_ContentCollectionContentCollection", Storage="_ContentCollection", ThisKey="ChildContentCollections_Id", OtherKey="Id", IsForeignKey=true)]
	public ContentCollection ContentCollection
	{
		get
		{
			return this._ContentCollection.Entity;
		}
		set
		{
			ContentCollection previousValue = this._ContentCollection.Entity;
			if (((previousValue != value) 
						|| (this._ContentCollection.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContentCollection.Entity = null;
					previousValue.ContentCollectionContentCollections.Remove(this);
				}
				this._ContentCollection.Entity = value;
				if ((value != null))
				{
					value.ContentCollectionContentCollections.Add(this);
					this._ChildContentCollections_Id = value.Id;
				}
				else
				{
					this._ChildContentCollections_Id = default(System.Guid);
				}
				this.SendPropertyChanged("ContentCollection");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_ContentCollectionContentCollection1", Storage="_ContentCollection1", ThisKey="ParentContentCollections_Id", OtherKey="Id", IsForeignKey=true)]
	public ContentCollection ContentCollection1
	{
		get
		{
			return this._ContentCollection1.Entity;
		}
		set
		{
			ContentCollection previousValue = this._ContentCollection1.Entity;
			if (((previousValue != value) 
						|| (this._ContentCollection1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContentCollection1.Entity = null;
					previousValue.ContentCollectionContentCollections1.Remove(this);
				}
				this._ContentCollection1.Entity = value;
				if ((value != null))
				{
					value.ContentCollectionContentCollections1.Add(this);
					this._ParentContentCollections_Id = value.Id;
				}
				else
				{
					this._ParentContentCollections_Id = default(System.Guid);
				}
				this.SendPropertyChanged("ContentCollection1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentCollectionMimeContent")]
public partial class ContentCollectionMimeContent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ContentCollections_Id;
	
	private System.Guid _MimeContents_Id;
	
	private EntityRef<ContentCollection> _ContentCollection;
	
	private EntityRef<HorselessContent> _HorselessContent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentCollections_IdChanging(System.Guid value);
    partial void OnContentCollections_IdChanged();
    partial void OnMimeContents_IdChanging(System.Guid value);
    partial void OnMimeContents_IdChanged();
    #endregion
	
	public ContentCollectionMimeContent()
	{
		this._ContentCollection = default(EntityRef<ContentCollection>);
		this._HorselessContent = default(EntityRef<HorselessContent>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentCollections_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ContentCollections_Id
	{
		get
		{
			return this._ContentCollections_Id;
		}
		set
		{
			if ((this._ContentCollections_Id != value))
			{
				if (this._ContentCollection.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContentCollections_IdChanging(value);
				this.SendPropertyChanging();
				this._ContentCollections_Id = value;
				this.SendPropertyChanged("ContentCollections_Id");
				this.OnContentCollections_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeContents_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid MimeContents_Id
	{
		get
		{
			return this._MimeContents_Id;
		}
		set
		{
			if ((this._MimeContents_Id != value))
			{
				if (this._HorselessContent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMimeContents_IdChanging(value);
				this.SendPropertyChanging();
				this._MimeContents_Id = value;
				this.SendPropertyChanged("MimeContents_Id");
				this.OnMimeContents_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_ContentCollectionMimeContent", Storage="_ContentCollection", ThisKey="ContentCollections_Id", OtherKey="Id", IsForeignKey=true)]
	public ContentCollection ContentCollection
	{
		get
		{
			return this._ContentCollection.Entity;
		}
		set
		{
			ContentCollection previousValue = this._ContentCollection.Entity;
			if (((previousValue != value) 
						|| (this._ContentCollection.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContentCollection.Entity = null;
					previousValue.ContentCollectionMimeContents.Remove(this);
				}
				this._ContentCollection.Entity = value;
				if ((value != null))
				{
					value.ContentCollectionMimeContents.Add(this);
					this._ContentCollections_Id = value.Id;
				}
				else
				{
					this._ContentCollections_Id = default(System.Guid);
				}
				this.SendPropertyChanged("ContentCollection");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HorselessContent_ContentCollectionMimeContent", Storage="_HorselessContent", ThisKey="MimeContents_Id", OtherKey="Id", IsForeignKey=true)]
	public HorselessContent HorselessContent
	{
		get
		{
			return this._HorselessContent.Entity;
		}
		set
		{
			HorselessContent previousValue = this._HorselessContent.Entity;
			if (((previousValue != value) 
						|| (this._HorselessContent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HorselessContent.Entity = null;
					previousValue.ContentCollectionMimeContents.Remove(this);
				}
				this._HorselessContent.Entity = value;
				if ((value != null))
				{
					value.ContentCollectionMimeContents.Add(this);
					this._MimeContents_Id = value.Id;
				}
				else
				{
					this._MimeContents_Id = default(System.Guid);
				}
				this.SendPropertyChanged("HorselessContent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentCollections")]
public partial class ContentCollection : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private bool _AllowAnonymousRead;
	
	private System.Nullable<bool> _IsPublished;
	
	private string _URL;
	
	private EntitySet<ContentCollectionContentCollection> _ContentCollectionContentCollections;
	
	private EntitySet<ContentCollectionContentCollection> _ContentCollectionContentCollections1;
	
	private EntitySet<ContentCollectionMimeContent> _ContentCollectionMimeContents;
	
	private EntitySet<PublicationContentCollection> _PublicationContentCollections;
	
	private EntitySet<TenantContentCollection> _TenantContentCollections;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnAllowAnonymousReadChanging(bool value);
    partial void OnAllowAnonymousReadChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
	
	public ContentCollection()
	{
		this._ContentCollectionContentCollections = new EntitySet<ContentCollectionContentCollection>(new Action<ContentCollectionContentCollection>(this.attach_ContentCollectionContentCollections), new Action<ContentCollectionContentCollection>(this.detach_ContentCollectionContentCollections));
		this._ContentCollectionContentCollections1 = new EntitySet<ContentCollectionContentCollection>(new Action<ContentCollectionContentCollection>(this.attach_ContentCollectionContentCollections1), new Action<ContentCollectionContentCollection>(this.detach_ContentCollectionContentCollections1));
		this._ContentCollectionMimeContents = new EntitySet<ContentCollectionMimeContent>(new Action<ContentCollectionMimeContent>(this.attach_ContentCollectionMimeContents), new Action<ContentCollectionMimeContent>(this.detach_ContentCollectionMimeContents));
		this._PublicationContentCollections = new EntitySet<PublicationContentCollection>(new Action<PublicationContentCollection>(this.attach_PublicationContentCollections), new Action<PublicationContentCollection>(this.detach_PublicationContentCollections));
		this._TenantContentCollections = new EntitySet<TenantContentCollection>(new Action<TenantContentCollection>(this.attach_TenantContentCollections), new Action<TenantContentCollection>(this.detach_TenantContentCollections));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowAnonymousRead", DbType="Bit NOT NULL")]
	public bool AllowAnonymousRead
	{
		get
		{
			return this._AllowAnonymousRead;
		}
		set
		{
			if ((this._AllowAnonymousRead != value))
			{
				this.OnAllowAnonymousReadChanging(value);
				this.SendPropertyChanging();
				this._AllowAnonymousRead = value;
				this.SendPropertyChanged("AllowAnonymousRead");
				this.OnAllowAnonymousReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string URL
	{
		get
		{
			return this._URL;
		}
		set
		{
			if ((this._URL != value))
			{
				this.OnURLChanging(value);
				this.SendPropertyChanging();
				this._URL = value;
				this.SendPropertyChanged("URL");
				this.OnURLChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_ContentCollectionContentCollection", Storage="_ContentCollectionContentCollections", ThisKey="Id", OtherKey="ChildContentCollections_Id")]
	public EntitySet<ContentCollectionContentCollection> ContentCollectionContentCollections
	{
		get
		{
			return this._ContentCollectionContentCollections;
		}
		set
		{
			this._ContentCollectionContentCollections.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_ContentCollectionContentCollection1", Storage="_ContentCollectionContentCollections1", ThisKey="Id", OtherKey="ParentContentCollections_Id")]
	public EntitySet<ContentCollectionContentCollection> ContentCollectionContentCollections1
	{
		get
		{
			return this._ContentCollectionContentCollections1;
		}
		set
		{
			this._ContentCollectionContentCollections1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_ContentCollectionMimeContent", Storage="_ContentCollectionMimeContents", ThisKey="Id", OtherKey="ContentCollections_Id")]
	public EntitySet<ContentCollectionMimeContent> ContentCollectionMimeContents
	{
		get
		{
			return this._ContentCollectionMimeContents;
		}
		set
		{
			this._ContentCollectionMimeContents.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_PublicationContentCollection", Storage="_PublicationContentCollections", ThisKey="Id", OtherKey="ContentCollections_Id")]
	public EntitySet<PublicationContentCollection> PublicationContentCollections
	{
		get
		{
			return this._PublicationContentCollections;
		}
		set
		{
			this._PublicationContentCollections.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_TenantContentCollection", Storage="_TenantContentCollections", ThisKey="Id", OtherKey="ContentCollections_Id")]
	public EntitySet<TenantContentCollection> TenantContentCollections
	{
		get
		{
			return this._TenantContentCollections;
		}
		set
		{
			this._TenantContentCollections.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ContentCollectionContentCollections(ContentCollectionContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = this;
	}
	
	private void detach_ContentCollectionContentCollections(ContentCollectionContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = null;
	}
	
	private void attach_ContentCollectionContentCollections1(ContentCollectionContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection1 = this;
	}
	
	private void detach_ContentCollectionContentCollections1(ContentCollectionContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection1 = null;
	}
	
	private void attach_ContentCollectionMimeContents(ContentCollectionMimeContent entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = this;
	}
	
	private void detach_ContentCollectionMimeContents(ContentCollectionMimeContent entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = null;
	}
	
	private void attach_PublicationContentCollections(PublicationContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = this;
	}
	
	private void detach_PublicationContentCollections(PublicationContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = null;
	}
	
	private void attach_TenantContentCollections(TenantContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = this;
	}
	
	private void detach_TenantContentCollections(TenantContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.ContentCollection = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FilesystemAssets")]
public partial class FilesystemAsset : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private string _Filename;
	
	private EntitySet<HorselessContent> _HorselessContents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    #endregion
	
	public FilesystemAsset()
	{
		this._HorselessContents = new EntitySet<HorselessContent>(new Action<HorselessContent>(this.attach_HorselessContents), new Action<HorselessContent>(this.detach_HorselessContents));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Filename
	{
		get
		{
			return this._Filename;
		}
		set
		{
			if ((this._Filename != value))
			{
				this.OnFilenameChanging(value);
				this.SendPropertyChanging();
				this._Filename = value;
				this.SendPropertyChanged("Filename");
				this.OnFilenameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FilesystemAsset_HorselessContent", Storage="_HorselessContents", ThisKey="Id", OtherKey="FilesystemAssetId")]
	public EntitySet<HorselessContent> HorselessContents
	{
		get
		{
			return this._HorselessContents;
		}
		set
		{
			this._HorselessContents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_HorselessContents(HorselessContent entity)
	{
		this.SendPropertyChanging();
		entity.FilesystemAsset = this;
	}
	
	private void detach_HorselessContents(HorselessContent entity)
	{
		this.SendPropertyChanging();
		entity.FilesystemAsset = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Holonyms")]
public partial class Holonym : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private string _JsonContent;
	
	private string _JsonSchema;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnJsonContentChanging(string value);
    partial void OnJsonContentChanged();
    partial void OnJsonSchemaChanging(string value);
    partial void OnJsonSchemaChanged();
    #endregion
	
	public Holonym()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string JsonContent
	{
		get
		{
			return this._JsonContent;
		}
		set
		{
			if ((this._JsonContent != value))
			{
				this.OnJsonContentChanging(value);
				this.SendPropertyChanging();
				this._JsonContent = value;
				this.SendPropertyChanged("JsonContent");
				this.OnJsonContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonSchema", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string JsonSchema
	{
		get
		{
			return this._JsonSchema;
		}
		set
		{
			if ((this._JsonSchema != value))
			{
				this.OnJsonSchemaChanging(value);
				this.SendPropertyChanging();
				this._JsonSchema = value;
				this.SendPropertyChanged("JsonSchema");
				this.OnJsonSchemaChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HorselessContents")]
public partial class HorselessContent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private System.Nullable<System.Guid> _FilesystemAssetId;
	
	private System.Nullable<System.Guid> _JSONAssetId;
	
	private System.Nullable<System.Guid> _MIMETypeId;
	
	private System.Nullable<bool> _IsPublished;
	
	private EntitySet<ContentCollectionMimeContent> _ContentCollectionMimeContents;
	
	private EntityRef<FilesystemAsset> _FilesystemAsset;
	
	private EntityRef<JSONAsset> _JSONAsset;
	
	private EntityRef<MIMEType> _MIMEType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnFilesystemAssetIdChanging(System.Nullable<System.Guid> value);
    partial void OnFilesystemAssetIdChanged();
    partial void OnJSONAssetIdChanging(System.Nullable<System.Guid> value);
    partial void OnJSONAssetIdChanged();
    partial void OnMIMETypeIdChanging(System.Nullable<System.Guid> value);
    partial void OnMIMETypeIdChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    #endregion
	
	public HorselessContent()
	{
		this._ContentCollectionMimeContents = new EntitySet<ContentCollectionMimeContent>(new Action<ContentCollectionMimeContent>(this.attach_ContentCollectionMimeContents), new Action<ContentCollectionMimeContent>(this.detach_ContentCollectionMimeContents));
		this._FilesystemAsset = default(EntityRef<FilesystemAsset>);
		this._JSONAsset = default(EntityRef<JSONAsset>);
		this._MIMEType = default(EntityRef<MIMEType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilesystemAssetId", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> FilesystemAssetId
	{
		get
		{
			return this._FilesystemAssetId;
		}
		set
		{
			if ((this._FilesystemAssetId != value))
			{
				if (this._FilesystemAsset.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFilesystemAssetIdChanging(value);
				this.SendPropertyChanging();
				this._FilesystemAssetId = value;
				this.SendPropertyChanged("FilesystemAssetId");
				this.OnFilesystemAssetIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JSONAssetId", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> JSONAssetId
	{
		get
		{
			return this._JSONAssetId;
		}
		set
		{
			if ((this._JSONAssetId != value))
			{
				if (this._JSONAsset.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnJSONAssetIdChanging(value);
				this.SendPropertyChanging();
				this._JSONAssetId = value;
				this.SendPropertyChanged("JSONAssetId");
				this.OnJSONAssetIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MIMETypeId", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> MIMETypeId
	{
		get
		{
			return this._MIMETypeId;
		}
		set
		{
			if ((this._MIMETypeId != value))
			{
				if (this._MIMEType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMIMETypeIdChanging(value);
				this.SendPropertyChanging();
				this._MIMETypeId = value;
				this.SendPropertyChanged("MIMETypeId");
				this.OnMIMETypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HorselessContent_ContentCollectionMimeContent", Storage="_ContentCollectionMimeContents", ThisKey="Id", OtherKey="MimeContents_Id")]
	public EntitySet<ContentCollectionMimeContent> ContentCollectionMimeContents
	{
		get
		{
			return this._ContentCollectionMimeContents;
		}
		set
		{
			this._ContentCollectionMimeContents.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FilesystemAsset_HorselessContent", Storage="_FilesystemAsset", ThisKey="FilesystemAssetId", OtherKey="Id", IsForeignKey=true)]
	public FilesystemAsset FilesystemAsset
	{
		get
		{
			return this._FilesystemAsset.Entity;
		}
		set
		{
			FilesystemAsset previousValue = this._FilesystemAsset.Entity;
			if (((previousValue != value) 
						|| (this._FilesystemAsset.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FilesystemAsset.Entity = null;
					previousValue.HorselessContents.Remove(this);
				}
				this._FilesystemAsset.Entity = value;
				if ((value != null))
				{
					value.HorselessContents.Add(this);
					this._FilesystemAssetId = value.Id;
				}
				else
				{
					this._FilesystemAssetId = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("FilesystemAsset");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JSONAsset_HorselessContent", Storage="_JSONAsset", ThisKey="JSONAssetId", OtherKey="Id", IsForeignKey=true)]
	public JSONAsset JSONAsset
	{
		get
		{
			return this._JSONAsset.Entity;
		}
		set
		{
			JSONAsset previousValue = this._JSONAsset.Entity;
			if (((previousValue != value) 
						|| (this._JSONAsset.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._JSONAsset.Entity = null;
					previousValue.HorselessContents.Remove(this);
				}
				this._JSONAsset.Entity = value;
				if ((value != null))
				{
					value.HorselessContents.Add(this);
					this._JSONAssetId = value.Id;
				}
				else
				{
					this._JSONAssetId = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("JSONAsset");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MIMEType_HorselessContent", Storage="_MIMEType", ThisKey="MIMETypeId", OtherKey="Id", IsForeignKey=true)]
	public MIMEType MIMEType
	{
		get
		{
			return this._MIMEType.Entity;
		}
		set
		{
			MIMEType previousValue = this._MIMEType.Entity;
			if (((previousValue != value) 
						|| (this._MIMEType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MIMEType.Entity = null;
					previousValue.HorselessContents.Remove(this);
				}
				this._MIMEType.Entity = value;
				if ((value != null))
				{
					value.HorselessContents.Add(this);
					this._MIMETypeId = value.Id;
				}
				else
				{
					this._MIMETypeId = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("MIMEType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ContentCollectionMimeContents(ContentCollectionMimeContent entity)
	{
		this.SendPropertyChanging();
		entity.HorselessContent = this;
	}
	
	private void detach_ContentCollectionMimeContents(ContentCollectionMimeContent entity)
	{
		this.SendPropertyChanging();
		entity.HorselessContent = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HorselessSessions")]
public partial class HorselessSession : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private string _SessionId;
	
	private string _Iss;
	
	private string _Aud;
	
	private string _Sub;
	
	private System.Nullable<bool> _IsAnonymous;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnSessionIdChanging(string value);
    partial void OnSessionIdChanged();
    partial void OnIssChanging(string value);
    partial void OnIssChanged();
    partial void OnAudChanging(string value);
    partial void OnAudChanged();
    partial void OnSubChanging(string value);
    partial void OnSubChanged();
    partial void OnIsAnonymousChanging(System.Nullable<bool> value);
    partial void OnIsAnonymousChanged();
    #endregion
	
	public HorselessSession()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="NVarChar(MAX)")]
	public string SessionId
	{
		get
		{
			return this._SessionId;
		}
		set
		{
			if ((this._SessionId != value))
			{
				this.OnSessionIdChanging(value);
				this.SendPropertyChanging();
				this._SessionId = value;
				this.SendPropertyChanged("SessionId");
				this.OnSessionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Iss", DbType="NVarChar(MAX)")]
	public string Iss
	{
		get
		{
			return this._Iss;
		}
		set
		{
			if ((this._Iss != value))
			{
				this.OnIssChanging(value);
				this.SendPropertyChanging();
				this._Iss = value;
				this.SendPropertyChanged("Iss");
				this.OnIssChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aud", DbType="NVarChar(MAX)")]
	public string Aud
	{
		get
		{
			return this._Aud;
		}
		set
		{
			if ((this._Aud != value))
			{
				this.OnAudChanging(value);
				this.SendPropertyChanging();
				this._Aud = value;
				this.SendPropertyChanged("Aud");
				this.OnAudChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sub", DbType="NVarChar(MAX)")]
	public string Sub
	{
		get
		{
			return this._Sub;
		}
		set
		{
			if ((this._Sub != value))
			{
				this.OnSubChanging(value);
				this.SendPropertyChanging();
				this._Sub = value;
				this.SendPropertyChanged("Sub");
				this.OnSubChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit")]
	public System.Nullable<bool> IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JSONAssets")]
public partial class JSONAsset : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private string _JsonValue;
	
	private string _JsonSchema;
	
	private EntitySet<HorselessContent> _HorselessContents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnJsonValueChanging(string value);
    partial void OnJsonValueChanged();
    partial void OnJsonSchemaChanging(string value);
    partial void OnJsonSchemaChanged();
    #endregion
	
	public JSONAsset()
	{
		this._HorselessContents = new EntitySet<HorselessContent>(new Action<HorselessContent>(this.attach_HorselessContents), new Action<HorselessContent>(this.detach_HorselessContents));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonValue", DbType="NVarChar(MAX)")]
	public string JsonValue
	{
		get
		{
			return this._JsonValue;
		}
		set
		{
			if ((this._JsonValue != value))
			{
				this.OnJsonValueChanging(value);
				this.SendPropertyChanging();
				this._JsonValue = value;
				this.SendPropertyChanged("JsonValue");
				this.OnJsonValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonSchema", DbType="NVarChar(MAX)")]
	public string JsonSchema
	{
		get
		{
			return this._JsonSchema;
		}
		set
		{
			if ((this._JsonSchema != value))
			{
				this.OnJsonSchemaChanging(value);
				this.SendPropertyChanging();
				this._JsonSchema = value;
				this.SendPropertyChanged("JsonSchema");
				this.OnJsonSchemaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JSONAsset_HorselessContent", Storage="_HorselessContents", ThisKey="Id", OtherKey="JSONAssetId")]
	public EntitySet<HorselessContent> HorselessContents
	{
		get
		{
			return this._HorselessContents;
		}
		set
		{
			this._HorselessContents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_HorselessContents(HorselessContent entity)
	{
		this.SendPropertyChanging();
		entity.JSONAsset = this;
	}
	
	private void detach_HorselessContents(HorselessContent entity)
	{
		this.SendPropertyChanging();
		entity.JSONAsset = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meronyms")]
public partial class Meronym : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private string _JsonContent;
	
	private string _JsonSchema;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnJsonContentChanging(string value);
    partial void OnJsonContentChanged();
    partial void OnJsonSchemaChanging(string value);
    partial void OnJsonSchemaChanged();
    #endregion
	
	public Meronym()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string JsonContent
	{
		get
		{
			return this._JsonContent;
		}
		set
		{
			if ((this._JsonContent != value))
			{
				this.OnJsonContentChanging(value);
				this.SendPropertyChanging();
				this._JsonContent = value;
				this.SendPropertyChanged("JsonContent");
				this.OnJsonContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonSchema", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string JsonSchema
	{
		get
		{
			return this._JsonSchema;
		}
		set
		{
			if ((this._JsonSchema != value))
			{
				this.OnJsonSchemaChanging(value);
				this.SendPropertyChanging();
				this._JsonSchema = value;
				this.SendPropertyChanged("JsonSchema");
				this.OnJsonSchemaChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MIMETypes")]
public partial class MIMEType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private string _MIMETypeName;
	
	private EntitySet<HorselessContent> _HorselessContents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnMIMETypeNameChanging(string value);
    partial void OnMIMETypeNameChanged();
    #endregion
	
	public MIMEType()
	{
		this._HorselessContents = new EntitySet<HorselessContent>(new Action<HorselessContent>(this.attach_HorselessContents), new Action<HorselessContent>(this.detach_HorselessContents));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MIMETypeName", DbType="NVarChar(MAX)")]
	public string MIMETypeName
	{
		get
		{
			return this._MIMETypeName;
		}
		set
		{
			if ((this._MIMETypeName != value))
			{
				this.OnMIMETypeNameChanging(value);
				this.SendPropertyChanging();
				this._MIMETypeName = value;
				this.SendPropertyChanged("MIMETypeName");
				this.OnMIMETypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MIMEType_HorselessContent", Storage="_HorselessContents", ThisKey="Id", OtherKey="MIMETypeId")]
	public EntitySet<HorselessContent> HorselessContents
	{
		get
		{
			return this._HorselessContents;
		}
		set
		{
			this._HorselessContents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_HorselessContents(HorselessContent entity)
	{
		this.SendPropertyChanging();
		entity.MIMEType = this;
	}
	
	private void detach_HorselessContents(HorselessContent entity)
	{
		this.SendPropertyChanging();
		entity.MIMEType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavigationMenuItemNavigationMenu")]
public partial class NavigationMenuItemNavigationMenu : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ChildNavigationMenuItems_Id;
	
	private System.Guid _ParentNavigationMenus_Id;
	
	private EntityRef<NavigationMenuItem> _NavigationMenuItem;
	
	private EntityRef<NavigationMenus> _NavigationMenus;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildNavigationMenuItems_IdChanging(System.Guid value);
    partial void OnChildNavigationMenuItems_IdChanged();
    partial void OnParentNavigationMenus_IdChanging(System.Guid value);
    partial void OnParentNavigationMenus_IdChanged();
    #endregion
	
	public NavigationMenuItemNavigationMenu()
	{
		this._NavigationMenuItem = default(EntityRef<NavigationMenuItem>);
		this._NavigationMenus = default(EntityRef<NavigationMenus>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildNavigationMenuItems_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ChildNavigationMenuItems_Id
	{
		get
		{
			return this._ChildNavigationMenuItems_Id;
		}
		set
		{
			if ((this._ChildNavigationMenuItems_Id != value))
			{
				if (this._NavigationMenuItem.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChildNavigationMenuItems_IdChanging(value);
				this.SendPropertyChanging();
				this._ChildNavigationMenuItems_Id = value;
				this.SendPropertyChanged("ChildNavigationMenuItems_Id");
				this.OnChildNavigationMenuItems_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentNavigationMenus_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ParentNavigationMenus_Id
	{
		get
		{
			return this._ParentNavigationMenus_Id;
		}
		set
		{
			if ((this._ParentNavigationMenus_Id != value))
			{
				if (this._NavigationMenus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentNavigationMenus_IdChanging(value);
				this.SendPropertyChanging();
				this._ParentNavigationMenus_Id = value;
				this.SendPropertyChanged("ParentNavigationMenus_Id");
				this.OnParentNavigationMenus_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenuItem_NavigationMenuItemNavigationMenu", Storage="_NavigationMenuItem", ThisKey="ChildNavigationMenuItems_Id", OtherKey="Id", IsForeignKey=true)]
	public NavigationMenuItem NavigationMenuItem
	{
		get
		{
			return this._NavigationMenuItem.Entity;
		}
		set
		{
			NavigationMenuItem previousValue = this._NavigationMenuItem.Entity;
			if (((previousValue != value) 
						|| (this._NavigationMenuItem.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._NavigationMenuItem.Entity = null;
					previousValue.NavigationMenuItemNavigationMenus.Remove(this);
				}
				this._NavigationMenuItem.Entity = value;
				if ((value != null))
				{
					value.NavigationMenuItemNavigationMenus.Add(this);
					this._ChildNavigationMenuItems_Id = value.Id;
				}
				else
				{
					this._ChildNavigationMenuItems_Id = default(System.Guid);
				}
				this.SendPropertyChanged("NavigationMenuItem");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenus_NavigationMenuItemNavigationMenu", Storage="_NavigationMenus", ThisKey="ParentNavigationMenus_Id", OtherKey="Id", IsForeignKey=true)]
	public NavigationMenus NavigationMenus
	{
		get
		{
			return this._NavigationMenus.Entity;
		}
		set
		{
			NavigationMenus previousValue = this._NavigationMenus.Entity;
			if (((previousValue != value) 
						|| (this._NavigationMenus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._NavigationMenus.Entity = null;
					previousValue.NavigationMenuItemNavigationMenus.Remove(this);
				}
				this._NavigationMenus.Entity = value;
				if ((value != null))
				{
					value.NavigationMenuItemNavigationMenus.Add(this);
					this._ParentNavigationMenus_Id = value.Id;
				}
				else
				{
					this._ParentNavigationMenus_Id = default(System.Guid);
				}
				this.SendPropertyChanged("NavigationMenus");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavigationMenuItemNavigationMenuItem")]
public partial class NavigationMenuItemNavigationMenuItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ChildNavigationItems_Id;
	
	private System.Guid _ParentNavigationItems_Id;
	
	private EntityRef<NavigationMenuItem> _NavigationMenuItem;
	
	private EntityRef<NavigationMenuItem> _NavigationMenuItem1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildNavigationItems_IdChanging(System.Guid value);
    partial void OnChildNavigationItems_IdChanged();
    partial void OnParentNavigationItems_IdChanging(System.Guid value);
    partial void OnParentNavigationItems_IdChanged();
    #endregion
	
	public NavigationMenuItemNavigationMenuItem()
	{
		this._NavigationMenuItem = default(EntityRef<NavigationMenuItem>);
		this._NavigationMenuItem1 = default(EntityRef<NavigationMenuItem>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildNavigationItems_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ChildNavigationItems_Id
	{
		get
		{
			return this._ChildNavigationItems_Id;
		}
		set
		{
			if ((this._ChildNavigationItems_Id != value))
			{
				if (this._NavigationMenuItem.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChildNavigationItems_IdChanging(value);
				this.SendPropertyChanging();
				this._ChildNavigationItems_Id = value;
				this.SendPropertyChanged("ChildNavigationItems_Id");
				this.OnChildNavigationItems_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentNavigationItems_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ParentNavigationItems_Id
	{
		get
		{
			return this._ParentNavigationItems_Id;
		}
		set
		{
			if ((this._ParentNavigationItems_Id != value))
			{
				if (this._NavigationMenuItem1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentNavigationItems_IdChanging(value);
				this.SendPropertyChanging();
				this._ParentNavigationItems_Id = value;
				this.SendPropertyChanged("ParentNavigationItems_Id");
				this.OnParentNavigationItems_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenuItem_NavigationMenuItemNavigationMenuItem", Storage="_NavigationMenuItem", ThisKey="ChildNavigationItems_Id", OtherKey="Id", IsForeignKey=true)]
	public NavigationMenuItem NavigationMenuItem
	{
		get
		{
			return this._NavigationMenuItem.Entity;
		}
		set
		{
			NavigationMenuItem previousValue = this._NavigationMenuItem.Entity;
			if (((previousValue != value) 
						|| (this._NavigationMenuItem.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._NavigationMenuItem.Entity = null;
					previousValue.NavigationMenuItemNavigationMenuItems.Remove(this);
				}
				this._NavigationMenuItem.Entity = value;
				if ((value != null))
				{
					value.NavigationMenuItemNavigationMenuItems.Add(this);
					this._ChildNavigationItems_Id = value.Id;
				}
				else
				{
					this._ChildNavigationItems_Id = default(System.Guid);
				}
				this.SendPropertyChanged("NavigationMenuItem");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenuItem_NavigationMenuItemNavigationMenuItem1", Storage="_NavigationMenuItem1", ThisKey="ParentNavigationItems_Id", OtherKey="Id", IsForeignKey=true)]
	public NavigationMenuItem NavigationMenuItem1
	{
		get
		{
			return this._NavigationMenuItem1.Entity;
		}
		set
		{
			NavigationMenuItem previousValue = this._NavigationMenuItem1.Entity;
			if (((previousValue != value) 
						|| (this._NavigationMenuItem1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._NavigationMenuItem1.Entity = null;
					previousValue.NavigationMenuItemNavigationMenuItems1.Remove(this);
				}
				this._NavigationMenuItem1.Entity = value;
				if ((value != null))
				{
					value.NavigationMenuItemNavigationMenuItems1.Add(this);
					this._ParentNavigationItems_Id = value.Id;
				}
				else
				{
					this._ParentNavigationItems_Id = default(System.Guid);
				}
				this.SendPropertyChanged("NavigationMenuItem1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavigationMenuItems")]
public partial class NavigationMenuItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private System.Nullable<System.DateTime> _PublishAt;
	
	private System.Nullable<System.DateTime> _UnPublishAt;
	
	private System.Nullable<bool> _IsPublished;
	
	private string _MenuItemLabel;
	
	private string _MenuItemDescription;
	
	private string _MenuItemAltText;
	
	private EntitySet<NavigationMenuItemNavigationMenu> _NavigationMenuItemNavigationMenus;
	
	private EntitySet<NavigationMenuItemNavigationMenuItem> _NavigationMenuItemNavigationMenuItems;
	
	private EntitySet<NavigationMenuItemNavigationMenuItem> _NavigationMenuItemNavigationMenuItems1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishAtChanged();
    partial void OnUnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUnPublishAtChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnMenuItemLabelChanging(string value);
    partial void OnMenuItemLabelChanged();
    partial void OnMenuItemDescriptionChanging(string value);
    partial void OnMenuItemDescriptionChanged();
    partial void OnMenuItemAltTextChanging(string value);
    partial void OnMenuItemAltTextChanged();
    #endregion
	
	public NavigationMenuItem()
	{
		this._NavigationMenuItemNavigationMenus = new EntitySet<NavigationMenuItemNavigationMenu>(new Action<NavigationMenuItemNavigationMenu>(this.attach_NavigationMenuItemNavigationMenus), new Action<NavigationMenuItemNavigationMenu>(this.detach_NavigationMenuItemNavigationMenus));
		this._NavigationMenuItemNavigationMenuItems = new EntitySet<NavigationMenuItemNavigationMenuItem>(new Action<NavigationMenuItemNavigationMenuItem>(this.attach_NavigationMenuItemNavigationMenuItems), new Action<NavigationMenuItemNavigationMenuItem>(this.detach_NavigationMenuItemNavigationMenuItems));
		this._NavigationMenuItemNavigationMenuItems1 = new EntitySet<NavigationMenuItemNavigationMenuItem>(new Action<NavigationMenuItemNavigationMenuItem>(this.attach_NavigationMenuItemNavigationMenuItems1), new Action<NavigationMenuItemNavigationMenuItem>(this.detach_NavigationMenuItemNavigationMenuItems1));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> PublishAt
	{
		get
		{
			return this._PublishAt;
		}
		set
		{
			if ((this._PublishAt != value))
			{
				this.OnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._PublishAt = value;
				this.SendPropertyChanged("PublishAt");
				this.OnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnPublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> UnPublishAt
	{
		get
		{
			return this._UnPublishAt;
		}
		set
		{
			if ((this._UnPublishAt != value))
			{
				this.OnUnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._UnPublishAt = value;
				this.SendPropertyChanged("UnPublishAt");
				this.OnUnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemLabel", DbType="NVarChar(MAX)")]
	public string MenuItemLabel
	{
		get
		{
			return this._MenuItemLabel;
		}
		set
		{
			if ((this._MenuItemLabel != value))
			{
				this.OnMenuItemLabelChanging(value);
				this.SendPropertyChanging();
				this._MenuItemLabel = value;
				this.SendPropertyChanged("MenuItemLabel");
				this.OnMenuItemLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemDescription", DbType="NVarChar(MAX)")]
	public string MenuItemDescription
	{
		get
		{
			return this._MenuItemDescription;
		}
		set
		{
			if ((this._MenuItemDescription != value))
			{
				this.OnMenuItemDescriptionChanging(value);
				this.SendPropertyChanging();
				this._MenuItemDescription = value;
				this.SendPropertyChanged("MenuItemDescription");
				this.OnMenuItemDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemAltText", DbType="NVarChar(MAX)")]
	public string MenuItemAltText
	{
		get
		{
			return this._MenuItemAltText;
		}
		set
		{
			if ((this._MenuItemAltText != value))
			{
				this.OnMenuItemAltTextChanging(value);
				this.SendPropertyChanging();
				this._MenuItemAltText = value;
				this.SendPropertyChanged("MenuItemAltText");
				this.OnMenuItemAltTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenuItem_NavigationMenuItemNavigationMenu", Storage="_NavigationMenuItemNavigationMenus", ThisKey="Id", OtherKey="ChildNavigationMenuItems_Id")]
	public EntitySet<NavigationMenuItemNavigationMenu> NavigationMenuItemNavigationMenus
	{
		get
		{
			return this._NavigationMenuItemNavigationMenus;
		}
		set
		{
			this._NavigationMenuItemNavigationMenus.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenuItem_NavigationMenuItemNavigationMenuItem", Storage="_NavigationMenuItemNavigationMenuItems", ThisKey="Id", OtherKey="ChildNavigationItems_Id")]
	public EntitySet<NavigationMenuItemNavigationMenuItem> NavigationMenuItemNavigationMenuItems
	{
		get
		{
			return this._NavigationMenuItemNavigationMenuItems;
		}
		set
		{
			this._NavigationMenuItemNavigationMenuItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenuItem_NavigationMenuItemNavigationMenuItem1", Storage="_NavigationMenuItemNavigationMenuItems1", ThisKey="Id", OtherKey="ParentNavigationItems_Id")]
	public EntitySet<NavigationMenuItemNavigationMenuItem> NavigationMenuItemNavigationMenuItems1
	{
		get
		{
			return this._NavigationMenuItemNavigationMenuItems1;
		}
		set
		{
			this._NavigationMenuItemNavigationMenuItems1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_NavigationMenuItemNavigationMenus(NavigationMenuItemNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenuItem = this;
	}
	
	private void detach_NavigationMenuItemNavigationMenus(NavigationMenuItemNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenuItem = null;
	}
	
	private void attach_NavigationMenuItemNavigationMenuItems(NavigationMenuItemNavigationMenuItem entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenuItem = this;
	}
	
	private void detach_NavigationMenuItemNavigationMenuItems(NavigationMenuItemNavigationMenuItem entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenuItem = null;
	}
	
	private void attach_NavigationMenuItemNavigationMenuItems1(NavigationMenuItemNavigationMenuItem entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenuItem1 = this;
	}
	
	private void detach_NavigationMenuItemNavigationMenuItems1(NavigationMenuItemNavigationMenuItem entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenuItem1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavigationMenuNavigationMenu")]
public partial class NavigationMenuNavigationMenu : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Children_Id;
	
	private System.Guid _Parents_Id;
	
	private EntityRef<NavigationMenus> _NavigationMenus;
	
	private EntityRef<NavigationMenus> _NavigationMenus1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildren_IdChanging(System.Guid value);
    partial void OnChildren_IdChanged();
    partial void OnParents_IdChanging(System.Guid value);
    partial void OnParents_IdChanged();
    #endregion
	
	public NavigationMenuNavigationMenu()
	{
		this._NavigationMenus = default(EntityRef<NavigationMenus>);
		this._NavigationMenus1 = default(EntityRef<NavigationMenus>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Children_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Children_Id
	{
		get
		{
			return this._Children_Id;
		}
		set
		{
			if ((this._Children_Id != value))
			{
				if (this._NavigationMenus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChildren_IdChanging(value);
				this.SendPropertyChanging();
				this._Children_Id = value;
				this.SendPropertyChanged("Children_Id");
				this.OnChildren_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parents_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Parents_Id
	{
		get
		{
			return this._Parents_Id;
		}
		set
		{
			if ((this._Parents_Id != value))
			{
				if (this._NavigationMenus1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParents_IdChanging(value);
				this.SendPropertyChanging();
				this._Parents_Id = value;
				this.SendPropertyChanged("Parents_Id");
				this.OnParents_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenus_NavigationMenuNavigationMenu", Storage="_NavigationMenus", ThisKey="Children_Id", OtherKey="Id", IsForeignKey=true)]
	public NavigationMenus NavigationMenus
	{
		get
		{
			return this._NavigationMenus.Entity;
		}
		set
		{
			NavigationMenus previousValue = this._NavigationMenus.Entity;
			if (((previousValue != value) 
						|| (this._NavigationMenus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._NavigationMenus.Entity = null;
					previousValue.NavigationMenuNavigationMenus.Remove(this);
				}
				this._NavigationMenus.Entity = value;
				if ((value != null))
				{
					value.NavigationMenuNavigationMenus.Add(this);
					this._Children_Id = value.Id;
				}
				else
				{
					this._Children_Id = default(System.Guid);
				}
				this.SendPropertyChanged("NavigationMenus");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenus_NavigationMenuNavigationMenu1", Storage="_NavigationMenus1", ThisKey="Parents_Id", OtherKey="Id", IsForeignKey=true)]
	public NavigationMenus NavigationMenus1
	{
		get
		{
			return this._NavigationMenus1.Entity;
		}
		set
		{
			NavigationMenus previousValue = this._NavigationMenus1.Entity;
			if (((previousValue != value) 
						|| (this._NavigationMenus1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._NavigationMenus1.Entity = null;
					previousValue.NavigationMenuNavigationMenus1.Remove(this);
				}
				this._NavigationMenus1.Entity = value;
				if ((value != null))
				{
					value.NavigationMenuNavigationMenus1.Add(this);
					this._Parents_Id = value.Id;
				}
				else
				{
					this._Parents_Id = default(System.Guid);
				}
				this.SendPropertyChanged("NavigationMenus1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavigationMenus")]
public partial class NavigationMenus : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private System.Nullable<System.DateTime> _PublishAt;
	
	private System.Nullable<System.DateTime> _UnPublishAt;
	
	private System.Nullable<bool> _IsPublished;
	
	private string _MenuLabel;
	
	private string _MenuDescription;
	
	private string _MenuAltText;
	
	private EntitySet<NavigationMenuItemNavigationMenu> _NavigationMenuItemNavigationMenus;
	
	private EntitySet<NavigationMenuNavigationMenu> _NavigationMenuNavigationMenus;
	
	private EntitySet<NavigationMenuNavigationMenu> _NavigationMenuNavigationMenus1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishAtChanged();
    partial void OnUnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUnPublishAtChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnMenuLabelChanging(string value);
    partial void OnMenuLabelChanged();
    partial void OnMenuDescriptionChanging(string value);
    partial void OnMenuDescriptionChanged();
    partial void OnMenuAltTextChanging(string value);
    partial void OnMenuAltTextChanged();
    #endregion
	
	public NavigationMenus()
	{
		this._NavigationMenuItemNavigationMenus = new EntitySet<NavigationMenuItemNavigationMenu>(new Action<NavigationMenuItemNavigationMenu>(this.attach_NavigationMenuItemNavigationMenus), new Action<NavigationMenuItemNavigationMenu>(this.detach_NavigationMenuItemNavigationMenus));
		this._NavigationMenuNavigationMenus = new EntitySet<NavigationMenuNavigationMenu>(new Action<NavigationMenuNavigationMenu>(this.attach_NavigationMenuNavigationMenus), new Action<NavigationMenuNavigationMenu>(this.detach_NavigationMenuNavigationMenus));
		this._NavigationMenuNavigationMenus1 = new EntitySet<NavigationMenuNavigationMenu>(new Action<NavigationMenuNavigationMenu>(this.attach_NavigationMenuNavigationMenus1), new Action<NavigationMenuNavigationMenu>(this.detach_NavigationMenuNavigationMenus1));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> PublishAt
	{
		get
		{
			return this._PublishAt;
		}
		set
		{
			if ((this._PublishAt != value))
			{
				this.OnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._PublishAt = value;
				this.SendPropertyChanged("PublishAt");
				this.OnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnPublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> UnPublishAt
	{
		get
		{
			return this._UnPublishAt;
		}
		set
		{
			if ((this._UnPublishAt != value))
			{
				this.OnUnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._UnPublishAt = value;
				this.SendPropertyChanged("UnPublishAt");
				this.OnUnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuLabel", DbType="NVarChar(MAX)")]
	public string MenuLabel
	{
		get
		{
			return this._MenuLabel;
		}
		set
		{
			if ((this._MenuLabel != value))
			{
				this.OnMenuLabelChanging(value);
				this.SendPropertyChanging();
				this._MenuLabel = value;
				this.SendPropertyChanged("MenuLabel");
				this.OnMenuLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuDescription", DbType="NVarChar(MAX)")]
	public string MenuDescription
	{
		get
		{
			return this._MenuDescription;
		}
		set
		{
			if ((this._MenuDescription != value))
			{
				this.OnMenuDescriptionChanging(value);
				this.SendPropertyChanging();
				this._MenuDescription = value;
				this.SendPropertyChanged("MenuDescription");
				this.OnMenuDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuAltText", DbType="NVarChar(MAX)")]
	public string MenuAltText
	{
		get
		{
			return this._MenuAltText;
		}
		set
		{
			if ((this._MenuAltText != value))
			{
				this.OnMenuAltTextChanging(value);
				this.SendPropertyChanging();
				this._MenuAltText = value;
				this.SendPropertyChanged("MenuAltText");
				this.OnMenuAltTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenus_NavigationMenuItemNavigationMenu", Storage="_NavigationMenuItemNavigationMenus", ThisKey="Id", OtherKey="ParentNavigationMenus_Id")]
	public EntitySet<NavigationMenuItemNavigationMenu> NavigationMenuItemNavigationMenus
	{
		get
		{
			return this._NavigationMenuItemNavigationMenus;
		}
		set
		{
			this._NavigationMenuItemNavigationMenus.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenus_NavigationMenuNavigationMenu", Storage="_NavigationMenuNavigationMenus", ThisKey="Id", OtherKey="Children_Id")]
	public EntitySet<NavigationMenuNavigationMenu> NavigationMenuNavigationMenus
	{
		get
		{
			return this._NavigationMenuNavigationMenus;
		}
		set
		{
			this._NavigationMenuNavigationMenus.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationMenus_NavigationMenuNavigationMenu1", Storage="_NavigationMenuNavigationMenus1", ThisKey="Id", OtherKey="Parents_Id")]
	public EntitySet<NavigationMenuNavigationMenu> NavigationMenuNavigationMenus1
	{
		get
		{
			return this._NavigationMenuNavigationMenus1;
		}
		set
		{
			this._NavigationMenuNavigationMenus1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_NavigationMenuItemNavigationMenus(NavigationMenuItemNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenus = this;
	}
	
	private void detach_NavigationMenuItemNavigationMenus(NavigationMenuItemNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenus = null;
	}
	
	private void attach_NavigationMenuNavigationMenus(NavigationMenuNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenus = this;
	}
	
	private void detach_NavigationMenuNavigationMenus(NavigationMenuNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenus = null;
	}
	
	private void attach_NavigationMenuNavigationMenus1(NavigationMenuNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenus1 = this;
	}
	
	private void detach_NavigationMenuNavigationMenus1(NavigationMenuNavigationMenu entity)
	{
		this.SendPropertyChanging();
		entity.NavigationMenus1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NugetPackages")]
public partial class NugetPackage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private System.Nullable<System.DateTime> _PublishAt;
	
	private System.Nullable<System.DateTime> _UnPublishAt;
	
	private System.Nullable<bool> _IsPublished;
	
	private string _PackageId;
	
	private string _PackageVersion;
	
	private string _PackageAuthor;
	
	private string _PackageSource;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishAtChanged();
    partial void OnUnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUnPublishAtChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnPackageIdChanging(string value);
    partial void OnPackageIdChanged();
    partial void OnPackageVersionChanging(string value);
    partial void OnPackageVersionChanged();
    partial void OnPackageAuthorChanging(string value);
    partial void OnPackageAuthorChanged();
    partial void OnPackageSourceChanging(string value);
    partial void OnPackageSourceChanged();
    #endregion
	
	public NugetPackage()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> PublishAt
	{
		get
		{
			return this._PublishAt;
		}
		set
		{
			if ((this._PublishAt != value))
			{
				this.OnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._PublishAt = value;
				this.SendPropertyChanged("PublishAt");
				this.OnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnPublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> UnPublishAt
	{
		get
		{
			return this._UnPublishAt;
		}
		set
		{
			if ((this._UnPublishAt != value))
			{
				this.OnUnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._UnPublishAt = value;
				this.SendPropertyChanged("UnPublishAt");
				this.OnUnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="NVarChar(MAX)")]
	public string PackageId
	{
		get
		{
			return this._PackageId;
		}
		set
		{
			if ((this._PackageId != value))
			{
				this.OnPackageIdChanging(value);
				this.SendPropertyChanging();
				this._PackageId = value;
				this.SendPropertyChanged("PackageId");
				this.OnPackageIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageVersion", DbType="NVarChar(MAX)")]
	public string PackageVersion
	{
		get
		{
			return this._PackageVersion;
		}
		set
		{
			if ((this._PackageVersion != value))
			{
				this.OnPackageVersionChanging(value);
				this.SendPropertyChanging();
				this._PackageVersion = value;
				this.SendPropertyChanged("PackageVersion");
				this.OnPackageVersionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageAuthor", DbType="NVarChar(MAX)")]
	public string PackageAuthor
	{
		get
		{
			return this._PackageAuthor;
		}
		set
		{
			if ((this._PackageAuthor != value))
			{
				this.OnPackageAuthorChanging(value);
				this.SendPropertyChanging();
				this._PackageAuthor = value;
				this.SendPropertyChanged("PackageAuthor");
				this.OnPackageAuthorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageSource", DbType="NVarChar(MAX)")]
	public string PackageSource
	{
		get
		{
			return this._PackageSource;
		}
		set
		{
			if ((this._PackageSource != value))
			{
				this.OnPackageSourceChanging(value);
				this.SendPropertyChanging();
				this._PackageSource = value;
				this.SendPropertyChanged("PackageSource");
				this.OnPackageSourceChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Placeholders")]
public partial class Placeholder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private System.Nullable<bool> _IsPublished;
	
	private string _Description;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Placeholder()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Principals")]
public partial class Principal : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private string _Iss;
	
	private string _Aud;
	
	private string _Sub;
	
	private EntitySet<PrincipalTenant> _PrincipalTenants;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnIssChanging(string value);
    partial void OnIssChanged();
    partial void OnAudChanging(string value);
    partial void OnAudChanged();
    partial void OnSubChanging(string value);
    partial void OnSubChanged();
    #endregion
	
	public Principal()
	{
		this._PrincipalTenants = new EntitySet<PrincipalTenant>(new Action<PrincipalTenant>(this.attach_PrincipalTenants), new Action<PrincipalTenant>(this.detach_PrincipalTenants));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Iss", DbType="NVarChar(MAX)")]
	public string Iss
	{
		get
		{
			return this._Iss;
		}
		set
		{
			if ((this._Iss != value))
			{
				this.OnIssChanging(value);
				this.SendPropertyChanging();
				this._Iss = value;
				this.SendPropertyChanged("Iss");
				this.OnIssChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aud", DbType="NVarChar(MAX)")]
	public string Aud
	{
		get
		{
			return this._Aud;
		}
		set
		{
			if ((this._Aud != value))
			{
				this.OnAudChanging(value);
				this.SendPropertyChanging();
				this._Aud = value;
				this.SendPropertyChanged("Aud");
				this.OnAudChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sub", DbType="NVarChar(MAX)")]
	public string Sub
	{
		get
		{
			return this._Sub;
		}
		set
		{
			if ((this._Sub != value))
			{
				this.OnSubChanging(value);
				this.SendPropertyChanging();
				this._Sub = value;
				this.SendPropertyChanged("Sub");
				this.OnSubChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Principal_PrincipalTenant", Storage="_PrincipalTenants", ThisKey="Id", OtherKey="Principals_Id")]
	public EntitySet<PrincipalTenant> PrincipalTenants
	{
		get
		{
			return this._PrincipalTenants;
		}
		set
		{
			this._PrincipalTenants.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PrincipalTenants(PrincipalTenant entity)
	{
		this.SendPropertyChanging();
		entity.Principal = this;
	}
	
	private void detach_PrincipalTenants(PrincipalTenant entity)
	{
		this.SendPropertyChanging();
		entity.Principal = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrincipalTenant")]
public partial class PrincipalTenant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Principals_Id;
	
	private System.Guid _Tenants_Id;
	
	private EntityRef<Principal> _Principal;
	
	private EntityRef<Tenant> _Tenant;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrincipals_IdChanging(System.Guid value);
    partial void OnPrincipals_IdChanged();
    partial void OnTenants_IdChanging(System.Guid value);
    partial void OnTenants_IdChanged();
    #endregion
	
	public PrincipalTenant()
	{
		this._Principal = default(EntityRef<Principal>);
		this._Tenant = default(EntityRef<Tenant>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Principals_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Principals_Id
	{
		get
		{
			return this._Principals_Id;
		}
		set
		{
			if ((this._Principals_Id != value))
			{
				if (this._Principal.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPrincipals_IdChanging(value);
				this.SendPropertyChanging();
				this._Principals_Id = value;
				this.SendPropertyChanged("Principals_Id");
				this.OnPrincipals_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tenants_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Tenants_Id
	{
		get
		{
			return this._Tenants_Id;
		}
		set
		{
			if ((this._Tenants_Id != value))
			{
				if (this._Tenant.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTenants_IdChanging(value);
				this.SendPropertyChanging();
				this._Tenants_Id = value;
				this.SendPropertyChanged("Tenants_Id");
				this.OnTenants_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Principal_PrincipalTenant", Storage="_Principal", ThisKey="Principals_Id", OtherKey="Id", IsForeignKey=true)]
	public Principal Principal
	{
		get
		{
			return this._Principal.Entity;
		}
		set
		{
			Principal previousValue = this._Principal.Entity;
			if (((previousValue != value) 
						|| (this._Principal.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Principal.Entity = null;
					previousValue.PrincipalTenants.Remove(this);
				}
				this._Principal.Entity = value;
				if ((value != null))
				{
					value.PrincipalTenants.Add(this);
					this._Principals_Id = value.Id;
				}
				else
				{
					this._Principals_Id = default(System.Guid);
				}
				this.SendPropertyChanged("Principal");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_PrincipalTenant", Storage="_Tenant", ThisKey="Tenants_Id", OtherKey="Id", IsForeignKey=true)]
	public Tenant Tenant
	{
		get
		{
			return this._Tenant.Entity;
		}
		set
		{
			Tenant previousValue = this._Tenant.Entity;
			if (((previousValue != value) 
						|| (this._Tenant.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Tenant.Entity = null;
					previousValue.PrincipalTenants.Remove(this);
				}
				this._Tenant.Entity = value;
				if ((value != null))
				{
					value.PrincipalTenants.Add(this);
					this._Tenants_Id = value.Id;
				}
				else
				{
					this._Tenants_Id = default(System.Guid);
				}
				this.SendPropertyChanged("Tenant");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationContentCollection")]
public partial class PublicationContentCollection : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Publications_Id;
	
	private System.Guid _ContentCollections_Id;
	
	private EntityRef<ContentCollection> _ContentCollection;
	
	private EntityRef<Publication> _Publication;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublications_IdChanging(System.Guid value);
    partial void OnPublications_IdChanged();
    partial void OnContentCollections_IdChanging(System.Guid value);
    partial void OnContentCollections_IdChanged();
    #endregion
	
	public PublicationContentCollection()
	{
		this._ContentCollection = default(EntityRef<ContentCollection>);
		this._Publication = default(EntityRef<Publication>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publications_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Publications_Id
	{
		get
		{
			return this._Publications_Id;
		}
		set
		{
			if ((this._Publications_Id != value))
			{
				if (this._Publication.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPublications_IdChanging(value);
				this.SendPropertyChanging();
				this._Publications_Id = value;
				this.SendPropertyChanged("Publications_Id");
				this.OnPublications_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentCollections_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ContentCollections_Id
	{
		get
		{
			return this._ContentCollections_Id;
		}
		set
		{
			if ((this._ContentCollections_Id != value))
			{
				if (this._ContentCollection.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContentCollections_IdChanging(value);
				this.SendPropertyChanging();
				this._ContentCollections_Id = value;
				this.SendPropertyChanged("ContentCollections_Id");
				this.OnContentCollections_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_PublicationContentCollection", Storage="_ContentCollection", ThisKey="ContentCollections_Id", OtherKey="Id", IsForeignKey=true)]
	public ContentCollection ContentCollection
	{
		get
		{
			return this._ContentCollection.Entity;
		}
		set
		{
			ContentCollection previousValue = this._ContentCollection.Entity;
			if (((previousValue != value) 
						|| (this._ContentCollection.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContentCollection.Entity = null;
					previousValue.PublicationContentCollections.Remove(this);
				}
				this._ContentCollection.Entity = value;
				if ((value != null))
				{
					value.PublicationContentCollections.Add(this);
					this._ContentCollections_Id = value.Id;
				}
				else
				{
					this._ContentCollections_Id = default(System.Guid);
				}
				this.SendPropertyChanged("ContentCollection");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationContentCollection", Storage="_Publication", ThisKey="Publications_Id", OtherKey="Id", IsForeignKey=true)]
	public Publication Publication
	{
		get
		{
			return this._Publication.Entity;
		}
		set
		{
			Publication previousValue = this._Publication.Entity;
			if (((previousValue != value) 
						|| (this._Publication.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Publication.Entity = null;
					previousValue.PublicationContentCollections.Remove(this);
				}
				this._Publication.Entity = value;
				if ((value != null))
				{
					value.PublicationContentCollections.Add(this);
					this._Publications_Id = value.Id;
				}
				else
				{
					this._Publications_Id = default(System.Guid);
				}
				this.SendPropertyChanged("Publication");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationPublication")]
public partial class PublicationPublication : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _PublicationsChildren_Id;
	
	private System.Guid _PublicationParents_Id;
	
	private EntityRef<Publication> _Publication;
	
	private EntityRef<Publication> _Publication1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublicationsChildren_IdChanging(System.Guid value);
    partial void OnPublicationsChildren_IdChanged();
    partial void OnPublicationParents_IdChanging(System.Guid value);
    partial void OnPublicationParents_IdChanged();
    #endregion
	
	public PublicationPublication()
	{
		this._Publication = default(EntityRef<Publication>);
		this._Publication1 = default(EntityRef<Publication>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationsChildren_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid PublicationsChildren_Id
	{
		get
		{
			return this._PublicationsChildren_Id;
		}
		set
		{
			if ((this._PublicationsChildren_Id != value))
			{
				if (this._Publication.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPublicationsChildren_IdChanging(value);
				this.SendPropertyChanging();
				this._PublicationsChildren_Id = value;
				this.SendPropertyChanged("PublicationsChildren_Id");
				this.OnPublicationsChildren_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationParents_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid PublicationParents_Id
	{
		get
		{
			return this._PublicationParents_Id;
		}
		set
		{
			if ((this._PublicationParents_Id != value))
			{
				if (this._Publication1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPublicationParents_IdChanging(value);
				this.SendPropertyChanging();
				this._PublicationParents_Id = value;
				this.SendPropertyChanged("PublicationParents_Id");
				this.OnPublicationParents_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationPublication", Storage="_Publication", ThisKey="PublicationsChildren_Id", OtherKey="Id", IsForeignKey=true)]
	public Publication Publication
	{
		get
		{
			return this._Publication.Entity;
		}
		set
		{
			Publication previousValue = this._Publication.Entity;
			if (((previousValue != value) 
						|| (this._Publication.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Publication.Entity = null;
					previousValue.PublicationPublications.Remove(this);
				}
				this._Publication.Entity = value;
				if ((value != null))
				{
					value.PublicationPublications.Add(this);
					this._PublicationsChildren_Id = value.Id;
				}
				else
				{
					this._PublicationsChildren_Id = default(System.Guid);
				}
				this.SendPropertyChanged("Publication");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationPublication1", Storage="_Publication1", ThisKey="PublicationParents_Id", OtherKey="Id", IsForeignKey=true)]
	public Publication Publication1
	{
		get
		{
			return this._Publication1.Entity;
		}
		set
		{
			Publication previousValue = this._Publication1.Entity;
			if (((previousValue != value) 
						|| (this._Publication1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Publication1.Entity = null;
					previousValue.PublicationPublications1.Remove(this);
				}
				this._Publication1.Entity = value;
				if ((value != null))
				{
					value.PublicationPublications1.Add(this);
					this._PublicationParents_Id = value.Id;
				}
				else
				{
					this._PublicationParents_Id = default(System.Guid);
				}
				this.SendPropertyChanged("Publication1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publications")]
public partial class Publication : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private System.Nullable<System.DateTime> _PublishAt;
	
	private System.Nullable<System.DateTime> _UnPublishAt;
	
	private System.Nullable<bool> _IsPublished;
	
	private EntitySet<PublicationContentCollection> _PublicationContentCollections;
	
	private EntitySet<PublicationPublication> _PublicationPublications;
	
	private EntitySet<PublicationPublication> _PublicationPublications1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishAtChanged();
    partial void OnUnPublishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUnPublishAtChanged();
    partial void OnIsPublishedChanging(System.Nullable<bool> value);
    partial void OnIsPublishedChanged();
    #endregion
	
	public Publication()
	{
		this._PublicationContentCollections = new EntitySet<PublicationContentCollection>(new Action<PublicationContentCollection>(this.attach_PublicationContentCollections), new Action<PublicationContentCollection>(this.detach_PublicationContentCollections));
		this._PublicationPublications = new EntitySet<PublicationPublication>(new Action<PublicationPublication>(this.attach_PublicationPublications), new Action<PublicationPublication>(this.detach_PublicationPublications));
		this._PublicationPublications1 = new EntitySet<PublicationPublication>(new Action<PublicationPublication>(this.attach_PublicationPublications1), new Action<PublicationPublication>(this.detach_PublicationPublications1));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> PublishAt
	{
		get
		{
			return this._PublishAt;
		}
		set
		{
			if ((this._PublishAt != value))
			{
				this.OnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._PublishAt = value;
				this.SendPropertyChanged("PublishAt");
				this.OnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnPublishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> UnPublishAt
	{
		get
		{
			return this._UnPublishAt;
		}
		set
		{
			if ((this._UnPublishAt != value))
			{
				this.OnUnPublishAtChanging(value);
				this.SendPropertyChanging();
				this._UnPublishAt = value;
				this.SendPropertyChanged("UnPublishAt");
				this.OnUnPublishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit")]
	public System.Nullable<bool> IsPublished
	{
		get
		{
			return this._IsPublished;
		}
		set
		{
			if ((this._IsPublished != value))
			{
				this.OnIsPublishedChanging(value);
				this.SendPropertyChanging();
				this._IsPublished = value;
				this.SendPropertyChanged("IsPublished");
				this.OnIsPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationContentCollection", Storage="_PublicationContentCollections", ThisKey="Id", OtherKey="Publications_Id")]
	public EntitySet<PublicationContentCollection> PublicationContentCollections
	{
		get
		{
			return this._PublicationContentCollections;
		}
		set
		{
			this._PublicationContentCollections.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationPublication", Storage="_PublicationPublications", ThisKey="Id", OtherKey="PublicationsChildren_Id")]
	public EntitySet<PublicationPublication> PublicationPublications
	{
		get
		{
			return this._PublicationPublications;
		}
		set
		{
			this._PublicationPublications.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationPublication1", Storage="_PublicationPublications1", ThisKey="Id", OtherKey="PublicationParents_Id")]
	public EntitySet<PublicationPublication> PublicationPublications1
	{
		get
		{
			return this._PublicationPublications1;
		}
		set
		{
			this._PublicationPublications1.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PublicationContentCollections(PublicationContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.Publication = this;
	}
	
	private void detach_PublicationContentCollections(PublicationContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.Publication = null;
	}
	
	private void attach_PublicationPublications(PublicationPublication entity)
	{
		this.SendPropertyChanging();
		entity.Publication = this;
	}
	
	private void detach_PublicationPublications(PublicationPublication entity)
	{
		this.SendPropertyChanging();
		entity.Publication = null;
	}
	
	private void attach_PublicationPublications1(PublicationPublication entity)
	{
		this.SendPropertyChanging();
		entity.Publication1 = this;
	}
	
	private void detach_PublicationPublications1(PublicationPublication entity)
	{
		this.SendPropertyChanging();
		entity.Publication1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Taxons")]
public partial class Taxon : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private System.Nullable<System.Guid> _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.DateTime _CreatedAt;
	
	private string _JsonContent;
	
	private string _JsonSchema;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(System.Nullable<System.Guid> value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnJsonContentChanging(string value);
    partial void OnJsonContentChanged();
    partial void OnJsonSchemaChanging(string value);
    partial void OnJsonSchemaChanged();
    #endregion
	
	public Taxon()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX)")]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string JsonContent
	{
		get
		{
			return this._JsonContent;
		}
		set
		{
			if ((this._JsonContent != value))
			{
				this.OnJsonContentChanging(value);
				this.SendPropertyChanging();
				this._JsonContent = value;
				this.SendPropertyChanged("JsonContent");
				this.OnJsonContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonSchema", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string JsonSchema
	{
		get
		{
			return this._JsonSchema;
		}
		set
		{
			if ((this._JsonSchema != value))
			{
				this.OnJsonSchemaChanging(value);
				this.SendPropertyChanging();
				this._JsonSchema = value;
				this.SendPropertyChanged("JsonSchema");
				this.OnJsonSchemaChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TenantContentCollection")]
public partial class TenantContentCollection : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Tenants_Id;
	
	private System.Guid _ContentCollections_Id;
	
	private EntityRef<ContentCollection> _ContentCollection;
	
	private EntityRef<Tenant> _Tenant;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenants_IdChanging(System.Guid value);
    partial void OnTenants_IdChanged();
    partial void OnContentCollections_IdChanging(System.Guid value);
    partial void OnContentCollections_IdChanged();
    #endregion
	
	public TenantContentCollection()
	{
		this._ContentCollection = default(EntityRef<ContentCollection>);
		this._Tenant = default(EntityRef<Tenant>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tenants_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Tenants_Id
	{
		get
		{
			return this._Tenants_Id;
		}
		set
		{
			if ((this._Tenants_Id != value))
			{
				if (this._Tenant.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTenants_IdChanging(value);
				this.SendPropertyChanging();
				this._Tenants_Id = value;
				this.SendPropertyChanged("Tenants_Id");
				this.OnTenants_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentCollections_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ContentCollections_Id
	{
		get
		{
			return this._ContentCollections_Id;
		}
		set
		{
			if ((this._ContentCollections_Id != value))
			{
				if (this._ContentCollection.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContentCollections_IdChanging(value);
				this.SendPropertyChanging();
				this._ContentCollections_Id = value;
				this.SendPropertyChanged("ContentCollections_Id");
				this.OnContentCollections_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCollection_TenantContentCollection", Storage="_ContentCollection", ThisKey="ContentCollections_Id", OtherKey="Id", IsForeignKey=true)]
	public ContentCollection ContentCollection
	{
		get
		{
			return this._ContentCollection.Entity;
		}
		set
		{
			ContentCollection previousValue = this._ContentCollection.Entity;
			if (((previousValue != value) 
						|| (this._ContentCollection.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContentCollection.Entity = null;
					previousValue.TenantContentCollections.Remove(this);
				}
				this._ContentCollection.Entity = value;
				if ((value != null))
				{
					value.TenantContentCollections.Add(this);
					this._ContentCollections_Id = value.Id;
				}
				else
				{
					this._ContentCollections_Id = default(System.Guid);
				}
				this.SendPropertyChanged("ContentCollection");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_TenantContentCollection", Storage="_Tenant", ThisKey="Tenants_Id", OtherKey="Id", IsForeignKey=true)]
	public Tenant Tenant
	{
		get
		{
			return this._Tenant.Entity;
		}
		set
		{
			Tenant previousValue = this._Tenant.Entity;
			if (((previousValue != value) 
						|| (this._Tenant.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Tenant.Entity = null;
					previousValue.TenantContentCollections.Remove(this);
				}
				this._Tenant.Entity = value;
				if ((value != null))
				{
					value.TenantContentCollections.Add(this);
					this._Tenants_Id = value.Id;
				}
				else
				{
					this._Tenants_Id = default(System.Guid);
				}
				this.SendPropertyChanged("Tenant");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tenants")]
public partial class Tenant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private string _DisplayName;
	
	private string _ObjectId;
	
	private System.Nullable<bool> _IsSoftDeleted;
	
	private System.Nullable<System.DateTime> _CreatedAt;
	
	private EntitySet<PrincipalTenant> _PrincipalTenants;
	
	private EntitySet<TenantContentCollection> _TenantContentCollections;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnObjectIdChanging(string value);
    partial void OnObjectIdChanged();
    partial void OnIsSoftDeletedChanging(System.Nullable<bool> value);
    partial void OnIsSoftDeletedChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    #endregion
	
	public Tenant()
	{
		this._PrincipalTenants = new EntitySet<PrincipalTenant>(new Action<PrincipalTenant>(this.attach_PrincipalTenants), new Action<PrincipalTenant>(this.detach_PrincipalTenants));
		this._TenantContentCollections = new EntitySet<TenantContentCollection>(new Action<TenantContentCollection>(this.attach_TenantContentCollections), new Action<TenantContentCollection>(this.detach_TenantContentCollections));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ObjectId
	{
		get
		{
			return this._ObjectId;
		}
		set
		{
			if ((this._ObjectId != value))
			{
				this.OnObjectIdChanging(value);
				this.SendPropertyChanging();
				this._ObjectId = value;
				this.SendPropertyChanged("ObjectId");
				this.OnObjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoftDeleted", DbType="Bit")]
	public System.Nullable<bool> IsSoftDeleted
	{
		get
		{
			return this._IsSoftDeleted;
		}
		set
		{
			if ((this._IsSoftDeleted != value))
			{
				this.OnIsSoftDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsSoftDeleted = value;
				this.SendPropertyChanged("IsSoftDeleted");
				this.OnIsSoftDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedAt
	{
		get
		{
			return this._CreatedAt;
		}
		set
		{
			if ((this._CreatedAt != value))
			{
				this.OnCreatedAtChanging(value);
				this.SendPropertyChanging();
				this._CreatedAt = value;
				this.SendPropertyChanged("CreatedAt");
				this.OnCreatedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_PrincipalTenant", Storage="_PrincipalTenants", ThisKey="Id", OtherKey="Tenants_Id")]
	public EntitySet<PrincipalTenant> PrincipalTenants
	{
		get
		{
			return this._PrincipalTenants;
		}
		set
		{
			this._PrincipalTenants.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_TenantContentCollection", Storage="_TenantContentCollections", ThisKey="Id", OtherKey="Tenants_Id")]
	public EntitySet<TenantContentCollection> TenantContentCollections
	{
		get
		{
			return this._TenantContentCollections;
		}
		set
		{
			this._TenantContentCollections.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PrincipalTenants(PrincipalTenant entity)
	{
		this.SendPropertyChanging();
		entity.Tenant = this;
	}
	
	private void detach_PrincipalTenants(PrincipalTenant entity)
	{
		this.SendPropertyChanging();
		entity.Tenant = null;
	}
	
	private void attach_TenantContentCollections(TenantContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.Tenant = this;
	}
	
	private void detach_TenantContentCollections(TenantContentCollection entity)
	{
		this.SendPropertyChanging();
		entity.Tenant = null;
	}
}
#pragma warning restore 1591
