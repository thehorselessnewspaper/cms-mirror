// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TheHorselessNewspaper.Schemas.HostingModel.HostingEntities
{
    internal partial class THLNPHostingContext : DbContext
    {
        public THLNPHostingContext()
        {
        }

        public THLNPHostingContext(DbContextOptions<THLNPHostingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessControlEntry> AccessControlEntries { get; set; }
        public virtual DbSet<KeyCloakConfiguration> KeyCloakConfigurations { get; set; }
        public virtual DbSet<NugetPackage> NugetPackages { get; set; }
        public virtual DbSet<Principal> Principals { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<TenantInfo> TenantInfos { get; set; }
        public virtual DbSet<WebAPITenantInfo> WebAPITenantInfos { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessControlEntry>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.HasMany(d => d.Principals)
                    .WithMany(p => p.AccessControlEntries)
                    .UsingEntity<Dictionary<string, object>>(
                        "AccessControlEntryPrincipal",
                        l => l.HasOne<Principal>().WithMany().HasForeignKey("Principals_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccessControlEntryPrincipal_Principal"),
                        r => r.HasOne<AccessControlEntry>().WithMany().HasForeignKey("AccessControlEntries_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccessControlEntryPrincipal_AccessControlEntry"),
                        j =>
                        {
                            j.HasKey("AccessControlEntries_Id", "Principals_Id");

                            j.ToTable("AccessControlEntryPrincipal");

                            j.HasIndex(new[] { "Principals_Id" }, "IX_FK_AccessControlEntryPrincipal_Principal");
                        });
            });

            modelBuilder.Entity<KeyCloakConfiguration>(entity =>
            {
                entity.HasIndex(e => e.TenantInfoId, "IX_FK_TenantInfoKeyCloakConfiguration");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.TenantInfo)
                    .WithMany(p => p.KeyCloakConfigurations)
                    .HasForeignKey(d => d.TenantInfoId)
                    .HasConstraintName("FK_TenantInfoKeyCloakConfiguration");
            });

            modelBuilder.Entity<NugetPackage>(entity =>
            {
                entity.HasIndex(e => e.ParentTenantId, "IX_FK_TenantNugetPackage");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ParentTenant)
                    .WithMany(p => p.NugetPackages)
                    .HasForeignKey(d => d.ParentTenantId)
                    .HasConstraintName("FK_TenantNugetPackage");
            });

            modelBuilder.Entity<Principal>(entity =>
            {
                entity.HasIndex(e => e.ParentTenantId, "IX_FK_HorselessClaimsPrincipalTenant");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ParentTenant)
                    .WithMany(p => p.Principals)
                    .HasForeignKey(d => d.ParentTenantId)
                    .HasConstraintName("FK_HorselessClaimsPrincipalTenant");
            });

            modelBuilder.Entity<Tenant>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<TenantInfo>(entity =>
            {
                entity.HasIndex(e => e.Tenant_Id, "IX_FK_TenantTenantInfo");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Tenant)
                    .WithMany(p => p.TenantInfos)
                    .HasForeignKey(d => d.Tenant_Id)
                    .HasConstraintName("FK_TenantTenantInfo");
            });

            modelBuilder.Entity<WebAPITenantInfo>(entity =>
            {
                entity.HasIndex(e => e.TenantInfoId, "IX_FK_TenantInfoWebAPITenantInfo");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.TenantInfo)
                    .WithMany(p => p.WebAPITenantInfos)
                    .HasForeignKey(d => d.TenantInfoId)
                    .HasConstraintName("FK_TenantInfoWebAPITenantInfo");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}