// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
using TheHorselessNewspaper.Schemas.HostingModel.Entities.Configurations;
#nullable disable

namespace TheHorselessNewspaper.Schemas.HostingModel.Entities
{
    internal partial class THNLPHostingContext : DbContext
    {
        public THNLPHostingContext()
        {
        }

        public THNLPHostingContext(DbContextOptions<THNLPHostingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<FilesystemAssetLocation> FilesystemAssetLocations { get; set; }
        public virtual DbSet<Host> Hosts { get; set; }
        public virtual DbSet<KeyCloakConfiguration> KeyCloakConfigurations { get; set; }
        public virtual DbSet<NugetPackage> NugetPackages { get; set; }
        public virtual DbSet<RoutingDiscriminator> RoutingDiscriminators { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<TenantInfo> TenantInfos { get; set; }
        public virtual DbSet<UriPath> UriPaths { get; set; }
        public virtual DbSet<WebAPITenantInfo> WebAPITenantInfos { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new Configurations.FilesystemAssetLocationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HostConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KeyCloakConfigurationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.NugetPackageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RoutingDiscriminatorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TenantConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TenantInfoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UriPathConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WebAPITenantInfoConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
