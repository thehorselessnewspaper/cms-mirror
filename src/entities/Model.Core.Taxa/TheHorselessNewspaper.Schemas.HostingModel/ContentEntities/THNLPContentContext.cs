// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TheHorselessNewspaper.Schemas.ContentModel.ContentEntities
{
    internal partial class THNLPContentContext : DbContext
    {
        public THNLPContentContext()
        {
        }

        public THNLPContentContext(DbContextOptions<THNLPContentContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessControlEntry> AccessControlEntries { get; set; }
        public virtual DbSet<ContentCollection> ContentCollections { get; set; }
        public virtual DbSet<FilesystemAsset> FilesystemAssets { get; set; }
        public virtual DbSet<Holonym> Holonyms { get; set; }
        public virtual DbSet<JSONAsset> JSONAssets { get; set; }
        public virtual DbSet<MIMEType> MIMETypes { get; set; }
        public virtual DbSet<Meronym> Meronyms { get; set; }
        public virtual DbSet<MimeContent> MimeContents { get; set; }
        public virtual DbSet<NugetPackage> NugetPackages { get; set; }
        public virtual DbSet<Placeholder> Placeholders { get; set; }
        public virtual DbSet<Principal> Principals { get; set; }
        public virtual DbSet<Publication> Publications { get; set; }
        public virtual DbSet<Taxon> Taxons { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessControlEntry>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.ObjectId).IsRequired();
            });

            modelBuilder.Entity<ContentCollection>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.ObjectId).IsRequired();

                entity.HasMany(d => d.MimeContents)
                    .WithMany(p => p.ContentCollections)
                    .UsingEntity<Dictionary<string, object>>(
                        "ContentCollectionMimeContent",
                        l => l.HasOne<MimeContent>().WithMany().HasForeignKey("MimeContents_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ContentCollectionMimeContent_MimeContent"),
                        r => r.HasOne<ContentCollection>().WithMany().HasForeignKey("ContentCollections_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ContentCollectionMimeContent_ContentCollection"),
                        j =>
                        {
                            j.HasKey("ContentCollections_Id", "MimeContents_Id");

                            j.ToTable("ContentCollectionMimeContent");

                            j.HasIndex(new[] { "MimeContents_Id" }, "IX_FK_ContentCollectionMimeContent_MimeContent");
                        });

                entity.HasMany(d => d.Publications)
                    .WithMany(p => p.ContentCollections)
                    .UsingEntity<Dictionary<string, object>>(
                        "ContentCollectionPublication",
                        l => l.HasOne<Publication>().WithMany().HasForeignKey("Publications_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ContentCollectionPublication_Publication"),
                        r => r.HasOne<ContentCollection>().WithMany().HasForeignKey("ContentCollections_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ContentCollectionPublication_ContentCollection"),
                        j =>
                        {
                            j.HasKey("ContentCollections_Id", "Publications_Id");

                            j.ToTable("ContentCollectionPublication");

                            j.HasIndex(new[] { "Publications_Id" }, "IX_FK_ContentCollectionPublication_Publication");
                        });
            });

            modelBuilder.Entity<FilesystemAsset>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.Filename).IsRequired();

                entity.Property(e => e.ObjectId).IsRequired();
            });

            modelBuilder.Entity<Holonym>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.JsonContent).IsRequired();

                entity.Property(e => e.JsonSchema).IsRequired();

                entity.HasMany(d => d.Meronyms)
                    .WithMany(p => p.Holonyms)
                    .UsingEntity<Dictionary<string, object>>(
                        "HolonymMeronym",
                        l => l.HasOne<Meronym>().WithMany().HasForeignKey("Meronyms_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_HolonymMeronym_Meronym"),
                        r => r.HasOne<Holonym>().WithMany().HasForeignKey("Holonyms_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_HolonymMeronym_Holonym"),
                        j =>
                        {
                            j.HasKey("Holonyms_Id", "Meronyms_Id");

                            j.ToTable("HolonymMeronym");

                            j.HasIndex(new[] { "Meronyms_Id" }, "IX_FK_HolonymMeronym_Meronym");
                        });
            });

            modelBuilder.Entity<JSONAsset>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.JsonValue).IsRequired();

                entity.Property(e => e.ObjectId).IsRequired();
            });

            modelBuilder.Entity<MIMEType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.MIMETypeName).IsRequired();

                entity.Property(e => e.ObjectId).IsRequired();
            });

            modelBuilder.Entity<Meronym>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.JsonContent).IsRequired();

                entity.Property(e => e.JsonSchema).IsRequired();
            });

            modelBuilder.Entity<MimeContent>(entity =>
            {
                entity.HasIndex(e => e.FilesystemAssetId, "IX_FK_FilesystemAssetMimeContent");

                entity.HasIndex(e => e.JSONAssetId, "IX_FK_MimeContentJSONAsset");

                entity.HasIndex(e => e.MIMETypeId, "IX_FK_MimeContentMIMEType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.ObjectId).IsRequired();

                entity.HasOne(d => d.FilesystemAsset)
                    .WithMany(p => p.MimeContents)
                    .HasForeignKey(d => d.FilesystemAssetId)
                    .HasConstraintName("FK_FilesystemAssetMimeContent");

                entity.HasOne(d => d.JSONAsset)
                    .WithMany(p => p.MimeContents)
                    .HasForeignKey(d => d.JSONAssetId)
                    .HasConstraintName("FK_MimeContentJSONAsset");

                entity.HasOne(d => d.MIMEType)
                    .WithMany(p => p.MimeContents)
                    .HasForeignKey(d => d.MIMETypeId)
                    .HasConstraintName("FK_MimeContentMIMEType");
            });

            modelBuilder.Entity<NugetPackage>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.PublishAt).HasColumnType("datetime");

                entity.Property(e => e.UnPublishAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<Placeholder>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.ObjectId).IsRequired();

                entity.HasMany(d => d.Holonyms)
                    .WithMany(p => p.Placeholders)
                    .UsingEntity<Dictionary<string, object>>(
                        "PlaceholderHolonym",
                        l => l.HasOne<Holonym>().WithMany().HasForeignKey("Holonyms_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PlaceholderHolonym_Holonym"),
                        r => r.HasOne<Placeholder>().WithMany().HasForeignKey("Placeholders_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PlaceholderHolonym_Placeholder"),
                        j =>
                        {
                            j.HasKey("Placeholders_Id", "Holonyms_Id");

                            j.ToTable("PlaceholderHolonym");

                            j.HasIndex(new[] { "Holonyms_Id" }, "IX_FK_PlaceholderHolonym_Holonym");
                        });

                entity.HasMany(d => d.Meronyms)
                    .WithMany(p => p.Placeholders)
                    .UsingEntity<Dictionary<string, object>>(
                        "PlaceholderMeronym",
                        l => l.HasOne<Meronym>().WithMany().HasForeignKey("Meronyms_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PlaceholderMeronym_Meronym"),
                        r => r.HasOne<Placeholder>().WithMany().HasForeignKey("Placeholders_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PlaceholderMeronym_Placeholder"),
                        j =>
                        {
                            j.HasKey("Placeholders_Id", "Meronyms_Id");

                            j.ToTable("PlaceholderMeronym");

                            j.HasIndex(new[] { "Meronyms_Id" }, "IX_FK_PlaceholderMeronym_Meronym");
                        });

                entity.HasMany(d => d.MimeContents)
                    .WithMany(p => p.Placeholders)
                    .UsingEntity<Dictionary<string, object>>(
                        "PlaceholderMimeContent",
                        l => l.HasOne<MimeContent>().WithMany().HasForeignKey("MimeContents_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PlaceholderMimeContent_MimeContent"),
                        r => r.HasOne<Placeholder>().WithMany().HasForeignKey("Placeholders_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PlaceholderMimeContent_Placeholder"),
                        j =>
                        {
                            j.HasKey("Placeholders_Id", "MimeContents_Id");

                            j.ToTable("PlaceholderMimeContent");

                            j.HasIndex(new[] { "MimeContents_Id" }, "IX_FK_PlaceholderMimeContent_MimeContent");
                        });
            });

            modelBuilder.Entity<Principal>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.HorselessCookieId).IsRequired();

                entity.Property(e => e.ObjectId).IsRequired();

                entity.HasMany(d => d.Tenants)
                    .WithMany(p => p.Principals)
                    .UsingEntity<Dictionary<string, object>>(
                        "PrincipalTenant",
                        l => l.HasOne<Tenant>().WithMany().HasForeignKey("Tenants_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PrincipalTenant_Tenant"),
                        r => r.HasOne<Principal>().WithMany().HasForeignKey("Principals_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PrincipalTenant_Principal"),
                        j =>
                        {
                            j.HasKey("Principals_Id", "Tenants_Id");

                            j.ToTable("PrincipalTenant");

                            j.HasIndex(new[] { "Tenants_Id" }, "IX_FK_PrincipalTenant_Tenant");
                        });
            });

            modelBuilder.Entity<Publication>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.PublishAt).HasColumnType("datetime");

                entity.Property(e => e.UnPublishAt).HasColumnType("datetime");

                entity.HasMany(d => d.NugetPackages)
                    .WithMany(p => p.Publications)
                    .UsingEntity<Dictionary<string, object>>(
                        "PublicationNugetPackage",
                        l => l.HasOne<NugetPackage>().WithMany().HasForeignKey("NugetPackages_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PublicationNugetPackage_NugetPackage"),
                        r => r.HasOne<Publication>().WithMany().HasForeignKey("Publications_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PublicationNugetPackage_Publication"),
                        j =>
                        {
                            j.HasKey("Publications_Id", "NugetPackages_Id");

                            j.ToTable("PublicationNugetPackage");

                            j.HasIndex(new[] { "NugetPackages_Id" }, "IX_FK_PublicationNugetPackage_NugetPackage");
                        });
            });

            modelBuilder.Entity<Taxon>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.JsonContent).IsRequired();

                entity.Property(e => e.JsonSchema).IsRequired();

                entity.HasMany(d => d.ContentCollections)
                    .WithMany(p => p.Taxons)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaxonContentCollection",
                        l => l.HasOne<ContentCollection>().WithMany().HasForeignKey("ContentCollections_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TaxonContentCollection_ContentCollection"),
                        r => r.HasOne<Taxon>().WithMany().HasForeignKey("Taxons_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TaxonContentCollection_Taxon"),
                        j =>
                        {
                            j.HasKey("Taxons_Id", "ContentCollections_Id");

                            j.ToTable("TaxonContentCollection");

                            j.HasIndex(new[] { "ContentCollections_Id" }, "IX_FK_TaxonContentCollection_ContentCollection");
                        });

                entity.HasMany(d => d.Holonyms)
                    .WithMany(p => p.Taxons)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaxonHolonym",
                        l => l.HasOne<Holonym>().WithMany().HasForeignKey("Holonyms_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TaxonHolonym_Holonym"),
                        r => r.HasOne<Taxon>().WithMany().HasForeignKey("Taxons_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TaxonHolonym_Taxon"),
                        j =>
                        {
                            j.HasKey("Taxons_Id", "Holonyms_Id");

                            j.ToTable("TaxonHolonym");

                            j.HasIndex(new[] { "Holonyms_Id" }, "IX_FK_TaxonHolonym_Holonym");
                        });

                entity.HasMany(d => d.Placeholders)
                    .WithMany(p => p.Taxons)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaxonPlaceholder",
                        l => l.HasOne<Placeholder>().WithMany().HasForeignKey("Placeholders_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TaxonPlaceholder_Placeholder"),
                        r => r.HasOne<Taxon>().WithMany().HasForeignKey("Taxons_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TaxonPlaceholder_Taxon"),
                        j =>
                        {
                            j.HasKey("Taxons_Id", "Placeholders_Id");

                            j.ToTable("TaxonPlaceholder");

                            j.HasIndex(new[] { "Placeholders_Id" }, "IX_FK_TaxonPlaceholder_Placeholder");
                        });
            });

            modelBuilder.Entity<Tenant>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.ObjectId).IsRequired();

                entity.HasMany(d => d.ContentCollections)
                    .WithMany(p => p.Tenants)
                    .UsingEntity<Dictionary<string, object>>(
                        "TenantContentCollection",
                        l => l.HasOne<ContentCollection>().WithMany().HasForeignKey("ContentCollections_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TenantContentCollection_ContentCollection"),
                        r => r.HasOne<Tenant>().WithMany().HasForeignKey("Tenants_Id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TenantContentCollection_Tenant"),
                        j =>
                        {
                            j.HasKey("Tenants_Id", "ContentCollections_Id");

                            j.ToTable("TenantContentCollection");

                            j.HasIndex(new[] { "ContentCollections_Id" }, "IX_FK_TenantContentCollection_ContentCollection");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}